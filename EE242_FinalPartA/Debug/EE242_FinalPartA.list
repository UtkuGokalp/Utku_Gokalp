
EE242_FinalPartA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e730  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  0800e8c0  0800e8c0  0001e8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efb0  0800efb0  00020310  2**0
                  CONTENTS
  4 .ARM          00000008  0800efb0  0800efb0  0001efb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efb8  0800efb8  00020310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efb8  0800efb8  0001efb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800efbc  0800efbc  0001efbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  0800efc0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020310  2**0
                  CONTENTS
 10 .bss          00001d74  20000310  20000310  00020310  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002084  20002084  00020310  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY
 13 .debug_info   000153ee  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003433  00000000  00000000  0003572e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  00038b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001160  00000000  00000000  00039e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002600f  00000000  00000000  0003afb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016a99  00000000  00000000  00060fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db272  00000000  00000000  00077a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00152cca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006640  00000000  00000000  00152d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000310 	.word	0x20000310
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e8a8 	.word	0x0800e8a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000314 	.word	0x20000314
 80001cc:	0800e8a8 	.word	0x0800e8a8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <ReadADCValue>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
double ReadADCValue(ADC_HandleTypeDef* adc)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 800101e:	af00      	add	r7, sp, #0
 8001020:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001024:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 8001028:	6018      	str	r0, [r3, #0]
	double adcReadingsBuffer[100] = { 0 };
 800102a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800102e:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8001032:	4618      	mov	r0, r3
 8001034:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001038:	461a      	mov	r2, r3
 800103a:	2100      	movs	r1, #0
 800103c:	f008 ff1c 	bl	8009e78 <memset>
	for (int i = 0; i < 100; i++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8001046:	e029      	b.n	800109c <ReadADCValue+0x84>
	{
		if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8001048:	210a      	movs	r1, #10
 800104a:	4832      	ldr	r0, [pc, #200]	; (8001114 <ReadADCValue+0xfc>)
 800104c:	f001 fc5e 	bl	800290c <HAL_ADC_PollForConversion>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d11d      	bne.n	8001092 <ReadADCValue+0x7a>
		{
			adcReadingsBuffer[i] = (double)HAL_ADC_GetValue(adc);
 8001056:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800105a:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	f001 fcdf 	bl	8002a22 <HAL_ADC_GetValue>
 8001064:	4603      	mov	r3, r0
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fa5c 	bl	8000524 <__aeabi_ui2d>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	f507 7150 	add.w	r1, r7, #832	; 0x340
 8001074:	f5a1 704e 	sub.w	r0, r1, #824	; 0x338
 8001078:	f8d7 133c 	ldr.w	r1, [r7, #828]	; 0x33c
 800107c:	00c9      	lsls	r1, r1, #3
 800107e:	4401      	add	r1, r0
 8001080:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_ADC_Start(adc);
 8001084:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001088:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	f001 fb6b 	bl	8002768 <HAL_ADC_Start>
	for (int i = 0; i < 100; i++)
 8001092:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8001096:	3301      	adds	r3, #1
 8001098:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800109c:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80010a0:	2b63      	cmp	r3, #99	; 0x63
 80010a2:	ddd1      	ble.n	8001048 <ReadADCValue+0x30>
		}
	}
	
	double sum = 0;
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e9c7 23cc 	strd	r2, r3, [r7, #816]	; 0x330
	for (int i = 0; i < 100; i++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 80010b6:	e016      	b.n	80010e6 <ReadADCValue+0xce>
	{
		sum += adcReadingsBuffer[i];
 80010b8:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80010bc:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 80010c0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4413      	add	r3, r2
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 80010d0:	f7ff f8ec 	bl	80002ac <__adddf3>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	e9c7 23cc 	strd	r2, r3, [r7, #816]	; 0x330
	for (int i = 0; i < 100; i++)
 80010dc:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80010e0:	3301      	adds	r3, #1
 80010e2:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 80010e6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80010ea:	2b63      	cmp	r3, #99	; 0x63
 80010ec:	dde4      	ble.n	80010b8 <ReadADCValue+0xa0>
	}
	return sum / 100;
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <ReadADCValue+0x100>)
 80010f4:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 80010f8:	f7ff fbb8 	bl	800086c <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	ec43 2b17 	vmov	d7, r2, r3
}
 8001104:	eeb0 0a47 	vmov.f32	s0, s14
 8001108:	eef0 0a67 	vmov.f32	s1, s15
 800110c:	f507 7750 	add.w	r7, r7, #832	; 0x340
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000032c 	.word	0x2000032c
 8001118:	40590000 	.word	0x40590000

0800111c <UpdatePWMDutyCycle>:

double weight1_FOR_MONITOR = 0;
double weight2_FOR_MONITOR = 0;
void UpdatePWMDutyCycle(TIM_HandleTypeDef* tim, double percent)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	ed87 0b00 	vstr	d0, [r7]
	tim->Instance->CCR2 = (uint32_t)(percent * tim->Instance->ARR);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f9f8 	bl	8000524 <__aeabi_ui2d>
 8001134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001138:	f7ff fa6e 	bl	8000618 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681c      	ldr	r4, [r3, #0]
 8001148:	f7ff fd3e 	bl	8000bc8 <__aeabi_d2uiz>
 800114c:	4603      	mov	r3, r0
 800114e:	63a3      	str	r3, [r4, #56]	; 0x38
	
	if (tim->Instance == htim3.Instance)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <UpdatePWMDutyCycle+0xb8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d118      	bne.n	800118e <UpdatePWMDutyCycle+0x72>
	{
		weight1_FOR_MONITOR = (double)(uint32_t)(percent * tim->Instance->ARR);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f9de 	bl	8000524 <__aeabi_ui2d>
 8001168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800116c:	f7ff fa54 	bl	8000618 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	f7ff fd26 	bl	8000bc8 <__aeabi_d2uiz>
 800117c:	4603      	mov	r3, r0
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f9d0 	bl	8000524 <__aeabi_ui2d>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4913      	ldr	r1, [pc, #76]	; (80011d8 <UpdatePWMDutyCycle+0xbc>)
 800118a:	e9c1 2300 	strd	r2, r3, [r1]
	}
	if (tim->Instance == htim5.Instance)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <UpdatePWMDutyCycle+0xc0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d118      	bne.n	80011cc <UpdatePWMDutyCycle+0xb0>
	{
		weight2_FOR_MONITOR = (double)(uint32_t)(percent * tim->Instance->ARR);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f9bf 	bl	8000524 <__aeabi_ui2d>
 80011a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011aa:	f7ff fa35 	bl	8000618 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fd07 	bl	8000bc8 <__aeabi_d2uiz>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9b1 	bl	8000524 <__aeabi_ui2d>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4906      	ldr	r1, [pc, #24]	; (80011e0 <UpdatePWMDutyCycle+0xc4>)
 80011c8:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd90      	pop	{r4, r7, pc}
 80011d4:	200003bc 	.word	0x200003bc
 80011d8:	20000450 	.word	0x20000450
 80011dc:	20000404 	.word	0x20000404
 80011e0:	20000458 	.word	0x20000458

080011e4 <GetWeight>:

double GetWeight(int index)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	return ReadADCValue(index == 0 ? &hadc1 : &hadc2) / ADC_RESOLUTION_MAX_VALUE; 
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <GetWeight+0x12>
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <GetWeight+0x40>)
 80011f4:	e000      	b.n	80011f8 <GetWeight+0x14>
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <GetWeight+0x44>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff0d 	bl	8001018 <ReadADCValue>
 80011fe:	ec51 0b10 	vmov	r0, r1, d0
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <GetWeight+0x48>)
 8001208:	f7ff fb30 	bl	800086c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	ec43 2b17 	vmov	d7, r2, r3
}
 8001214:	eeb0 0a47 	vmov.f32	s0, s14
 8001218:	eef0 0a67 	vmov.f32	s1, s15
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000032c 	.word	0x2000032c
 8001228:	20000374 	.word	0x20000374
 800122c:	40b00000 	.word	0x40b00000

08001230 <SetWeight>:

void SetWeight(int index, double value)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	ed87 0b00 	vstr	d0, [r7]
	UpdatePWMDutyCycle(index == 0 ? &htim3 : &htim5, value);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <SetWeight+0x16>
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <SetWeight+0x2c>)
 8001244:	e000      	b.n	8001248 <SetWeight+0x18>
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <SetWeight+0x30>)
 8001248:	ed97 0b00 	vldr	d0, [r7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff65 	bl	800111c <UpdatePWMDutyCycle>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200003bc 	.word	0x200003bc
 8001260:	20000404 	.word	0x20000404

08001264 <Decide>:

int Decide(int* inputs)
{
 8001264:	b5b0      	push	{r4, r5, r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	double sum = 0;
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	f04f 0300 	mov.w	r3, #0
 8001274:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < INPUT_COUNT; i++)
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e01f      	b.n	80012be <Decide+0x5a>
	{
		sum += inputs[i] * GetWeight(i);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f95b 	bl	8000544 <__aeabi_i2d>
 800128e:	4604      	mov	r4, r0
 8001290:	460d      	mov	r5, r1
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7ff ffa6 	bl	80011e4 <GetWeight>
 8001298:	ec53 2b10 	vmov	r2, r3, d0
 800129c:	4620      	mov	r0, r4
 800129e:	4629      	mov	r1, r5
 80012a0:	f7ff f9ba 	bl	8000618 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012ac:	f7fe fffe 	bl	80002ac <__adddf3>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (int i = 0; i < INPUT_COUNT; i++)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3301      	adds	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	dddc      	ble.n	800127e <Decide+0x1a>
	}
	sum += bias;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <Decide+0xa0>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012ce:	f7fe ffed 	bl	80002ac <__adddf3>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return sum >= 0 ? 1 : 0;
 80012da:	2301      	movs	r3, #1
 80012dc:	461c      	mov	r4, r3
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012ea:	f7ff fc1b 	bl	8000b24 <__aeabi_dcmpge>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <Decide+0x94>
 80012f4:	2300      	movs	r3, #0
 80012f6:	461c      	mov	r4, r3
 80012f8:	b2e3      	uxtb	r3, r4
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bdb0      	pop	{r4, r5, r7, pc}
 8001302:	bf00      	nop
 8001304:	20000000 	.word	0x20000000

08001308 <TrainOnce>:

void TrainOnce(InOutData* combinations)
{
 8001308:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < COMBINATION_COUNT; i++)
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	e09b      	b.n	8001450 <TrainOnce+0x148>
	{
		int decision = Decide(combinations[i].inputs);
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	461a      	mov	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4413      	add	r3, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff9b 	bl	8001264 <Decide>
 800132e:	6138      	str	r0, [r7, #16]
		double error = combinations[i].output - decision;
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8fc 	bl	8000544 <__aeabi_i2d>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	e9c7 2302 	strd	r2, r3, [r7, #8]
		bias += learningRate * error;
 8001354:	4b43      	ldr	r3, [pc, #268]	; (8001464 <TrainOnce+0x15c>)
 8001356:	e9d3 0100 	ldrd	r0, r1, [r3]
 800135a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800135e:	f7ff f95b 	bl	8000618 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <TrainOnce+0x160>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7fe ff9c 	bl	80002ac <__adddf3>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	493b      	ldr	r1, [pc, #236]	; (8001468 <TrainOnce+0x160>)
 800137a:	e9c1 2300 	strd	r2, r3, [r1]
		//HAL_Delay(1);
		SetWeight(0, GetWeight(0) + learningRate * error * combinations[i].inputs[0]);
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff ff30 	bl	80011e4 <GetWeight>
 8001384:	ec59 8b10 	vmov	r8, r9, d0
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <TrainOnce+0x15c>)
 800138a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800138e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001392:	f7ff f941 	bl	8000618 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4614      	mov	r4, r2
 800139c:	461d      	mov	r5, r3
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	461a      	mov	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8c7 	bl	8000544 <__aeabi_i2d>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4620      	mov	r0, r4
 80013bc:	4629      	mov	r1, r5
 80013be:	f7ff f92b 	bl	8000618 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4640      	mov	r0, r8
 80013c8:	4649      	mov	r1, r9
 80013ca:	f7fe ff6f 	bl	80002ac <__adddf3>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	ec43 2b17 	vmov	d7, r2, r3
 80013d6:	eeb0 0a47 	vmov.f32	s0, s14
 80013da:	eef0 0a67 	vmov.f32	s1, s15
 80013de:	2000      	movs	r0, #0
 80013e0:	f7ff ff26 	bl	8001230 <SetWeight>
		SetWeight(1, GetWeight(1) + learningRate * error * combinations[i].inputs[1]);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f7ff fefd 	bl	80011e4 <GetWeight>
 80013ea:	ec59 8b10 	vmov	r8, r9, d0
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <TrainOnce+0x15c>)
 80013f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013f8:	f7ff f90e 	bl	8000618 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4614      	mov	r4, r2
 8001402:	461d      	mov	r5, r3
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	461a      	mov	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4413      	add	r3, r2
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f894 	bl	8000544 <__aeabi_i2d>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4620      	mov	r0, r4
 8001422:	4629      	mov	r1, r5
 8001424:	f7ff f8f8 	bl	8000618 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4640      	mov	r0, r8
 800142e:	4649      	mov	r1, r9
 8001430:	f7fe ff3c 	bl	80002ac <__adddf3>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	ec43 2b17 	vmov	d7, r2, r3
 800143c:	eeb0 0a47 	vmov.f32	s0, s14
 8001440:	eef0 0a67 	vmov.f32	s1, s15
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fef3 	bl	8001230 <SetWeight>
	for (int i = 0; i < COMBINATION_COUNT; i++)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3301      	adds	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b03      	cmp	r3, #3
 8001454:	f77f af60 	ble.w	8001318 <TrainOnce+0x10>
	}
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001464:	20000008 	.word	0x20000008
 8001468:	20000000 	.word	0x20000000

0800146c <UpdateLEDState>:

//Returns the result of the decision
int UpdateLEDState(InOutData* combinations, int index, uint16_t pin)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	4613      	mov	r3, r2
 8001478:	80fb      	strh	r3, [r7, #6]
	int result = Decide(combinations[index].inputs);
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	461a      	mov	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4413      	add	r3, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff feea 	bl	8001264 <Decide>
 8001490:	6178      	str	r0, [r7, #20]
    HAL_GPIO_WritePin(GPIOD, pin, result == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2b01      	cmp	r3, #1
 8001496:	bf0c      	ite	eq
 8001498:	2301      	moveq	r3, #1
 800149a:	2300      	movne	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4803      	ldr	r0, [pc, #12]	; (80014b4 <UpdateLEDState+0x48>)
 80014a6:	f001 ff95 	bl	80033d4 <HAL_GPIO_WritePin>
    return result;
 80014aa:	697b      	ldr	r3, [r7, #20]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40020c00 	.word	0x40020c00

080014b8 <GetWordsFromCommand>:

void GetWordsFromCommand(char* command, char* words[COMMAND_MAX_WORD_COUNT])
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
	char* word = strtok(command, " ");
 80014c2:	4911      	ldr	r1, [pc, #68]	; (8001508 <GetWordsFromCommand+0x50>)
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f00a faef 	bl	800baa8 <strtok>
 80014ca:	60f8      	str	r0, [r7, #12]
	words[0] = word;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	601a      	str	r2, [r3, #0]
	int index = 1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
	while (word != NULL && index < COMMAND_MAX_WORD_COUNT - 1)
 80014d6:	e00c      	b.n	80014f2 <GetWordsFromCommand+0x3a>
	{
        words[index++] = word = strtok(NULL, " ");
 80014d8:	490b      	ldr	r1, [pc, #44]	; (8001508 <GetWordsFromCommand+0x50>)
 80014da:	2000      	movs	r0, #0
 80014dc:	f00a fae4 	bl	800baa8 <strtok>
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	60ba      	str	r2, [r7, #8]
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	4413      	add	r3, r2
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	601a      	str	r2, [r3, #0]
	while (word != NULL && index < COMMAND_MAX_WORD_COUNT - 1)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <GetWordsFromCommand+0x46>
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b12      	cmp	r3, #18
 80014fc:	ddec      	ble.n	80014d8 <GetWordsFromCommand+0x20>
	}
}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	0800e8c0 	.word	0x0800e8c0

0800150c <Retrain>:

void Retrain(char* commandOutputBuffer, char* words[COMMAND_MAX_WORD_COUNT])
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	if (trainingComplete)
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <Retrain+0x38>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d008      	beq.n	8001530 <Retrain+0x24>
	{
		trainingComplete = false;
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <Retrain+0x38>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
		snprintf(commandOutputBuffer, COMMAND_OUTPUT_BUFFER_SIZE, "Retraining.\n");
 8001524:	4a08      	ldr	r2, [pc, #32]	; (8001548 <Retrain+0x3c>)
 8001526:	2164      	movs	r1, #100	; 0x64
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f009 fc33 	bl	800ad94 <sniprintf>
	}
	else
	{
		snprintf(commandOutputBuffer, COMMAND_OUTPUT_BUFFER_SIZE, "Previous training not complete.\n");
	}
}
 800152e:	e004      	b.n	800153a <Retrain+0x2e>
		snprintf(commandOutputBuffer, COMMAND_OUTPUT_BUFFER_SIZE, "Previous training not complete.\n");
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <Retrain+0x40>)
 8001532:	2164      	movs	r1, #100	; 0x64
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f009 fc2d 	bl	800ad94 <sniprintf>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2000044c 	.word	0x2000044c
 8001548:	0800e8c4 	.word	0x0800e8c4
 800154c:	0800e8d4 	.word	0x0800e8d4

08001550 <WeightCommand>:

void WeightCommand(int index, char* commandOutputBuffer, char* words[COMMAND_MAX_WORD_COUNT])
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af02      	add	r7, sp, #8
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
	if (strcmp(words[1], "get") && strcmp(words[1], "set"))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3304      	adds	r3, #4
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4922      	ldr	r1, [pc, #136]	; (80015ec <WeightCommand+0x9c>)
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe fe33 	bl	80001d0 <strcmp>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00f      	beq.n	8001590 <WeightCommand+0x40>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3304      	adds	r3, #4
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	491e      	ldr	r1, [pc, #120]	; (80015f0 <WeightCommand+0xa0>)
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe fe29 	bl	80001d0 <strcmp>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <WeightCommand+0x40>
	{
		snprintf(commandOutputBuffer, COMMAND_OUTPUT_BUFFER_SIZE, "get or set is expected as the first argument.\n");
 8001584:	4a1b      	ldr	r2, [pc, #108]	; (80015f4 <WeightCommand+0xa4>)
 8001586:	2164      	movs	r1, #100	; 0x64
 8001588:	68b8      	ldr	r0, [r7, #8]
 800158a:	f009 fc03 	bl	800ad94 <sniprintf>
		return;
 800158e:	e029      	b.n	80015e4 <WeightCommand+0x94>
	}
	if (!strcmp(words[1], "set"))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3304      	adds	r3, #4
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4916      	ldr	r1, [pc, #88]	; (80015f0 <WeightCommand+0xa0>)
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fe19 	bl	80001d0 <strcmp>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d110      	bne.n	80015c6 <WeightCommand+0x76>
	{
		SetWeight(index, atof(words[2]));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3308      	adds	r3, #8
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f008 fc1a 	bl	8009de4 <atof>
 80015b0:	eeb0 7a40 	vmov.f32	s14, s0
 80015b4:	eef0 7a60 	vmov.f32	s15, s1
 80015b8:	eeb0 0a47 	vmov.f32	s0, s14
 80015bc:	eef0 0a67 	vmov.f32	s1, s15
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff fe35 	bl	8001230 <SetWeight>
	}
	snprintf(commandOutputBuffer, COMMAND_OUTPUT_BUFFER_SIZE, "weight%d is %f.\n", index, GetWeight(index));
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f7ff fe0c 	bl	80011e4 <GetWeight>
 80015cc:	eeb0 7a40 	vmov.f32	s14, s0
 80015d0:	eef0 7a60 	vmov.f32	s15, s1
 80015d4:	ed8d 7b00 	vstr	d7, [sp]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <WeightCommand+0xa8>)
 80015dc:	2164      	movs	r1, #100	; 0x64
 80015de:	68b8      	ldr	r0, [r7, #8]
 80015e0:	f009 fbd8 	bl	800ad94 <sniprintf>
}
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	0800e8f8 	.word	0x0800e8f8
 80015f0:	0800e8fc 	.word	0x0800e8fc
 80015f4:	0800e900 	.word	0x0800e900
 80015f8:	0800e930 	.word	0x0800e930

080015fc <Weight0Command>:

void Weight0Command(char* commandOutputBuffer, char* words[COMMAND_MAX_WORD_COUNT])
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	WeightCommand(0, commandOutputBuffer, words);
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff ffa0 	bl	8001550 <WeightCommand>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <Weight1Command>:

void Weight1Command(char* commandOutputBuffer, char* words[COMMAND_MAX_WORD_COUNT])
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
	WeightCommand(1, commandOutputBuffer, words);
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	2001      	movs	r0, #1
 8001628:	f7ff ff92 	bl	8001550 <WeightCommand>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <BiasCommand>:

void BiasCommand(char* commandOutputBuffer, char* words[COMMAND_MAX_WORD_COUNT])
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af02      	add	r7, sp, #8
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
	if (strcmp(words[1], "get") && strcmp(words[1], "set"))
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	3304      	adds	r3, #4
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	491d      	ldr	r1, [pc, #116]	; (80016bc <BiasCommand+0x88>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fdc2 	bl	80001d0 <strcmp>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00f      	beq.n	8001672 <BiasCommand+0x3e>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	3304      	adds	r3, #4
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4919      	ldr	r1, [pc, #100]	; (80016c0 <BiasCommand+0x8c>)
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe fdb8 	bl	80001d0 <strcmp>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <BiasCommand+0x3e>
	{
		snprintf(commandOutputBuffer, COMMAND_OUTPUT_BUFFER_SIZE, "get or set is expected as the first argument.\n");
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <BiasCommand+0x90>)
 8001668:	2164      	movs	r1, #100	; 0x64
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f009 fb92 	bl	800ad94 <sniprintf>
		return;
 8001670:	e020      	b.n	80016b4 <BiasCommand+0x80>
	}
	if (!strcmp(words[1], "set"))
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	3304      	adds	r3, #4
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4911      	ldr	r1, [pc, #68]	; (80016c0 <BiasCommand+0x8c>)
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fda8 	bl	80001d0 <strcmp>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10c      	bne.n	80016a0 <BiasCommand+0x6c>
	{
		bias = atof(words[2]);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	3308      	adds	r3, #8
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f008 fba9 	bl	8009de4 <atof>
 8001692:	eeb0 7a40 	vmov.f32	s14, s0
 8001696:	eef0 7a60 	vmov.f32	s15, s1
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <BiasCommand+0x94>)
 800169c:	ed83 7b00 	vstr	d7, [r3]
	}
	snprintf(commandOutputBuffer, COMMAND_OUTPUT_BUFFER_SIZE, "bias is %f.\n", bias);
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <BiasCommand+0x94>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	e9cd 2300 	strd	r2, r3, [sp]
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <BiasCommand+0x98>)
 80016ac:	2164      	movs	r1, #100	; 0x64
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f009 fb70 	bl	800ad94 <sniprintf>
}
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	0800e8f8 	.word	0x0800e8f8
 80016c0:	0800e8fc 	.word	0x0800e8fc
 80016c4:	0800e900 	.word	0x0800e900
 80016c8:	20000000 	.word	0x20000000
 80016cc:	0800e944 	.word	0x0800e944

080016d0 <LearningRateCommand>:

void LearningRateCommand(char* commandOutputBuffer, char* words[COMMAND_MAX_WORD_COUNT])
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
	if (strcmp(words[1], "get") && strcmp(words[1], "set"))
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	3304      	adds	r3, #4
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	491d      	ldr	r1, [pc, #116]	; (8001758 <LearningRateCommand+0x88>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fd74 	bl	80001d0 <strcmp>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00f      	beq.n	800170e <LearningRateCommand+0x3e>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	3304      	adds	r3, #4
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4919      	ldr	r1, [pc, #100]	; (800175c <LearningRateCommand+0x8c>)
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fd6a 	bl	80001d0 <strcmp>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <LearningRateCommand+0x3e>
	{
		snprintf(commandOutputBuffer, COMMAND_OUTPUT_BUFFER_SIZE, "get or set is expected as the first argument.\n");
 8001702:	4a17      	ldr	r2, [pc, #92]	; (8001760 <LearningRateCommand+0x90>)
 8001704:	2164      	movs	r1, #100	; 0x64
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f009 fb44 	bl	800ad94 <sniprintf>
		return;
 800170c:	e020      	b.n	8001750 <LearningRateCommand+0x80>
	}
	if (!strcmp(words[1], "set"))
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	3304      	adds	r3, #4
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4911      	ldr	r1, [pc, #68]	; (800175c <LearningRateCommand+0x8c>)
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fd5a 	bl	80001d0 <strcmp>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10c      	bne.n	800173c <LearningRateCommand+0x6c>
	{
		learningRate = atof(words[2]);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	3308      	adds	r3, #8
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f008 fb5b 	bl	8009de4 <atof>
 800172e:	eeb0 7a40 	vmov.f32	s14, s0
 8001732:	eef0 7a60 	vmov.f32	s15, s1
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <LearningRateCommand+0x94>)
 8001738:	ed83 7b00 	vstr	d7, [r3]
	}
	snprintf(commandOutputBuffer, COMMAND_OUTPUT_BUFFER_SIZE, "learningRate is %f.\n", learningRate);
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <LearningRateCommand+0x94>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	e9cd 2300 	strd	r2, r3, [sp]
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <LearningRateCommand+0x98>)
 8001748:	2164      	movs	r1, #100	; 0x64
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f009 fb22 	bl	800ad94 <sniprintf>
}
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	0800e8f8 	.word	0x0800e8f8
 800175c:	0800e8fc 	.word	0x0800e8fc
 8001760:	0800e900 	.word	0x0800e900
 8001764:	20000008 	.word	0x20000008
 8001768:	0800e954 	.word	0x0800e954

0800176c <InOutCommand>:

void InOutCommand(char* commandOutputBuffer, char* words[COMMAND_MAX_WORD_COUNT])
{
 800176c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176e:	b095      	sub	sp, #84	; 0x54
 8001770:	af0c      	add	r7, sp, #48	; 0x30
 8001772:	61f8      	str	r0, [r7, #28]
 8001774:	61b9      	str	r1, [r7, #24]
	if (strcmp(words[1], "get") && strcmp(words[1], "set"))
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	3304      	adds	r3, #4
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	493c      	ldr	r1, [pc, #240]	; (8001870 <InOutCommand+0x104>)
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fd26 	bl	80001d0 <strcmp>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00f      	beq.n	80017aa <InOutCommand+0x3e>
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	3304      	adds	r3, #4
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4938      	ldr	r1, [pc, #224]	; (8001874 <InOutCommand+0x108>)
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fd1c 	bl	80001d0 <strcmp>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <InOutCommand+0x3e>
	{
		snprintf(commandOutputBuffer, COMMAND_OUTPUT_BUFFER_SIZE, "get or set is expected as the first argument.\n");
 800179e:	4a36      	ldr	r2, [pc, #216]	; (8001878 <InOutCommand+0x10c>)
 80017a0:	2164      	movs	r1, #100	; 0x64
 80017a2:	69f8      	ldr	r0, [r7, #28]
 80017a4:	f009 faf6 	bl	800ad94 <sniprintf>
		return;
 80017a8:	e05f      	b.n	800186a <InOutCommand+0xfe>
	}
	if (!strcmp(words[1], "set"))
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	3304      	adds	r3, #4
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4930      	ldr	r1, [pc, #192]	; (8001874 <InOutCommand+0x108>)
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fd0c 	bl	80001d0 <strcmp>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d123      	bne.n	8001806 <InOutCommand+0x9a>
	{
		combinations[0].output    = atoi(words[2]);
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	3308      	adds	r3, #8
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f008 fb10 	bl	8009dea <atoi>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a2b      	ldr	r2, [pc, #172]	; (800187c <InOutCommand+0x110>)
 80017ce:	6093      	str	r3, [r2, #8]
		combinations[1].output    = atoi(words[3]);
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	330c      	adds	r3, #12
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f008 fb07 	bl	8009dea <atoi>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a27      	ldr	r2, [pc, #156]	; (800187c <InOutCommand+0x110>)
 80017e0:	6153      	str	r3, [r2, #20]
		combinations[2].output    = atoi(words[4]);
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	3310      	adds	r3, #16
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f008 fafe 	bl	8009dea <atoi>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4a22      	ldr	r2, [pc, #136]	; (800187c <InOutCommand+0x110>)
 80017f2:	6213      	str	r3, [r2, #32]
		combinations[3].output    = atoi(words[5]);
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	3314      	adds	r3, #20
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f008 faf5 	bl	8009dea <atoi>
 8001800:	4603      	mov	r3, r0
 8001802:	4a1e      	ldr	r2, [pc, #120]	; (800187c <InOutCommand+0x110>)
 8001804:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
	snprintf(commandOutputBuffer, COMMAND_OUTPUT_BUFFER_SIZE, "%d %d %d\n%d %d %d\n%d %d %d\n%d %d %d\n",
 8001806:	4b1d      	ldr	r3, [pc, #116]	; (800187c <InOutCommand+0x110>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <InOutCommand+0x110>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	4a1a      	ldr	r2, [pc, #104]	; (800187c <InOutCommand+0x110>)
 8001812:	6892      	ldr	r2, [r2, #8]
 8001814:	613a      	str	r2, [r7, #16]
 8001816:	4919      	ldr	r1, [pc, #100]	; (800187c <InOutCommand+0x110>)
 8001818:	68c9      	ldr	r1, [r1, #12]
 800181a:	4818      	ldr	r0, [pc, #96]	; (800187c <InOutCommand+0x110>)
 800181c:	6900      	ldr	r0, [r0, #16]
 800181e:	4c17      	ldr	r4, [pc, #92]	; (800187c <InOutCommand+0x110>)
 8001820:	6964      	ldr	r4, [r4, #20]
 8001822:	4d16      	ldr	r5, [pc, #88]	; (800187c <InOutCommand+0x110>)
 8001824:	69ad      	ldr	r5, [r5, #24]
 8001826:	4e15      	ldr	r6, [pc, #84]	; (800187c <InOutCommand+0x110>)
 8001828:	69f6      	ldr	r6, [r6, #28]
 800182a:	4a14      	ldr	r2, [pc, #80]	; (800187c <InOutCommand+0x110>)
 800182c:	6a12      	ldr	r2, [r2, #32]
 800182e:	60fa      	str	r2, [r7, #12]
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <InOutCommand+0x110>)
 8001832:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001834:	60ba      	str	r2, [r7, #8]
 8001836:	4a11      	ldr	r2, [pc, #68]	; (800187c <InOutCommand+0x110>)
 8001838:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	4a0f      	ldr	r2, [pc, #60]	; (800187c <InOutCommand+0x110>)
 800183e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001840:	920a      	str	r2, [sp, #40]	; 0x28
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	9209      	str	r2, [sp, #36]	; 0x24
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	9208      	str	r2, [sp, #32]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	9207      	str	r2, [sp, #28]
 800184e:	9606      	str	r6, [sp, #24]
 8001850:	9505      	str	r5, [sp, #20]
 8001852:	9404      	str	r4, [sp, #16]
 8001854:	9003      	str	r0, [sp, #12]
 8001856:	9102      	str	r1, [sp, #8]
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	9201      	str	r2, [sp, #4]
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	4a07      	ldr	r2, [pc, #28]	; (8001880 <InOutCommand+0x114>)
 8001862:	2164      	movs	r1, #100	; 0x64
 8001864:	69f8      	ldr	r0, [r7, #28]
 8001866:	f009 fa95 	bl	800ad94 <sniprintf>
		    		combinations[0].inputs[0], combinations[0].inputs[1], combinations[0].output,
		    		combinations[1].inputs[0], combinations[1].inputs[1], combinations[1].output,
					combinations[2].inputs[0], combinations[2].inputs[1], combinations[2].output,
					combinations[3].inputs[0], combinations[3].inputs[1], combinations[3].output);
}
 800186a:	3724      	adds	r7, #36	; 0x24
 800186c:	46bd      	mov	sp, r7
 800186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001870:	0800e8f8 	.word	0x0800e8f8
 8001874:	0800e8fc 	.word	0x0800e8fc
 8001878:	0800e900 	.word	0x0800e900
 800187c:	20000010 	.word	0x20000010
 8001880:	0800e96c 	.word	0x0800e96c

08001884 <ProcessUSBCommand>:

void ProcessUSBCommand(char* buffer, uint32_t length)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b0ce      	sub	sp, #312	; 0x138
 8001888:	af00      	add	r7, sp, #0
 800188a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800188e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001892:	6018      	str	r0, [r3, #0]
 8001894:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001898:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800189c:	6019      	str	r1, [r3, #0]
	//Be able to change weight1, weight2, bias, learning rate, inputs-outputs and restart training
	
	//retrain doesn't have any arguments. Other commands are used as follows
	//<command> get prints out the current value(s)
	//<command> set <value(s)> sets the value(s)
	Command commands[] =
 800189e:	4b82      	ldr	r3, [pc, #520]	; (8001aa8 <ProcessUSBCommand+0x224>)
 80018a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80018a4:	4b81      	ldr	r3, [pc, #516]	; (8001aac <ProcessUSBCommand+0x228>)
 80018a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80018aa:	4b81      	ldr	r3, [pc, #516]	; (8001ab0 <ProcessUSBCommand+0x22c>)
 80018ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80018b0:	4b80      	ldr	r3, [pc, #512]	; (8001ab4 <ProcessUSBCommand+0x230>)
 80018b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018b6:	4b80      	ldr	r3, [pc, #512]	; (8001ab8 <ProcessUSBCommand+0x234>)
 80018b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80018bc:	4b7f      	ldr	r3, [pc, #508]	; (8001abc <ProcessUSBCommand+0x238>)
 80018be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80018c2:	4b7f      	ldr	r3, [pc, #508]	; (8001ac0 <ProcessUSBCommand+0x23c>)
 80018c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80018c8:	4b7e      	ldr	r3, [pc, #504]	; (8001ac4 <ProcessUSBCommand+0x240>)
 80018ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80018ce:	4b7e      	ldr	r3, [pc, #504]	; (8001ac8 <ProcessUSBCommand+0x244>)
 80018d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80018d4:	4b7d      	ldr	r3, [pc, #500]	; (8001acc <ProcessUSBCommand+0x248>)
 80018d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80018da:	4b7d      	ldr	r3, [pc, #500]	; (8001ad0 <ProcessUSBCommand+0x24c>)
 80018dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018e0:	4b7c      	ldr	r3, [pc, #496]	; (8001ad4 <ProcessUSBCommand+0x250>)
 80018e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		(Command) { .command = "weight1", .func = Weight1Command },
		(Command) { .command = "bias", .func = BiasCommand },
		(Command) { .command = "learningRate", .func = LearningRateCommand },
		(Command) { .command = "inout", .func = InOutCommand },
	};
	char transmitBuffer[COMMAND_OUTPUT_BUFFER_SIZE + 1] = { 0 };
 80018e6:	2300      	movs	r3, #0
 80018e8:	663b      	str	r3, [r7, #96]	; 0x60
 80018ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018ee:	2261      	movs	r2, #97	; 0x61
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f008 fac0 	bl	8009e78 <memset>
	char* words[COMMAND_MAX_WORD_COUNT] = { 0 };
 80018f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018fc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001900:	4618      	mov	r0, r3
 8001902:	2350      	movs	r3, #80	; 0x50
 8001904:	461a      	mov	r2, r3
 8001906:	2100      	movs	r1, #0
 8001908:	f008 fab6 	bl	8009e78 <memset>
	char* tempBuffer = calloc(length + 1, sizeof(char));
 800190c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001910:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3301      	adds	r3, #1
 8001918:	2101      	movs	r1, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f008 fa6a 	bl	8009df4 <calloc>
 8001920:	4603      	mov	r3, r0
 8001922:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	for (int i = 0; i < length; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800192c:	e013      	b.n	8001956 <ProcessUSBCommand+0xd2>
	{
		tempBuffer[i] = buffer[i];
 800192e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001932:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001936:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	441a      	add	r2, r3
 800193e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001942:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8001946:	440b      	add	r3, r1
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++)
 800194c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001950:	3301      	adds	r3, #1
 8001952:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001956:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800195a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800195e:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d8e2      	bhi.n	800192e <ProcessUSBCommand+0xaa>
	}
	memset(buffer, 0, length);
 8001968:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800196c:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8001970:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001974:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	2100      	movs	r1, #0
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	f008 fa7b 	bl	8009e78 <memset>
	GetWordsFromCommand(tempBuffer, words);
 8001982:	f107 0310 	add.w	r3, r7, #16
 8001986:	4619      	mov	r1, r3
 8001988:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800198c:	f7ff fd94 	bl	80014b8 <GetWordsFromCommand>
	int wordCount = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	while (words[wordCount] != NULL)
 8001996:	e004      	b.n	80019a2 <ProcessUSBCommand+0x11e>
	{
		wordCount++;
 8001998:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800199c:	3301      	adds	r3, #1
 800199e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	while (words[wordCount] != NULL)
 80019a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80019aa:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80019ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <ProcessUSBCommand+0x114>
	}
	
	if (wordCount > 0)
 80019b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	dd57      	ble.n	8001a6e <ProcessUSBCommand+0x1ea>
	{
		int i = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for (; i < GetArraySize(commands); i++)
 80019c4:	e03f      	b.n	8001a46 <ProcessUSBCommand+0x1c2>
		{
			Command cmd = commands[i];
 80019c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019ca:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80019ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80019d8:	443b      	add	r3, r7
 80019da:	3b40      	subs	r3, #64	; 0x40
 80019dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019e0:	e882 0003 	stmia.w	r2, {r0, r1}
			if (!strcmp(words[0], cmd.command))
 80019e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019e8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80019f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f7fe fbe8 	bl	80001d0 <strcmp>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d11a      	bne.n	8001a3c <ProcessUSBCommand+0x1b8>
			{
				if (cmd.func == NULL)
 8001a06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d107      	bne.n	8001a24 <ProcessUSBCommand+0x1a0>
				{
					snprintf(transmitBuffer, COMMAND_OUTPUT_BUFFER_SIZE, "No function defined to be executed for the command.\n");
 8001a14:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a18:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <ProcessUSBCommand+0x254>)
 8001a1a:	2164      	movs	r1, #100	; 0x64
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f009 f9b9 	bl	800ad94 <sniprintf>
					break;
 8001a22:	e014      	b.n	8001a4e <ProcessUSBCommand+0x1ca>
				}
				cmd.func(transmitBuffer, words);
 8001a24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f107 0110 	add.w	r1, r7, #16
 8001a32:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a36:	4610      	mov	r0, r2
 8001a38:	4798      	blx	r3
				break;
 8001a3a:	e008      	b.n	8001a4e <ProcessUSBCommand+0x1ca>
		for (; i < GetArraySize(commands); i++)
 8001a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a40:	3301      	adds	r3, #1
 8001a42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d9bb      	bls.n	80019c6 <ProcessUSBCommand+0x142>
			}
		}
		if (i == GetArraySize(commands))
 8001a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d112      	bne.n	8001a7c <ProcessUSBCommand+0x1f8>
		{
			snprintf(transmitBuffer, COMMAND_OUTPUT_BUFFER_SIZE, "No matching command found. (given command: %s)\n", words[0]);
 8001a56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001a64:	4a1d      	ldr	r2, [pc, #116]	; (8001adc <ProcessUSBCommand+0x258>)
 8001a66:	2164      	movs	r1, #100	; 0x64
 8001a68:	f009 f994 	bl	800ad94 <sniprintf>
 8001a6c:	e006      	b.n	8001a7c <ProcessUSBCommand+0x1f8>
		}
	}
	else
	{
		snprintf(transmitBuffer, COMMAND_OUTPUT_BUFFER_SIZE, "No words found in given command.\n");
 8001a6e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a72:	4a1b      	ldr	r2, [pc, #108]	; (8001ae0 <ProcessUSBCommand+0x25c>)
 8001a74:	2164      	movs	r1, #100	; 0x64
 8001a76:	4618      	mov	r0, r3
 8001a78:	f009 f98c 	bl	800ad94 <sniprintf>
	}
	CDC_Transmit_FS((uint8_t*)transmitBuffer, strlen(transmitBuffer));
 8001a7c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fbaf 	bl	80001e4 <strlen>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f007 fd4b 	bl	800952c <CDC_Transmit_FS>
	free(tempBuffer);
 8001a96:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8001a9a:	f008 f9e5 	bl	8009e68 <free>
}
 8001a9e:	bf00      	nop
 8001aa0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	0800e994 	.word	0x0800e994
 8001aac:	0800150d 	.word	0x0800150d
 8001ab0:	0800e99c 	.word	0x0800e99c
 8001ab4:	080015fd 	.word	0x080015fd
 8001ab8:	0800e9a4 	.word	0x0800e9a4
 8001abc:	08001619 	.word	0x08001619
 8001ac0:	0800e9ac 	.word	0x0800e9ac
 8001ac4:	08001635 	.word	0x08001635
 8001ac8:	0800e9b4 	.word	0x0800e9b4
 8001acc:	080016d1 	.word	0x080016d1
 8001ad0:	0800e9c4 	.word	0x0800e9c4
 8001ad4:	0800176d 	.word	0x0800176d
 8001ad8:	0800e9cc 	.word	0x0800e9cc
 8001adc:	0800ea04 	.word	0x0800ea04
 8001ae0:	0800ea34 	.word	0x0800ea34
 8001ae4:	00000000 	.word	0x00000000

08001ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aee:	f000 fd61 	bl	80025b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af2:	f000 f8df 	bl	8001cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af6:	f000 fa9b 	bl	8002030 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001afa:	f000 f945 	bl	8001d88 <MX_ADC1_Init>
  MX_TIM5_Init();
 8001afe:	f000 fa3f 	bl	8001f80 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001b02:	f000 f9e5 	bl	8001ed0 <MX_TIM3_Init>
  MX_ADC2_Init();
 8001b06:	f000 f991 	bl	8001e2c <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 8001b0a:	f007 fc4b 	bl	80093a4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b0e:	2104      	movs	r1, #4
 8001b10:	4861      	ldr	r0, [pc, #388]	; (8001c98 <main+0x1b0>)
 8001b12:	f003 fbb5 	bl	8005280 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001b16:	2104      	movs	r1, #4
 8001b18:	4860      	ldr	r0, [pc, #384]	; (8001c9c <main+0x1b4>)
 8001b1a:	f003 fbb1 	bl	8005280 <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 8001b1e:	4860      	ldr	r0, [pc, #384]	; (8001ca0 <main+0x1b8>)
 8001b20:	f000 fe22 	bl	8002768 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8001b24:	485f      	ldr	r0, [pc, #380]	; (8001ca4 <main+0x1bc>)
 8001b26:	f000 fe1f 	bl	8002768 <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //Assign random values for the duty cycles
  UpdatePWMDutyCycle(&htim3, 0.54);
 8001b2a:	ed9f 0b57 	vldr	d0, [pc, #348]	; 8001c88 <main+0x1a0>
 8001b2e:	485a      	ldr	r0, [pc, #360]	; (8001c98 <main+0x1b0>)
 8001b30:	f7ff faf4 	bl	800111c <UpdatePWMDutyCycle>
  UpdatePWMDutyCycle(&htim5, 0.68);
 8001b34:	ed9f 0b56 	vldr	d0, [pc, #344]	; 8001c90 <main+0x1a8>
 8001b38:	4858      	ldr	r0, [pc, #352]	; (8001c9c <main+0x1b4>)
 8001b3a:	f7ff faef 	bl	800111c <UpdatePWMDutyCycle>
  while (1)
  {
	  if (!trainingComplete)
 8001b3e:	4b5a      	ldr	r3, [pc, #360]	; (8001ca8 <main+0x1c0>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	f083 0301 	eor.w	r3, r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f8      	beq.n	8001b3e <main+0x56>
	  {
		  TrainOnce(combinations);
 8001b4c:	4857      	ldr	r0, [pc, #348]	; (8001cac <main+0x1c4>)
 8001b4e:	f7ff fbdb 	bl	8001308 <TrainOnce>
		  PIN12 -  Green  (comb0)
		  PIN13 - Orange  (comb1)
		  PIN14 -    Red  (comb2)
		  PIN15 -   Blue  (comb3)
		  */
		  int decision0 = UpdateLEDState(combinations, 0, comb0LED_Pin);
 8001b52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b56:	2100      	movs	r1, #0
 8001b58:	4854      	ldr	r0, [pc, #336]	; (8001cac <main+0x1c4>)
 8001b5a:	f7ff fc87 	bl	800146c <UpdateLEDState>
 8001b5e:	6138      	str	r0, [r7, #16]
		  int decision1 = UpdateLEDState(combinations, 1, comb1LED_Pin);
 8001b60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b64:	2101      	movs	r1, #1
 8001b66:	4851      	ldr	r0, [pc, #324]	; (8001cac <main+0x1c4>)
 8001b68:	f7ff fc80 	bl	800146c <UpdateLEDState>
 8001b6c:	60f8      	str	r0, [r7, #12]
		  int decision2 = UpdateLEDState(combinations, 2, comb2LED_Pin);
 8001b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b72:	2102      	movs	r1, #2
 8001b74:	484d      	ldr	r0, [pc, #308]	; (8001cac <main+0x1c4>)
 8001b76:	f7ff fc79 	bl	800146c <UpdateLEDState>
 8001b7a:	60b8      	str	r0, [r7, #8]
		  int decision3 = UpdateLEDState(combinations, 3, comb3LED_Pin);
 8001b7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b80:	2103      	movs	r1, #3
 8001b82:	484a      	ldr	r0, [pc, #296]	; (8001cac <main+0x1c4>)
 8001b84:	f7ff fc72 	bl	800146c <UpdateLEDState>
 8001b88:	6078      	str	r0, [r7, #4]
		  	  
		  if (decision0 == combinations[0].output &&
 8001b8a:	4b48      	ldr	r3, [pc, #288]	; (8001cac <main+0x1c4>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d1d4      	bne.n	8001b3e <main+0x56>
		      decision1 == combinations[1].output &&
 8001b94:	4b45      	ldr	r3, [pc, #276]	; (8001cac <main+0x1c4>)
 8001b96:	695b      	ldr	r3, [r3, #20]
		  if (decision0 == combinations[0].output &&
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d1cf      	bne.n	8001b3e <main+0x56>
		      decision2 == combinations[2].output &&
 8001b9e:	4b43      	ldr	r3, [pc, #268]	; (8001cac <main+0x1c4>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
		      decision1 == combinations[1].output &&
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1ca      	bne.n	8001b3e <main+0x56>
		      decision3 == combinations[3].output)
 8001ba8:	4b40      	ldr	r3, [pc, #256]	; (8001cac <main+0x1c4>)
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		      decision2 == combinations[2].output &&
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d1c5      	bne.n	8001b3e <main+0x56>
		  {
		      //Signal training complete
			  HAL_Delay(500);
 8001bb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bb6:	f000 fd6f 	bl	8002698 <HAL_Delay>
			  for (int i = 0; i < 5; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e03a      	b.n	8001c36 <main+0x14e>
			  {
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, i % 2);
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	bfb8      	it	lt
 8001bca:	425b      	neglt	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd4:	4836      	ldr	r0, [pc, #216]	; (8001cb0 <main+0x1c8>)
 8001bd6:	f001 fbfd 	bl	80033d4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, i % 2);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	bfb8      	it	lt
 8001be4:	425b      	neglt	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bee:	4830      	ldr	r0, [pc, #192]	; (8001cb0 <main+0x1c8>)
 8001bf0:	f001 fbf0 	bl	80033d4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, i % 2);
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	bfb8      	it	lt
 8001bfe:	425b      	neglt	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c08:	4829      	ldr	r0, [pc, #164]	; (8001cb0 <main+0x1c8>)
 8001c0a:	f001 fbe3 	bl	80033d4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, i % 2);
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	bfb8      	it	lt
 8001c18:	425b      	neglt	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c22:	4823      	ldr	r0, [pc, #140]	; (8001cb0 <main+0x1c8>)
 8001c24:	f001 fbd6 	bl	80033d4 <HAL_GPIO_WritePin>
				  HAL_Delay(500);
 8001c28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c2c:	f000 fd34 	bl	8002698 <HAL_Delay>
			  for (int i = 0; i < 5; i++)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3301      	adds	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	ddc1      	ble.n	8001bc0 <main+0xd8>
			  }
			  //Show the results again
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, decision0);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c46:	481a      	ldr	r0, [pc, #104]	; (8001cb0 <main+0x1c8>)
 8001c48:	f001 fbc4 	bl	80033d4 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, decision1);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c56:	4816      	ldr	r0, [pc, #88]	; (8001cb0 <main+0x1c8>)
 8001c58:	f001 fbbc 	bl	80033d4 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, decision2);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c66:	4812      	ldr	r0, [pc, #72]	; (8001cb0 <main+0x1c8>)
 8001c68:	f001 fbb4 	bl	80033d4 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, decision3);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c76:	480e      	ldr	r0, [pc, #56]	; (8001cb0 <main+0x1c8>)
 8001c78:	f001 fbac 	bl	80033d4 <HAL_GPIO_WritePin>
		      trainingComplete = true;
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <main+0x1c0>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
	  if (!trainingComplete)
 8001c82:	e75c      	b.n	8001b3e <main+0x56>
 8001c84:	f3af 8000 	nop.w
 8001c88:	147ae148 	.word	0x147ae148
 8001c8c:	3fe147ae 	.word	0x3fe147ae
 8001c90:	5c28f5c3 	.word	0x5c28f5c3
 8001c94:	3fe5c28f 	.word	0x3fe5c28f
 8001c98:	200003bc 	.word	0x200003bc
 8001c9c:	20000404 	.word	0x20000404
 8001ca0:	2000032c 	.word	0x2000032c
 8001ca4:	20000374 	.word	0x20000374
 8001ca8:	2000044c 	.word	0x2000044c
 8001cac:	20000010 	.word	0x20000010
 8001cb0:	40020c00 	.word	0x40020c00

08001cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b094      	sub	sp, #80	; 0x50
 8001cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cba:	f107 0320 	add.w	r3, r7, #32
 8001cbe:	2230      	movs	r2, #48	; 0x30
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f008 f8d8 	bl	8009e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <SystemClock_Config+0xcc>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <SystemClock_Config+0xcc>)
 8001ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <SystemClock_Config+0xcc>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <SystemClock_Config+0xd0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <SystemClock_Config+0xd0>)
 8001cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <SystemClock_Config+0xd0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d10:	2301      	movs	r3, #1
 8001d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d24:	2308      	movs	r3, #8
 8001d26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d32:	2307      	movs	r3, #7
 8001d34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d36:	f107 0320 	add.w	r3, r7, #32
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 fde0 	bl	8004900 <HAL_RCC_OscConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d46:	f000 f9c5 	bl	80020d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d4a:	230f      	movs	r3, #15
 8001d4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001d5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	2105      	movs	r1, #5
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f003 f841 	bl	8004df0 <HAL_RCC_ClockConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d74:	f000 f9ae 	bl	80020d4 <Error_Handler>
  }
}
 8001d78:	bf00      	nop
 8001d7a:	3750      	adds	r7, #80	; 0x50
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40007000 	.word	0x40007000

08001d88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d8e:	463b      	mov	r3, r7
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d9a:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001d9c:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <MX_ADC1_Init+0x9c>)
 8001d9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001da2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001da6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001da8:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001db4:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001dca:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <MX_ADC1_Init+0xa0>)
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001de8:	480d      	ldr	r0, [pc, #52]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001dea:	f000 fc79 	bl	80026e0 <HAL_ADC_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001df4:	f000 f96e 	bl	80020d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001e00:	2307      	movs	r3, #7
 8001e02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e04:	463b      	mov	r3, r7
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_ADC1_Init+0x98>)
 8001e0a:	f000 fe17 	bl	8002a3c <HAL_ADC_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e14:	f000 f95e 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000032c 	.word	0x2000032c
 8001e24:	40012000 	.word	0x40012000
 8001e28:	0f000001 	.word	0x0f000001

08001e2c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e32:	463b      	mov	r3, r7
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001e3e:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <MX_ADC2_Init+0x98>)
 8001e40:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <MX_ADC2_Init+0x9c>)
 8001e42:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e44:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <MX_ADC2_Init+0x98>)
 8001e46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e4a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <MX_ADC2_Init+0x98>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001e52:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <MX_ADC2_Init+0x98>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <MX_ADC2_Init+0x98>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <MX_ADC2_Init+0x98>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <MX_ADC2_Init+0x98>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e6c:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <MX_ADC2_Init+0x98>)
 8001e6e:	4a17      	ldr	r2, [pc, #92]	; (8001ecc <MX_ADC2_Init+0xa0>)
 8001e70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <MX_ADC2_Init+0x98>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <MX_ADC2_Init+0x98>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_ADC2_Init+0x98>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <MX_ADC2_Init+0x98>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e8c:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <MX_ADC2_Init+0x98>)
 8001e8e:	f000 fc27 	bl	80026e0 <HAL_ADC_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001e98:	f000 f91c 	bl	80020d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001e9c:	2305      	movs	r3, #5
 8001e9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_ADC2_Init+0x98>)
 8001eae:	f000 fdc5 	bl	8002a3c <HAL_ADC_ConfigChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001eb8:	f000 f90c 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000374 	.word	0x20000374
 8001ec8:	40012100 	.word	0x40012100
 8001ecc:	0f000001 	.word	0x0f000001

08001ed0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed6:	f107 0320 	add.w	r3, r7, #32
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
 8001eee:	615a      	str	r2, [r3, #20]
 8001ef0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <MX_TIM3_Init+0xa8>)
 8001ef4:	4a21      	ldr	r2, [pc, #132]	; (8001f7c <MX_TIM3_Init+0xac>)
 8001ef6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <MX_TIM3_Init+0xa8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <MX_TIM3_Init+0xa8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <MX_TIM3_Init+0xa8>)
 8001f06:	2263      	movs	r2, #99	; 0x63
 8001f08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <MX_TIM3_Init+0xa8>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <MX_TIM3_Init+0xa8>)
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f16:	4818      	ldr	r0, [pc, #96]	; (8001f78 <MX_TIM3_Init+0xa8>)
 8001f18:	f003 f962 	bl	80051e0 <HAL_TIM_PWM_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001f22:	f000 f8d7 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f2e:	f107 0320 	add.w	r3, r7, #32
 8001f32:	4619      	mov	r1, r3
 8001f34:	4810      	ldr	r0, [pc, #64]	; (8001f78 <MX_TIM3_Init+0xa8>)
 8001f36:	f003 fda3 	bl	8005a80 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001f40:	f000 f8c8 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f44:	2360      	movs	r3, #96	; 0x60
 8001f46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5-1;
 8001f48:	2304      	movs	r3, #4
 8001f4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	2204      	movs	r2, #4
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4807      	ldr	r0, [pc, #28]	; (8001f78 <MX_TIM3_Init+0xa8>)
 8001f5c:	f003 fa58 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001f66:	f000 f8b5 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f6a:	4803      	ldr	r0, [pc, #12]	; (8001f78 <MX_TIM3_Init+0xa8>)
 8001f6c:	f000 f98c 	bl	8002288 <HAL_TIM_MspPostInit>

}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	200003bc 	.word	0x200003bc
 8001f7c:	40000400 	.word	0x40000400

08001f80 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f86:	f107 0320 	add.w	r3, r7, #32
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	615a      	str	r2, [r3, #20]
 8001fa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <MX_TIM5_Init+0xa8>)
 8001fa4:	4a21      	ldr	r2, [pc, #132]	; (800202c <MX_TIM5_Init+0xac>)
 8001fa6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1-1;
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <MX_TIM5_Init+0xa8>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fae:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <MX_TIM5_Init+0xa8>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <MX_TIM5_Init+0xa8>)
 8001fb6:	2263      	movs	r2, #99	; 0x63
 8001fb8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fba:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <MX_TIM5_Init+0xa8>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <MX_TIM5_Init+0xa8>)
 8001fc2:	2280      	movs	r2, #128	; 0x80
 8001fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001fc6:	4818      	ldr	r0, [pc, #96]	; (8002028 <MX_TIM5_Init+0xa8>)
 8001fc8:	f003 f90a 	bl	80051e0 <HAL_TIM_PWM_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001fd2:	f000 f87f 	bl	80020d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001fde:	f107 0320 	add.w	r3, r7, #32
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4810      	ldr	r0, [pc, #64]	; (8002028 <MX_TIM5_Init+0xa8>)
 8001fe6:	f003 fd4b 	bl	8005a80 <HAL_TIMEx_MasterConfigSynchronization>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001ff0:	f000 f870 	bl	80020d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff4:	2360      	movs	r3, #96	; 0x60
 8001ff6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30-1;
 8001ff8:	231d      	movs	r3, #29
 8001ffa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	2204      	movs	r2, #4
 8002008:	4619      	mov	r1, r3
 800200a:	4807      	ldr	r0, [pc, #28]	; (8002028 <MX_TIM5_Init+0xa8>)
 800200c:	f003 fa00 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002016:	f000 f85d 	bl	80020d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800201a:	4803      	ldr	r0, [pc, #12]	; (8002028 <MX_TIM5_Init+0xa8>)
 800201c:	f000 f934 	bl	8002288 <HAL_TIM_MspPostInit>

}
 8002020:	bf00      	nop
 8002022:	3728      	adds	r7, #40	; 0x28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000404 	.word	0x20000404
 800202c:	40000c00 	.word	0x40000c00

08002030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002036:	f107 030c 	add.w	r3, r7, #12
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
 8002044:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <MX_GPIO_Init+0x9c>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a1f      	ldr	r2, [pc, #124]	; (80020cc <MX_GPIO_Init+0x9c>)
 8002050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <MX_GPIO_Init+0x9c>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <MX_GPIO_Init+0x9c>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a18      	ldr	r2, [pc, #96]	; (80020cc <MX_GPIO_Init+0x9c>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <MX_GPIO_Init+0x9c>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <MX_GPIO_Init+0x9c>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a11      	ldr	r2, [pc, #68]	; (80020cc <MX_GPIO_Init+0x9c>)
 8002088:	f043 0308 	orr.w	r3, r3, #8
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <MX_GPIO_Init+0x9c>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, comb0LED_Pin|comb1LED_Pin|comb2LED_Pin|comb3LED_Pin, GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80020a0:	480b      	ldr	r0, [pc, #44]	; (80020d0 <MX_GPIO_Init+0xa0>)
 80020a2:	f001 f997 	bl	80033d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : comb0LED_Pin comb1LED_Pin comb2LED_Pin comb3LED_Pin */
  GPIO_InitStruct.Pin = comb0LED_Pin|comb1LED_Pin|comb2LED_Pin|comb3LED_Pin;
 80020a6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80020aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ac:	2301      	movs	r3, #1
 80020ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	4804      	ldr	r0, [pc, #16]	; (80020d0 <MX_GPIO_Init+0xa0>)
 80020c0:	f000 ffec 	bl	800309c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020c4:	bf00      	nop
 80020c6:	3720      	adds	r7, #32
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020c00 	.word	0x40020c00

080020d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d8:	b672      	cpsid	i
}
 80020da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020dc:	e7fe      	b.n	80020dc <Error_Handler+0x8>
	...

080020e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <HAL_MspInit+0x4c>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a0f      	ldr	r2, [pc, #60]	; (800212c <HAL_MspInit+0x4c>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HAL_MspInit+0x4c>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_MspInit+0x4c>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a08      	ldr	r2, [pc, #32]	; (800212c <HAL_MspInit+0x4c>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_MspInit+0x4c>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800211e:	2007      	movs	r0, #7
 8002120:	f000 ff7a 	bl	8003018 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40023800 	.word	0x40023800

08002130 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08c      	sub	sp, #48	; 0x30
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a2e      	ldr	r2, [pc, #184]	; (8002208 <HAL_ADC_MspInit+0xd8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d128      	bne.n	80021a4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	4b2d      	ldr	r3, [pc, #180]	; (800220c <HAL_ADC_MspInit+0xdc>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	4a2c      	ldr	r2, [pc, #176]	; (800220c <HAL_ADC_MspInit+0xdc>)
 800215c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002160:	6453      	str	r3, [r2, #68]	; 0x44
 8002162:	4b2a      	ldr	r3, [pc, #168]	; (800220c <HAL_ADC_MspInit+0xdc>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	4b26      	ldr	r3, [pc, #152]	; (800220c <HAL_ADC_MspInit+0xdc>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a25      	ldr	r2, [pc, #148]	; (800220c <HAL_ADC_MspInit+0xdc>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b23      	ldr	r3, [pc, #140]	; (800220c <HAL_ADC_MspInit+0xdc>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800218a:	2301      	movs	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800218e:	2303      	movs	r3, #3
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	481c      	ldr	r0, [pc, #112]	; (8002210 <HAL_ADC_MspInit+0xe0>)
 800219e:	f000 ff7d 	bl	800309c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80021a2:	e02c      	b.n	80021fe <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1a      	ldr	r2, [pc, #104]	; (8002214 <HAL_ADC_MspInit+0xe4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d127      	bne.n	80021fe <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_ADC_MspInit+0xdc>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a15      	ldr	r2, [pc, #84]	; (800220c <HAL_ADC_MspInit+0xdc>)
 80021b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_ADC_MspInit+0xdc>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <HAL_ADC_MspInit+0xdc>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a0e      	ldr	r2, [pc, #56]	; (800220c <HAL_ADC_MspInit+0xdc>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <HAL_ADC_MspInit+0xdc>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021e6:	2320      	movs	r3, #32
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ea:	2303      	movs	r3, #3
 80021ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f2:	f107 031c 	add.w	r3, r7, #28
 80021f6:	4619      	mov	r1, r3
 80021f8:	4805      	ldr	r0, [pc, #20]	; (8002210 <HAL_ADC_MspInit+0xe0>)
 80021fa:	f000 ff4f 	bl	800309c <HAL_GPIO_Init>
}
 80021fe:	bf00      	nop
 8002200:	3730      	adds	r7, #48	; 0x30
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40012000 	.word	0x40012000
 800220c:	40023800 	.word	0x40023800
 8002210:	40020000 	.word	0x40020000
 8002214:	40012100 	.word	0x40012100

08002218 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a15      	ldr	r2, [pc, #84]	; (800227c <HAL_TIM_PWM_MspInit+0x64>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d10e      	bne.n	8002248 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <HAL_TIM_PWM_MspInit+0x68>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a13      	ldr	r2, [pc, #76]	; (8002280 <HAL_TIM_PWM_MspInit+0x68>)
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_TIM_PWM_MspInit+0x68>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002246:	e012      	b.n	800226e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <HAL_TIM_PWM_MspInit+0x6c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10d      	bne.n	800226e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_TIM_PWM_MspInit+0x68>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a09      	ldr	r2, [pc, #36]	; (8002280 <HAL_TIM_PWM_MspInit+0x68>)
 800225c:	f043 0308 	orr.w	r3, r3, #8
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <HAL_TIM_PWM_MspInit+0x68>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
}
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40000400 	.word	0x40000400
 8002280:	40023800 	.word	0x40023800
 8002284:	40000c00 	.word	0x40000c00

08002288 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a24      	ldr	r2, [pc, #144]	; (8002338 <HAL_TIM_MspPostInit+0xb0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d11e      	bne.n	80022e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <HAL_TIM_MspPostInit+0xb4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a22      	ldr	r2, [pc, #136]	; (800233c <HAL_TIM_MspPostInit+0xb4>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_TIM_MspPostInit+0xb4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022d6:	2302      	movs	r3, #2
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	4817      	ldr	r0, [pc, #92]	; (8002340 <HAL_TIM_MspPostInit+0xb8>)
 80022e2:	f000 fedb 	bl	800309c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80022e6:	e022      	b.n	800232e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a15      	ldr	r2, [pc, #84]	; (8002344 <HAL_TIM_MspPostInit+0xbc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d11d      	bne.n	800232e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_TIM_MspPostInit+0xb4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a10      	ldr	r2, [pc, #64]	; (800233c <HAL_TIM_MspPostInit+0xb4>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <HAL_TIM_MspPostInit+0xb4>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800230e:	2302      	movs	r3, #2
 8002310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800231e:	2302      	movs	r3, #2
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	4619      	mov	r1, r3
 8002328:	4805      	ldr	r0, [pc, #20]	; (8002340 <HAL_TIM_MspPostInit+0xb8>)
 800232a:	f000 feb7 	bl	800309c <HAL_GPIO_Init>
}
 800232e:	bf00      	nop
 8002330:	3728      	adds	r7, #40	; 0x28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40000400 	.word	0x40000400
 800233c:	40023800 	.word	0x40023800
 8002340:	40020000 	.word	0x40020000
 8002344:	40000c00 	.word	0x40000c00

08002348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800234c:	e7fe      	b.n	800234c <NMI_Handler+0x4>

0800234e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <HardFault_Handler+0x4>

08002354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <MemManage_Handler+0x4>

0800235a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <BusFault_Handler+0x4>

08002360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <UsageFault_Handler+0x4>

08002366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002394:	f000 f960 	bl	8002658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}

0800239c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <OTG_FS_IRQHandler+0x10>)
 80023a2:	f001 f980 	bl	80036a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20001948 	.word	0x20001948

080023b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return 1;
 80023b4:	2301      	movs	r3, #1
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_kill>:

int _kill(int pid, int sig)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023ca:	f007 fd1b 	bl	8009e04 <__errno>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2216      	movs	r2, #22
 80023d2:	601a      	str	r2, [r3, #0]
  return -1;
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <_exit>:

void _exit (int status)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ffe7 	bl	80023c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023f2:	e7fe      	b.n	80023f2 <_exit+0x12>

080023f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	e00a      	b.n	800241c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002406:	f3af 8000 	nop.w
 800240a:	4601      	mov	r1, r0
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	60ba      	str	r2, [r7, #8]
 8002412:	b2ca      	uxtb	r2, r1
 8002414:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3301      	adds	r3, #1
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	429a      	cmp	r2, r3
 8002422:	dbf0      	blt.n	8002406 <_read+0x12>
  }

  return len;
 8002424:	687b      	ldr	r3, [r7, #4]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e009      	b.n	8002454 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	60ba      	str	r2, [r7, #8]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	3301      	adds	r3, #1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	429a      	cmp	r2, r3
 800245a:	dbf1      	blt.n	8002440 <_write+0x12>
  }
  return len;
 800245c:	687b      	ldr	r3, [r7, #4]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <_close>:

int _close(int file)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800246e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800248e:	605a      	str	r2, [r3, #4]
  return 0;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <_isatty>:

int _isatty(int file)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024a6:	2301      	movs	r3, #1
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <_sbrk+0x5c>)
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <_sbrk+0x60>)
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e4:	4b13      	ldr	r3, [pc, #76]	; (8002534 <_sbrk+0x64>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <_sbrk+0x64>)
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <_sbrk+0x68>)
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d207      	bcs.n	8002510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002500:	f007 fc80 	bl	8009e04 <__errno>
 8002504:	4603      	mov	r3, r0
 8002506:	220c      	movs	r2, #12
 8002508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800250e:	e009      	b.n	8002524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <_sbrk+0x64>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <_sbrk+0x64>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <_sbrk+0x64>)
 8002520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002522:	68fb      	ldr	r3, [r7, #12]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20020000 	.word	0x20020000
 8002530:	00000400 	.word	0x00000400
 8002534:	20000460 	.word	0x20000460
 8002538:	20002088 	.word	0x20002088

0800253c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <SystemInit+0x20>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	4a05      	ldr	r2, [pc, #20]	; (800255c <SystemInit+0x20>)
 8002548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800254c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002598 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002564:	480d      	ldr	r0, [pc, #52]	; (800259c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002566:	490e      	ldr	r1, [pc, #56]	; (80025a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002568:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800256a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800256c:	e002      	b.n	8002574 <LoopCopyDataInit>

0800256e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800256e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002572:	3304      	adds	r3, #4

08002574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002578:	d3f9      	bcc.n	800256e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257a:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800257c:	4c0b      	ldr	r4, [pc, #44]	; (80025ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800257e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002580:	e001      	b.n	8002586 <LoopFillZerobss>

08002582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002584:	3204      	adds	r2, #4

08002586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002588:	d3fb      	bcc.n	8002582 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800258a:	f7ff ffd7 	bl	800253c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800258e:	f007 fc3f 	bl	8009e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002592:	f7ff faa9 	bl	8001ae8 <main>
  bx  lr    
 8002596:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800259c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a0:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 80025a4:	0800efc0 	.word	0x0800efc0
  ldr r2, =_sbss
 80025a8:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 80025ac:	20002084 	.word	0x20002084

080025b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b0:	e7fe      	b.n	80025b0 <ADC_IRQHandler>
	...

080025b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025b8:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <HAL_Init+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <HAL_Init+0x40>)
 80025be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_Init+0x40>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <HAL_Init+0x40>)
 80025ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <HAL_Init+0x40>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <HAL_Init+0x40>)
 80025d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025dc:	2003      	movs	r0, #3
 80025de:	f000 fd1b 	bl	8003018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f000 f808 	bl	80025f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e8:	f7ff fd7a 	bl	80020e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023c00 	.word	0x40023c00

080025f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_InitTick+0x54>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_InitTick+0x58>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	4619      	mov	r1, r3
 800260a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fd33 	bl	8003082 <HAL_SYSTICK_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e00e      	b.n	8002644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b0f      	cmp	r3, #15
 800262a:	d80a      	bhi.n	8002642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800262c:	2200      	movs	r2, #0
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002634:	f000 fcfb 	bl	800302e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002638:	4a06      	ldr	r2, [pc, #24]	; (8002654 <HAL_InitTick+0x5c>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	e000      	b.n	8002644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000040 	.word	0x20000040
 8002650:	20000048 	.word	0x20000048
 8002654:	20000044 	.word	0x20000044

08002658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_IncTick+0x20>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_IncTick+0x24>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4413      	add	r3, r2
 8002668:	4a04      	ldr	r2, [pc, #16]	; (800267c <HAL_IncTick+0x24>)
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000048 	.word	0x20000048
 800267c:	20000464 	.word	0x20000464

08002680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return uwTick;
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_GetTick+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000464 	.word	0x20000464

08002698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a0:	f7ff ffee 	bl	8002680 <HAL_GetTick>
 80026a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026b0:	d005      	beq.n	80026be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_Delay+0x44>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026be:	bf00      	nop
 80026c0:	f7ff ffde 	bl	8002680 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d8f7      	bhi.n	80026c0 <HAL_Delay+0x28>
  {
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000048 	.word	0x20000048

080026e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e033      	b.n	800275e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff fd16 	bl	8002130 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	d118      	bne.n	8002750 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002726:	f023 0302 	bic.w	r3, r3, #2
 800272a:	f043 0202 	orr.w	r2, r3, #2
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 faa4 	bl	8002c80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f023 0303 	bic.w	r3, r3, #3
 8002746:	f043 0201 	orr.w	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
 800274e:	e001      	b.n	8002754 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_ADC_Start+0x1a>
 800277e:	2302      	movs	r3, #2
 8002780:	e0b2      	b.n	80028e8 <HAL_ADC_Start+0x180>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d018      	beq.n	80027ca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027a8:	4b52      	ldr	r3, [pc, #328]	; (80028f4 <HAL_ADC_Start+0x18c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a52      	ldr	r2, [pc, #328]	; (80028f8 <HAL_ADC_Start+0x190>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	0c9a      	lsrs	r2, r3, #18
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027bc:	e002      	b.n	80027c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f9      	bne.n	80027be <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d17a      	bne.n	80028ce <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002802:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002816:	d106      	bne.n	8002826 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	f023 0206 	bic.w	r2, r3, #6
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	645a      	str	r2, [r3, #68]	; 0x44
 8002824:	e002      	b.n	800282c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002834:	4b31      	ldr	r3, [pc, #196]	; (80028fc <HAL_ADC_Start+0x194>)
 8002836:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002840:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	2b00      	cmp	r3, #0
 800284c:	d12a      	bne.n	80028a4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <HAL_ADC_Start+0x198>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d015      	beq.n	8002884 <HAL_ADC_Start+0x11c>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a29      	ldr	r2, [pc, #164]	; (8002904 <HAL_ADC_Start+0x19c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d105      	bne.n	800286e <HAL_ADC_Start+0x106>
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <HAL_ADC_Start+0x194>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a25      	ldr	r2, [pc, #148]	; (8002908 <HAL_ADC_Start+0x1a0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d136      	bne.n	80028e6 <HAL_ADC_Start+0x17e>
 8002878:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_ADC_Start+0x194>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	d130      	bne.n	80028e6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d129      	bne.n	80028e6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	e020      	b.n	80028e6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a15      	ldr	r2, [pc, #84]	; (8002900 <HAL_ADC_Start+0x198>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d11b      	bne.n	80028e6 <HAL_ADC_Start+0x17e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d114      	bne.n	80028e6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	e00b      	b.n	80028e6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f043 0210 	orr.w	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	f043 0201 	orr.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	20000040 	.word	0x20000040
 80028f8:	431bde83 	.word	0x431bde83
 80028fc:	40012300 	.word	0x40012300
 8002900:	40012000 	.word	0x40012000
 8002904:	40012100 	.word	0x40012100
 8002908:	40012200 	.word	0x40012200

0800290c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002928:	d113      	bne.n	8002952 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002938:	d10b      	bne.n	8002952 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f043 0220 	orr.w	r2, r3, #32
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e063      	b.n	8002a1a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002952:	f7ff fe95 	bl	8002680 <HAL_GetTick>
 8002956:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002958:	e021      	b.n	800299e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002960:	d01d      	beq.n	800299e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <HAL_ADC_PollForConversion+0x6c>
 8002968:	f7ff fe8a 	bl	8002680 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d212      	bcs.n	800299e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b02      	cmp	r3, #2
 8002984:	d00b      	beq.n	800299e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f043 0204 	orr.w	r2, r3, #4
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e03d      	b.n	8002a1a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d1d6      	bne.n	800295a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0212 	mvn.w	r2, #18
 80029b4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d123      	bne.n	8002a18 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d11f      	bne.n	8002a18 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d111      	bne.n	8002a18 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f043 0201 	orr.w	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x1c>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e105      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x228>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b09      	cmp	r3, #9
 8002a66:	d925      	bls.n	8002ab4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68d9      	ldr	r1, [r3, #12]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b1e      	subs	r3, #30
 8002a7e:	2207      	movs	r2, #7
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43da      	mvns	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68d9      	ldr	r1, [r3, #12]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4403      	add	r3, r0
 8002aa6:	3b1e      	subs	r3, #30
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	e022      	b.n	8002afa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6919      	ldr	r1, [r3, #16]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	2207      	movs	r2, #7
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	400a      	ands	r2, r1
 8002ad6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6919      	ldr	r1, [r3, #16]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	4603      	mov	r3, r0
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4403      	add	r3, r0
 8002af0:	409a      	lsls	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d824      	bhi.n	8002b4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	3b05      	subs	r3, #5
 8002b14:	221f      	movs	r2, #31
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	400a      	ands	r2, r1
 8002b22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4618      	mov	r0, r3
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3b05      	subs	r3, #5
 8002b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	635a      	str	r2, [r3, #52]	; 0x34
 8002b4a:	e04c      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b0c      	cmp	r3, #12
 8002b52:	d824      	bhi.n	8002b9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	3b23      	subs	r3, #35	; 0x23
 8002b66:	221f      	movs	r2, #31
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43da      	mvns	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	400a      	ands	r2, r1
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	4618      	mov	r0, r3
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3b23      	subs	r3, #35	; 0x23
 8002b90:	fa00 f203 	lsl.w	r2, r0, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b9c:	e023      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	3b41      	subs	r3, #65	; 0x41
 8002bb0:	221f      	movs	r2, #31
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	4618      	mov	r0, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3b41      	subs	r3, #65	; 0x41
 8002bda:	fa00 f203 	lsl.w	r2, r0, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <HAL_ADC_ConfigChannel+0x234>)
 8002be8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <HAL_ADC_ConfigChannel+0x238>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d109      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x1cc>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b12      	cmp	r3, #18
 8002bfa:	d105      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a19      	ldr	r2, [pc, #100]	; (8002c74 <HAL_ADC_ConfigChannel+0x238>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d123      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x21e>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	d003      	beq.n	8002c22 <HAL_ADC_ConfigChannel+0x1e6>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b11      	cmp	r3, #17
 8002c20:	d11b      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b10      	cmp	r3, #16
 8002c34:	d111      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <HAL_ADC_ConfigChannel+0x23c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a10      	ldr	r2, [pc, #64]	; (8002c7c <HAL_ADC_ConfigChannel+0x240>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	0c9a      	lsrs	r2, r3, #18
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c4c:	e002      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f9      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	40012300 	.word	0x40012300
 8002c74:	40012000 	.word	0x40012000
 8002c78:	20000040 	.word	0x20000040
 8002c7c:	431bde83 	.word	0x431bde83

08002c80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c88:	4b79      	ldr	r3, [pc, #484]	; (8002e70 <ADC_Init+0x1f0>)
 8002c8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6859      	ldr	r1, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	021a      	lsls	r2, r3, #8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6899      	ldr	r1, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	4a58      	ldr	r2, [pc, #352]	; (8002e74 <ADC_Init+0x1f4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d022      	beq.n	8002d5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6899      	ldr	r1, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6899      	ldr	r1, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	e00f      	b.n	8002d7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0202 	bic.w	r2, r2, #2
 8002d8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6899      	ldr	r1, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7e1b      	ldrb	r3, [r3, #24]
 8002d98:	005a      	lsls	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01b      	beq.n	8002de4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6859      	ldr	r1, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	035a      	lsls	r2, r3, #13
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	e007      	b.n	8002df4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	051a      	lsls	r2, r3, #20
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6899      	ldr	r1, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e36:	025a      	lsls	r2, r3, #9
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6899      	ldr	r1, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	029a      	lsls	r2, r3, #10
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	40012300 	.word	0x40012300
 8002e74:	0f000001 	.word	0x0f000001

08002e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e94:	4013      	ands	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eaa:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	60d3      	str	r3, [r2, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	f003 0307 	and.w	r3, r3, #7
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	db0b      	blt.n	8002f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	4907      	ldr	r1, [pc, #28]	; (8002f14 <__NVIC_EnableIRQ+0x38>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2001      	movs	r0, #1
 8002efe:	fa00 f202 	lsl.w	r2, r0, r2
 8002f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000e100 	.word	0xe000e100

08002f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	6039      	str	r1, [r7, #0]
 8002f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	db0a      	blt.n	8002f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	490c      	ldr	r1, [pc, #48]	; (8002f64 <__NVIC_SetPriority+0x4c>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	0112      	lsls	r2, r2, #4
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f40:	e00a      	b.n	8002f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4908      	ldr	r1, [pc, #32]	; (8002f68 <__NVIC_SetPriority+0x50>)
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	3b04      	subs	r3, #4
 8002f50:	0112      	lsls	r2, r2, #4
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	440b      	add	r3, r1
 8002f56:	761a      	strb	r2, [r3, #24]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000e100 	.word	0xe000e100
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f1c3 0307 	rsb	r3, r3, #7
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	bf28      	it	cs
 8002f8a:	2304      	movcs	r3, #4
 8002f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3304      	adds	r3, #4
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d902      	bls.n	8002f9c <NVIC_EncodePriority+0x30>
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3b03      	subs	r3, #3
 8002f9a:	e000      	b.n	8002f9e <NVIC_EncodePriority+0x32>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43da      	mvns	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	401a      	ands	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	43d9      	mvns	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc4:	4313      	orrs	r3, r2
         );
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3724      	adds	r7, #36	; 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe4:	d301      	bcc.n	8002fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e00f      	b.n	800300a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <SysTick_Config+0x40>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ff2:	210f      	movs	r1, #15
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ff8:	f7ff ff8e 	bl	8002f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <SysTick_Config+0x40>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003002:	4b04      	ldr	r3, [pc, #16]	; (8003014 <SysTick_Config+0x40>)
 8003004:	2207      	movs	r2, #7
 8003006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	e000e010 	.word	0xe000e010

08003018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ff29 	bl	8002e78 <__NVIC_SetPriorityGrouping>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800302e:	b580      	push	{r7, lr}
 8003030:	b086      	sub	sp, #24
 8003032:	af00      	add	r7, sp, #0
 8003034:	4603      	mov	r3, r0
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003040:	f7ff ff3e 	bl	8002ec0 <__NVIC_GetPriorityGrouping>
 8003044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	6978      	ldr	r0, [r7, #20]
 800304c:	f7ff ff8e 	bl	8002f6c <NVIC_EncodePriority>
 8003050:	4602      	mov	r2, r0
 8003052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff5d 	bl	8002f18 <__NVIC_SetPriority>
}
 800305e:	bf00      	nop
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	4603      	mov	r3, r0
 800306e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff31 	bl	8002edc <__NVIC_EnableIRQ>
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ffa2 	bl	8002fd4 <SysTick_Config>
 8003090:	4603      	mov	r3, r0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	e16b      	b.n	8003390 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030b8:	2201      	movs	r2, #1
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	f040 815a 	bne.w	800338a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d005      	beq.n	80030ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d130      	bne.n	8003150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	2203      	movs	r2, #3
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4013      	ands	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003124:	2201      	movs	r2, #1
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 0201 	and.w	r2, r3, #1
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	2b03      	cmp	r3, #3
 800315a:	d017      	beq.n	800318c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	2203      	movs	r2, #3
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d123      	bne.n	80031e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	08da      	lsrs	r2, r3, #3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3208      	adds	r2, #8
 80031a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	220f      	movs	r2, #15
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	08da      	lsrs	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3208      	adds	r2, #8
 80031da:	69b9      	ldr	r1, [r7, #24]
 80031dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	2203      	movs	r2, #3
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0203 	and.w	r2, r3, #3
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80b4 	beq.w	800338a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	4b60      	ldr	r3, [pc, #384]	; (80033a8 <HAL_GPIO_Init+0x30c>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	4a5f      	ldr	r2, [pc, #380]	; (80033a8 <HAL_GPIO_Init+0x30c>)
 800322c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003230:	6453      	str	r3, [r2, #68]	; 0x44
 8003232:	4b5d      	ldr	r3, [pc, #372]	; (80033a8 <HAL_GPIO_Init+0x30c>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800323e:	4a5b      	ldr	r2, [pc, #364]	; (80033ac <HAL_GPIO_Init+0x310>)
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	089b      	lsrs	r3, r3, #2
 8003244:	3302      	adds	r3, #2
 8003246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	220f      	movs	r2, #15
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a52      	ldr	r2, [pc, #328]	; (80033b0 <HAL_GPIO_Init+0x314>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d02b      	beq.n	80032c2 <HAL_GPIO_Init+0x226>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a51      	ldr	r2, [pc, #324]	; (80033b4 <HAL_GPIO_Init+0x318>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d025      	beq.n	80032be <HAL_GPIO_Init+0x222>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a50      	ldr	r2, [pc, #320]	; (80033b8 <HAL_GPIO_Init+0x31c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01f      	beq.n	80032ba <HAL_GPIO_Init+0x21e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4f      	ldr	r2, [pc, #316]	; (80033bc <HAL_GPIO_Init+0x320>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d019      	beq.n	80032b6 <HAL_GPIO_Init+0x21a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4e      	ldr	r2, [pc, #312]	; (80033c0 <HAL_GPIO_Init+0x324>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_GPIO_Init+0x216>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4d      	ldr	r2, [pc, #308]	; (80033c4 <HAL_GPIO_Init+0x328>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00d      	beq.n	80032ae <HAL_GPIO_Init+0x212>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4c      	ldr	r2, [pc, #304]	; (80033c8 <HAL_GPIO_Init+0x32c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <HAL_GPIO_Init+0x20e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a4b      	ldr	r2, [pc, #300]	; (80033cc <HAL_GPIO_Init+0x330>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_GPIO_Init+0x20a>
 80032a2:	2307      	movs	r3, #7
 80032a4:	e00e      	b.n	80032c4 <HAL_GPIO_Init+0x228>
 80032a6:	2308      	movs	r3, #8
 80032a8:	e00c      	b.n	80032c4 <HAL_GPIO_Init+0x228>
 80032aa:	2306      	movs	r3, #6
 80032ac:	e00a      	b.n	80032c4 <HAL_GPIO_Init+0x228>
 80032ae:	2305      	movs	r3, #5
 80032b0:	e008      	b.n	80032c4 <HAL_GPIO_Init+0x228>
 80032b2:	2304      	movs	r3, #4
 80032b4:	e006      	b.n	80032c4 <HAL_GPIO_Init+0x228>
 80032b6:	2303      	movs	r3, #3
 80032b8:	e004      	b.n	80032c4 <HAL_GPIO_Init+0x228>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e002      	b.n	80032c4 <HAL_GPIO_Init+0x228>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <HAL_GPIO_Init+0x228>
 80032c2:	2300      	movs	r3, #0
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	f002 0203 	and.w	r2, r2, #3
 80032ca:	0092      	lsls	r2, r2, #2
 80032cc:	4093      	lsls	r3, r2
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032d4:	4935      	ldr	r1, [pc, #212]	; (80033ac <HAL_GPIO_Init+0x310>)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	3302      	adds	r3, #2
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032e2:	4b3b      	ldr	r3, [pc, #236]	; (80033d0 <HAL_GPIO_Init+0x334>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4013      	ands	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003306:	4a32      	ldr	r2, [pc, #200]	; (80033d0 <HAL_GPIO_Init+0x334>)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800330c:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <HAL_GPIO_Init+0x334>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003330:	4a27      	ldr	r2, [pc, #156]	; (80033d0 <HAL_GPIO_Init+0x334>)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003336:	4b26      	ldr	r3, [pc, #152]	; (80033d0 <HAL_GPIO_Init+0x334>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	43db      	mvns	r3, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4013      	ands	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800335a:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <HAL_GPIO_Init+0x334>)
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003360:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_GPIO_Init+0x334>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	43db      	mvns	r3, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003384:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <HAL_GPIO_Init+0x334>)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	3301      	adds	r3, #1
 800338e:	61fb      	str	r3, [r7, #28]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	2b0f      	cmp	r3, #15
 8003394:	f67f ae90 	bls.w	80030b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	3724      	adds	r7, #36	; 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40013800 	.word	0x40013800
 80033b0:	40020000 	.word	0x40020000
 80033b4:	40020400 	.word	0x40020400
 80033b8:	40020800 	.word	0x40020800
 80033bc:	40020c00 	.word	0x40020c00
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40021400 	.word	0x40021400
 80033c8:	40021800 	.word	0x40021800
 80033cc:	40021c00 	.word	0x40021c00
 80033d0:	40013c00 	.word	0x40013c00

080033d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]
 80033e0:	4613      	mov	r3, r2
 80033e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e4:	787b      	ldrb	r3, [r7, #1]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ea:	887a      	ldrh	r2, [r7, #2]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033f0:	e003      	b.n	80033fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033f2:	887b      	ldrh	r3, [r7, #2]
 80033f4:	041a      	lsls	r2, r3, #16
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	619a      	str	r2, [r3, #24]
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003406:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003408:	b08f      	sub	sp, #60	; 0x3c
 800340a:	af0a      	add	r7, sp, #40	; 0x28
 800340c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e10f      	b.n	8003638 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f006 f9c2 	bl	80097bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2203      	movs	r2, #3
 800343c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d102      	bne.n	8003452 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f002 fca3 	bl	8005da2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	687e      	ldr	r6, [r7, #4]
 8003464:	466d      	mov	r5, sp
 8003466:	f106 0410 	add.w	r4, r6, #16
 800346a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800346c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800346e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003472:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003476:	e885 0003 	stmia.w	r5, {r0, r1}
 800347a:	1d33      	adds	r3, r6, #4
 800347c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800347e:	6838      	ldr	r0, [r7, #0]
 8003480:	f002 fb7a 	bl	8005b78 <USB_CoreInit>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2202      	movs	r2, #2
 800348e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e0d0      	b.n	8003638 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f002 fc91 	bl	8005dc4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	e04a      	b.n	800353e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034a8:	7bfa      	ldrb	r2, [r7, #15]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	333d      	adds	r3, #61	; 0x3d
 80034b8:	2201      	movs	r2, #1
 80034ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	333c      	adds	r3, #60	; 0x3c
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	b298      	uxth	r0, r3
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3344      	adds	r3, #68	; 0x44
 80034e4:	4602      	mov	r2, r0
 80034e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3340      	adds	r3, #64	; 0x40
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034fc:	7bfa      	ldrb	r2, [r7, #15]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	3348      	adds	r3, #72	; 0x48
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	334c      	adds	r3, #76	; 0x4c
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	3354      	adds	r3, #84	; 0x54
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	3301      	adds	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	429a      	cmp	r2, r3
 8003546:	d3af      	bcc.n	80034a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003548:	2300      	movs	r3, #0
 800354a:	73fb      	strb	r3, [r7, #15]
 800354c:	e044      	b.n	80035d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003576:	7bfa      	ldrb	r2, [r7, #15]
 8003578:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	3301      	adds	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d3b5      	bcc.n	800354e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	687e      	ldr	r6, [r7, #4]
 80035ea:	466d      	mov	r5, sp
 80035ec:	f106 0410 	add.w	r4, r6, #16
 80035f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003600:	1d33      	adds	r3, r6, #4
 8003602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003604:	6838      	ldr	r0, [r7, #0]
 8003606:	f002 fc29 	bl	8005e5c <USB_DevInit>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e00d      	b.n	8003638 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f003 fd78 	bl	8007126 <USB_DevDisconnect>

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003640 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_PCD_Start+0x1c>
 8003658:	2302      	movs	r3, #2
 800365a:	e020      	b.n	800369e <HAL_PCD_Start+0x5e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	2b01      	cmp	r3, #1
 800366a:	d109      	bne.n	8003680 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003670:	2b01      	cmp	r3, #1
 8003672:	d005      	beq.n	8003680 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f002 fb7b 	bl	8005d80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f003 fd28 	bl	80070e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036a6:	b590      	push	{r4, r7, lr}
 80036a8:	b08d      	sub	sp, #52	; 0x34
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f003 fde6 	bl	800728e <USB_GetMode>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f040 848a 	bne.w	8003fde <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f003 fd4a 	bl	8007168 <USB_ReadInterrupts>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 8480 	beq.w	8003fdc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f003 fd37 	bl	8007168 <USB_ReadInterrupts>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b02      	cmp	r3, #2
 8003702:	d107      	bne.n	8003714 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f002 0202 	and.w	r2, r2, #2
 8003712:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f003 fd25 	bl	8007168 <USB_ReadInterrupts>
 800371e:	4603      	mov	r3, r0
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b10      	cmp	r3, #16
 8003726:	d161      	bne.n	80037ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0210 	bic.w	r2, r2, #16
 8003736:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f003 020f 	and.w	r2, r3, #15
 8003744:	4613      	mov	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4413      	add	r3, r2
 8003754:	3304      	adds	r3, #4
 8003756:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	0c5b      	lsrs	r3, r3, #17
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	2b02      	cmp	r3, #2
 8003762:	d124      	bne.n	80037ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d035      	beq.n	80037dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	091b      	lsrs	r3, r3, #4
 8003778:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800377a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800377e:	b29b      	uxth	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	6a38      	ldr	r0, [r7, #32]
 8003784:	f003 fb5c 	bl	8006e40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	091b      	lsrs	r3, r3, #4
 8003790:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003794:	441a      	add	r2, r3
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	6a1a      	ldr	r2, [r3, #32]
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037a6:	441a      	add	r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	621a      	str	r2, [r3, #32]
 80037ac:	e016      	b.n	80037dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	0c5b      	lsrs	r3, r3, #17
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	2b06      	cmp	r3, #6
 80037b8:	d110      	bne.n	80037dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037c0:	2208      	movs	r2, #8
 80037c2:	4619      	mov	r1, r3
 80037c4:	6a38      	ldr	r0, [r7, #32]
 80037c6:	f003 fb3b 	bl	8006e40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	6a1a      	ldr	r2, [r3, #32]
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037d6:	441a      	add	r2, r3
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0210 	orr.w	r2, r2, #16
 80037ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f003 fcb9 	bl	8007168 <USB_ReadInterrupts>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003800:	f040 80a7 	bne.w	8003952 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f003 fcbe 	bl	800718e <USB_ReadDevAllOutEpInterrupt>
 8003812:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003814:	e099      	b.n	800394a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 808e 	beq.w	800393e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f003 fce2 	bl	80071f6 <USB_ReadDevOutEPInterrupt>
 8003832:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00c      	beq.n	8003858 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384a:	461a      	mov	r2, r3
 800384c:	2301      	movs	r3, #1
 800384e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fec2 	bl	80045dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386e:	461a      	mov	r2, r3
 8003870:	2308      	movs	r3, #8
 8003872:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 ff98 	bl	80047ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f003 0310 	and.w	r3, r3, #16
 8003882:	2b00      	cmp	r3, #0
 8003884:	d008      	beq.n	8003898 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003892:	461a      	mov	r2, r3
 8003894:	2310      	movs	r3, #16
 8003896:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d030      	beq.n	8003904 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	2b80      	cmp	r3, #128	; 0x80
 80038ac:	d109      	bne.n	80038c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	4413      	add	r3, r2
 80038d4:	3304      	adds	r3, #4
 80038d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	78db      	ldrb	r3, [r3, #3]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d108      	bne.n	80038f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2200      	movs	r2, #0
 80038e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f006 f86b 	bl	80099c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fe:	461a      	mov	r2, r3
 8003900:	2302      	movs	r3, #2
 8003902:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391a:	461a      	mov	r2, r3
 800391c:	2320      	movs	r3, #32
 800391e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d009      	beq.n	800393e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003936:	461a      	mov	r2, r3
 8003938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800393c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	3301      	adds	r3, #1
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	085b      	lsrs	r3, r3, #1
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	f47f af62 	bne.w	8003816 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f003 fc06 	bl	8007168 <USB_ReadInterrupts>
 800395c:	4603      	mov	r3, r0
 800395e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003962:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003966:	f040 80db 	bne.w	8003b20 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f003 fc27 	bl	80071c2 <USB_ReadDevAllInEpInterrupt>
 8003974:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800397a:	e0cd      	b.n	8003b18 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80c2 	beq.w	8003b0c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	4611      	mov	r1, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f003 fc4d 	bl	8007232 <USB_ReadDevInEPInterrupt>
 8003998:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d057      	beq.n	8003a54 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	2201      	movs	r2, #1
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	43db      	mvns	r3, r3
 80039be:	69f9      	ldr	r1, [r7, #28]
 80039c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039c4:	4013      	ands	r3, r2
 80039c6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d4:	461a      	mov	r2, r3
 80039d6:	2301      	movs	r3, #1
 80039d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d132      	bne.n	8003a48 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e6:	4613      	mov	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	334c      	adds	r3, #76	; 0x4c
 80039f2:	6819      	ldr	r1, [r3, #0]
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4403      	add	r3, r0
 8003a02:	3348      	adds	r3, #72	; 0x48
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4419      	add	r1, r3
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4403      	add	r3, r0
 8003a16:	334c      	adds	r3, #76	; 0x4c
 8003a18:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d113      	bne.n	8003a48 <HAL_PCD_IRQHandler+0x3a2>
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	3354      	adds	r3, #84	; 0x54
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d108      	bne.n	8003a48 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a40:	461a      	mov	r2, r3
 8003a42:	2101      	movs	r1, #1
 8003a44:	f003 fc54 	bl	80072f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f005 ff35 	bl	80098be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a86:	461a      	mov	r2, r3
 8003a88:	2310      	movs	r3, #16
 8003a8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2340      	movs	r3, #64	; 0x40
 8003aa6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d023      	beq.n	8003afa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003ab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ab4:	6a38      	ldr	r0, [r7, #32]
 8003ab6:	f002 fb35 	bl	8006124 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abc:	4613      	mov	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	3338      	adds	r3, #56	; 0x38
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	3304      	adds	r3, #4
 8003acc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	78db      	ldrb	r3, [r3, #3]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d108      	bne.n	8003ae8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f005 ff82 	bl	80099ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af4:	461a      	mov	r2, r3
 8003af6:	2302      	movs	r3, #2
 8003af8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fcdb 	bl	80044c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	3301      	adds	r3, #1
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	085b      	lsrs	r3, r3, #1
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f47f af2e 	bne.w	800397c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f003 fb1f 	bl	8007168 <USB_ReadInterrupts>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b34:	d122      	bne.n	8003b7c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b44:	f023 0301 	bic.w	r3, r3, #1
 8003b48:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d108      	bne.n	8003b66 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fec2 	bl	80048e8 <HAL_PCDEx_LPM_Callback>
 8003b64:	e002      	b.n	8003b6c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f005 ff20 	bl	80099ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 faf1 	bl	8007168 <USB_ReadInterrupts>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b90:	d112      	bne.n	8003bb8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d102      	bne.n	8003ba8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f005 fedc 	bl	8009960 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695a      	ldr	r2, [r3, #20]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bb6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f003 fad3 	bl	8007168 <USB_ReadInterrupts>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bcc:	f040 80b7 	bne.w	8003d3e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2110      	movs	r1, #16
 8003bea:	4618      	mov	r0, r3
 8003bec:	f002 fa9a 	bl	8006124 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf4:	e046      	b.n	8003c84 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c02:	461a      	mov	r2, r3
 8003c04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c1a:	0151      	lsls	r1, r2, #5
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	440a      	add	r2, r1
 8003c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c36:	461a      	mov	r2, r3
 8003c38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c4e:	0151      	lsls	r1, r2, #5
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	440a      	add	r2, r1
 8003c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c6e:	0151      	lsls	r1, r2, #5
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	440a      	add	r2, r1
 8003c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	3301      	adds	r3, #1
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d3b3      	bcc.n	8003bf6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ca0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d016      	beq.n	8003cd8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cba:	f043 030b 	orr.w	r3, r3, #11
 8003cbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd0:	f043 030b 	orr.w	r3, r3, #11
 8003cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cd6:	e015      	b.n	8003d04 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003cee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cfe:	f043 030b 	orr.w	r3, r3, #11
 8003d02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f003 fae1 	bl	80072f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f003 fa10 	bl	8007168 <USB_ReadInterrupts>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d52:	d124      	bne.n	8003d9e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f003 faa6 	bl	80072aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f002 fa5b 	bl	800621e <USB_GetDevSpeed>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681c      	ldr	r4, [r3, #0]
 8003d74:	f001 fa28 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 8003d78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	4620      	mov	r0, r4
 8003d84:	f001 ff5a 	bl	8005c3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f005 fdc0 	bl	800990e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f003 f9e0 	bl	8007168 <USB_ReadInterrupts>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d10a      	bne.n	8003dc8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f005 fd9d 	bl	80098f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f002 0208 	and.w	r2, r2, #8
 8003dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f003 f9cb 	bl	8007168 <USB_ReadInterrupts>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd8:	2b80      	cmp	r3, #128	; 0x80
 8003dda:	d122      	bne.n	8003e22 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003de8:	2301      	movs	r3, #1
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
 8003dec:	e014      	b.n	8003e18 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df2:	4613      	mov	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d105      	bne.n	8003e12 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fb27 	bl	8004460 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	3301      	adds	r3, #1
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d3e5      	bcc.n	8003dee <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f003 f99e 	bl	8007168 <USB_ReadInterrupts>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e36:	d13b      	bne.n	8003eb0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e38:	2301      	movs	r3, #1
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3c:	e02b      	b.n	8003e96 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	3340      	adds	r3, #64	; 0x40
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d115      	bne.n	8003e90 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	da12      	bge.n	8003e90 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6e:	4613      	mov	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	333f      	adds	r3, #63	; 0x3f
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fae8 	bl	8004460 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	3301      	adds	r3, #1
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d3ce      	bcc.n	8003e3e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003eae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f003 f957 	bl	8007168 <USB_ReadInterrupts>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ec4:	d155      	bne.n	8003f72 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eca:	e045      	b.n	8003f58 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d12e      	bne.n	8003f52 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ef4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	da2b      	bge.n	8003f52 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003f06:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d121      	bne.n	8003f52 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f20:	2201      	movs	r2, #1
 8003f22:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f4e:	6053      	str	r3, [r2, #4]
            break;
 8003f50:	e007      	b.n	8003f62 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	3301      	adds	r3, #1
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d3b4      	bcc.n	8003ecc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f003 f8f6 	bl	8007168 <USB_ReadInterrupts>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f86:	d10a      	bne.n	8003f9e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f005 fd41 	bl	8009a10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f003 f8e0 	bl	8007168 <USB_ReadInterrupts>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d115      	bne.n	8003fde <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f005 fd31 	bl	8009a2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6859      	ldr	r1, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	e000      	b.n	8003fde <HAL_PCD_IRQHandler+0x938>
      return;
 8003fdc:	bf00      	nop
    }
  }
}
 8003fde:	3734      	adds	r7, #52	; 0x34
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd90      	pop	{r4, r7, pc}

08003fe4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_PCD_SetAddress+0x1a>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e013      	b.n	8004026 <HAL_PCD_SetAddress+0x42>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	78fa      	ldrb	r2, [r7, #3]
 800400a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	4611      	mov	r1, r2
 8004016:	4618      	mov	r0, r3
 8004018:	f003 f83e 	bl	8007098 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	4608      	mov	r0, r1
 8004038:	4611      	mov	r1, r2
 800403a:	461a      	mov	r2, r3
 800403c:	4603      	mov	r3, r0
 800403e:	70fb      	strb	r3, [r7, #3]
 8004040:	460b      	mov	r3, r1
 8004042:	803b      	strh	r3, [r7, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800404c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004050:	2b00      	cmp	r3, #0
 8004052:	da0f      	bge.n	8004074 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	f003 020f 	and.w	r2, r3, #15
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	3338      	adds	r3, #56	; 0x38
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	3304      	adds	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	705a      	strb	r2, [r3, #1]
 8004072:	e00f      	b.n	8004094 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	f003 020f 	and.w	r2, r3, #15
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	3304      	adds	r3, #4
 800408c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	b2da      	uxtb	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040a0:	883a      	ldrh	r2, [r7, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	78ba      	ldrb	r2, [r7, #2]
 80040aa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	785b      	ldrb	r3, [r3, #1]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d004      	beq.n	80040be <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040be:	78bb      	ldrb	r3, [r7, #2]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d102      	bne.n	80040ca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_PCD_EP_Open+0xaa>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e00e      	b.n	80040f6 <HAL_PCD_EP_Open+0xc8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68f9      	ldr	r1, [r7, #12]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f002 f8be 	bl	8006268 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80040f4:	7afb      	ldrb	r3, [r7, #11]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	460b      	mov	r3, r1
 8004108:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800410a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800410e:	2b00      	cmp	r3, #0
 8004110:	da0f      	bge.n	8004132 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	f003 020f 	and.w	r2, r3, #15
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	3338      	adds	r3, #56	; 0x38
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	4413      	add	r3, r2
 8004126:	3304      	adds	r3, #4
 8004128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	705a      	strb	r2, [r3, #1]
 8004130:	e00f      	b.n	8004152 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	f003 020f 	and.w	r2, r3, #15
 8004138:	4613      	mov	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	3304      	adds	r3, #4
 800414a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	b2da      	uxtb	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_PCD_EP_Close+0x6e>
 8004168:	2302      	movs	r3, #2
 800416a:	e00e      	b.n	800418a <HAL_PCD_EP_Close+0x8c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68f9      	ldr	r1, [r7, #12]
 800417a:	4618      	mov	r0, r3
 800417c:	f002 f8fc 	bl	8006378 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b086      	sub	sp, #24
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
 800419e:	460b      	mov	r3, r1
 80041a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041a2:	7afb      	ldrb	r3, [r7, #11]
 80041a4:	f003 020f 	and.w	r2, r3, #15
 80041a8:	4613      	mov	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4413      	add	r3, r2
 80041b8:	3304      	adds	r3, #4
 80041ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2200      	movs	r2, #0
 80041cc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2200      	movs	r2, #0
 80041d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041d4:	7afb      	ldrb	r3, [r7, #11]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d102      	bne.n	80041ee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041ee:	7afb      	ldrb	r3, [r7, #11]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	6979      	ldr	r1, [r7, #20]
 8004206:	f002 fbdb 	bl	80069c0 <USB_EP0StartXfer>
 800420a:	e008      	b.n	800421e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	461a      	mov	r2, r3
 8004218:	6979      	ldr	r1, [r7, #20]
 800421a:	f002 f989 	bl	8006530 <USB_EPStartXfer>
  }

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	f003 020f 	and.w	r2, r3, #15
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800424a:	681b      	ldr	r3, [r3, #0]
}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	460b      	mov	r3, r1
 8004266:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004268:	7afb      	ldrb	r3, [r7, #11]
 800426a:	f003 020f 	and.w	r2, r3, #15
 800426e:	4613      	mov	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	3338      	adds	r3, #56	; 0x38
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4413      	add	r3, r2
 800427c:	3304      	adds	r3, #4
 800427e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2200      	movs	r2, #0
 8004290:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2201      	movs	r2, #1
 8004296:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004298:	7afb      	ldrb	r3, [r7, #11]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d102      	bne.n	80042b2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042b2:	7afb      	ldrb	r3, [r7, #11]
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	6979      	ldr	r1, [r7, #20]
 80042ca:	f002 fb79 	bl	80069c0 <USB_EP0StartXfer>
 80042ce:	e008      	b.n	80042e2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6818      	ldr	r0, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	461a      	mov	r2, r3
 80042dc:	6979      	ldr	r1, [r7, #20]
 80042de:	f002 f927 	bl	8006530 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042f8:	78fb      	ldrb	r3, [r7, #3]
 80042fa:	f003 020f 	and.w	r2, r3, #15
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	429a      	cmp	r2, r3
 8004304:	d901      	bls.n	800430a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e050      	b.n	80043ac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800430a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800430e:	2b00      	cmp	r3, #0
 8004310:	da0f      	bge.n	8004332 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	f003 020f 	and.w	r2, r3, #15
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	3338      	adds	r3, #56	; 0x38
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	4413      	add	r3, r2
 8004326:	3304      	adds	r3, #4
 8004328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	705a      	strb	r2, [r3, #1]
 8004330:	e00d      	b.n	800434e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	4613      	mov	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	4413      	add	r3, r2
 8004344:	3304      	adds	r3, #4
 8004346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	b2da      	uxtb	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_PCD_EP_SetStall+0x82>
 800436a:	2302      	movs	r3, #2
 800436c:	e01e      	b.n	80043ac <HAL_PCD_EP_SetStall+0xc0>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	4618      	mov	r0, r3
 800437e:	f002 fdb7 	bl	8006ef0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	b2d9      	uxtb	r1, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800439c:	461a      	mov	r2, r3
 800439e:	f002 ffa7 	bl	80072f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	f003 020f 	and.w	r2, r3, #15
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d901      	bls.n	80043d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e042      	b.n	8004458 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	da0f      	bge.n	80043fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043da:	78fb      	ldrb	r3, [r7, #3]
 80043dc:	f003 020f 	and.w	r2, r3, #15
 80043e0:	4613      	mov	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	3338      	adds	r3, #56	; 0x38
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	3304      	adds	r3, #4
 80043f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	705a      	strb	r2, [r3, #1]
 80043f8:	e00f      	b.n	800441a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	f003 020f 	and.w	r2, r3, #15
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	4413      	add	r3, r2
 8004410:	3304      	adds	r3, #4
 8004412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_PCD_EP_ClrStall+0x86>
 8004436:	2302      	movs	r3, #2
 8004438:	e00e      	b.n	8004458 <HAL_PCD_EP_ClrStall+0xa4>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68f9      	ldr	r1, [r7, #12]
 8004448:	4618      	mov	r0, r3
 800444a:	f002 fdbf 	bl	8006fcc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800446c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004470:	2b00      	cmp	r3, #0
 8004472:	da0c      	bge.n	800448e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	f003 020f 	and.w	r2, r3, #15
 800447a:	4613      	mov	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	3338      	adds	r3, #56	; 0x38
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	4413      	add	r3, r2
 8004488:	3304      	adds	r3, #4
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	e00c      	b.n	80044a8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	f003 020f 	and.w	r2, r3, #15
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	4413      	add	r3, r2
 80044a4:	3304      	adds	r3, #4
 80044a6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68f9      	ldr	r1, [r7, #12]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f002 fbde 	bl	8006c70 <USB_EPStopXfer>
 80044b4:	4603      	mov	r3, r0
 80044b6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80044b8:	7afb      	ldrb	r3, [r7, #11]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b08a      	sub	sp, #40	; 0x28
 80044c6:	af02      	add	r7, sp, #8
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	3338      	adds	r3, #56	; 0x38
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4413      	add	r3, r2
 80044e6:	3304      	adds	r3, #4
 80044e8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a1a      	ldr	r2, [r3, #32]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d901      	bls.n	80044fa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e06c      	b.n	80045d4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	429a      	cmp	r2, r3
 800450e:	d902      	bls.n	8004516 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	3303      	adds	r3, #3
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800451e:	e02b      	b.n	8004578 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	699a      	ldr	r2, [r3, #24]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	429a      	cmp	r2, r3
 8004534:	d902      	bls.n	800453c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	3303      	adds	r3, #3
 8004540:	089b      	lsrs	r3, r3, #2
 8004542:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6919      	ldr	r1, [r3, #16]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004554:	b2db      	uxtb	r3, r3
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	4603      	mov	r3, r0
 800455a:	6978      	ldr	r0, [r7, #20]
 800455c:	f002 fc32 	bl	8006dc4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	441a      	add	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1a      	ldr	r2, [r3, #32]
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	441a      	add	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	b29b      	uxth	r3, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	429a      	cmp	r2, r3
 800458c:	d809      	bhi.n	80045a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a1a      	ldr	r2, [r3, #32]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004596:	429a      	cmp	r2, r3
 8004598:	d203      	bcs.n	80045a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1be      	bne.n	8004520 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d811      	bhi.n	80045d2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	2201      	movs	r2, #1
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	43db      	mvns	r3, r3
 80045c8:	6939      	ldr	r1, [r7, #16]
 80045ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ce:	4013      	ands	r3, r2
 80045d0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3720      	adds	r7, #32
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b088      	sub	sp, #32
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	333c      	adds	r3, #60	; 0x3c
 80045f4:	3304      	adds	r3, #4
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d17b      	bne.n	800470a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d015      	beq.n	8004648 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	4a61      	ldr	r2, [pc, #388]	; (80047a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	f240 80b9 	bls.w	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80b3 	beq.w	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463e:	461a      	mov	r2, r3
 8004640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004644:	6093      	str	r3, [r2, #8]
 8004646:	e0a7      	b.n	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d009      	beq.n	8004666 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465e:	461a      	mov	r2, r3
 8004660:	2320      	movs	r3, #32
 8004662:	6093      	str	r3, [r2, #8]
 8004664:	e098      	b.n	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800466c:	2b00      	cmp	r3, #0
 800466e:	f040 8093 	bne.w	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	4a4b      	ldr	r2, [pc, #300]	; (80047a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d90f      	bls.n	800469a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004690:	461a      	mov	r2, r3
 8004692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004696:	6093      	str	r3, [r2, #8]
 8004698:	e07e      	b.n	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	4413      	add	r3, r2
 80046ac:	3304      	adds	r3, #4
 80046ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	0159      	lsls	r1, r3, #5
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	440b      	add	r3, r1
 80046bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c6:	1ad2      	subs	r2, r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d114      	bne.n	80046fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046e4:	461a      	mov	r2, r3
 80046e6:	2101      	movs	r1, #1
 80046e8:	f002 fe02 	bl	80072f0 <USB_EP0_OutStart>
 80046ec:	e006      	b.n	80046fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	441a      	add	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	4619      	mov	r1, r3
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f005 f8c0 	bl	8009888 <HAL_PCD_DataOutStageCallback>
 8004708:	e046      	b.n	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	4a26      	ldr	r2, [pc, #152]	; (80047a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d124      	bne.n	800475c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004728:	461a      	mov	r2, r3
 800472a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472e:	6093      	str	r3, [r2, #8]
 8004730:	e032      	b.n	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004748:	461a      	mov	r2, r3
 800474a:	2320      	movs	r3, #32
 800474c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	4619      	mov	r1, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f005 f897 	bl	8009888 <HAL_PCD_DataOutStageCallback>
 800475a:	e01d      	b.n	8004798 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d114      	bne.n	800478c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	4613      	mov	r3, r2
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d108      	bne.n	800478c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004784:	461a      	mov	r2, r3
 8004786:	2100      	movs	r1, #0
 8004788:	f002 fdb2 	bl	80072f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	4619      	mov	r1, r3
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f005 f878 	bl	8009888 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3720      	adds	r7, #32
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	4f54300a 	.word	0x4f54300a
 80047a8:	4f54310a 	.word	0x4f54310a

080047ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	333c      	adds	r3, #60	; 0x3c
 80047c4:	3304      	adds	r3, #4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4a15      	ldr	r2, [pc, #84]	; (8004834 <PCD_EP_OutSetupPacket_int+0x88>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d90e      	bls.n	8004800 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f8:	461a      	mov	r2, r3
 80047fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f005 f82f 	bl	8009864 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4a0a      	ldr	r2, [pc, #40]	; (8004834 <PCD_EP_OutSetupPacket_int+0x88>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d90c      	bls.n	8004828 <PCD_EP_OutSetupPacket_int+0x7c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d108      	bne.n	8004828 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004820:	461a      	mov	r2, r3
 8004822:	2101      	movs	r1, #1
 8004824:	f002 fd64 	bl	80072f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	4f54300a 	.word	0x4f54300a

08004838 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	70fb      	strb	r3, [r7, #3]
 8004844:	4613      	mov	r3, r2
 8004846:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d107      	bne.n	8004866 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004856:	883b      	ldrh	r3, [r7, #0]
 8004858:	0419      	lsls	r1, r3, #16
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	430a      	orrs	r2, r1
 8004862:	629a      	str	r2, [r3, #40]	; 0x28
 8004864:	e028      	b.n	80048b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	0c1b      	lsrs	r3, r3, #16
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	4413      	add	r3, r2
 8004872:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004874:	2300      	movs	r3, #0
 8004876:	73fb      	strb	r3, [r7, #15]
 8004878:	e00d      	b.n	8004896 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	3340      	adds	r3, #64	; 0x40
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	0c1b      	lsrs	r3, r3, #16
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	4413      	add	r3, r2
 800488e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	3301      	adds	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
 8004896:	7bfa      	ldrb	r2, [r7, #15]
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	3b01      	subs	r3, #1
 800489c:	429a      	cmp	r2, r3
 800489e:	d3ec      	bcc.n	800487a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048a0:	883b      	ldrh	r3, [r7, #0]
 80048a2:	0418      	lsls	r0, r3, #16
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6819      	ldr	r1, [r3, #0]
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	4302      	orrs	r2, r0
 80048b0:	3340      	adds	r3, #64	; 0x40
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	460b      	mov	r3, r1
 80048d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	887a      	ldrh	r2, [r7, #2]
 80048d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e267      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d075      	beq.n	8004a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800491e:	4b88      	ldr	r3, [pc, #544]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b04      	cmp	r3, #4
 8004928:	d00c      	beq.n	8004944 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800492a:	4b85      	ldr	r3, [pc, #532]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004932:	2b08      	cmp	r3, #8
 8004934:	d112      	bne.n	800495c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004936:	4b82      	ldr	r3, [pc, #520]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004942:	d10b      	bne.n	800495c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004944:	4b7e      	ldr	r3, [pc, #504]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d05b      	beq.n	8004a08 <HAL_RCC_OscConfig+0x108>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d157      	bne.n	8004a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e242      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004964:	d106      	bne.n	8004974 <HAL_RCC_OscConfig+0x74>
 8004966:	4b76      	ldr	r3, [pc, #472]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a75      	ldr	r2, [pc, #468]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 800496c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	e01d      	b.n	80049b0 <HAL_RCC_OscConfig+0xb0>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800497c:	d10c      	bne.n	8004998 <HAL_RCC_OscConfig+0x98>
 800497e:	4b70      	ldr	r3, [pc, #448]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a6f      	ldr	r2, [pc, #444]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	4b6d      	ldr	r3, [pc, #436]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a6c      	ldr	r2, [pc, #432]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	e00b      	b.n	80049b0 <HAL_RCC_OscConfig+0xb0>
 8004998:	4b69      	ldr	r3, [pc, #420]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a68      	ldr	r2, [pc, #416]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 800499e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	4b66      	ldr	r3, [pc, #408]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a65      	ldr	r2, [pc, #404]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 80049aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d013      	beq.n	80049e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b8:	f7fd fe62 	bl	8002680 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049c0:	f7fd fe5e 	bl	8002680 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b64      	cmp	r3, #100	; 0x64
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e207      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d2:	4b5b      	ldr	r3, [pc, #364]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0f0      	beq.n	80049c0 <HAL_RCC_OscConfig+0xc0>
 80049de:	e014      	b.n	8004a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e0:	f7fd fe4e 	bl	8002680 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e8:	f7fd fe4a 	bl	8002680 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b64      	cmp	r3, #100	; 0x64
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e1f3      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049fa:	4b51      	ldr	r3, [pc, #324]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0xe8>
 8004a06:	e000      	b.n	8004a0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d063      	beq.n	8004ade <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a16:	4b4a      	ldr	r3, [pc, #296]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00b      	beq.n	8004a3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a22:	4b47      	ldr	r3, [pc, #284]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d11c      	bne.n	8004a68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a2e:	4b44      	ldr	r3, [pc, #272]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d116      	bne.n	8004a68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a3a:	4b41      	ldr	r3, [pc, #260]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d005      	beq.n	8004a52 <HAL_RCC_OscConfig+0x152>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d001      	beq.n	8004a52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e1c7      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a52:	4b3b      	ldr	r3, [pc, #236]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	4937      	ldr	r1, [pc, #220]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a66:	e03a      	b.n	8004ade <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d020      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a70:	4b34      	ldr	r3, [pc, #208]	; (8004b44 <HAL_RCC_OscConfig+0x244>)
 8004a72:	2201      	movs	r2, #1
 8004a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a76:	f7fd fe03 	bl	8002680 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a7e:	f7fd fdff 	bl	8002680 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e1a8      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a90:	4b2b      	ldr	r3, [pc, #172]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0f0      	beq.n	8004a7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9c:	4b28      	ldr	r3, [pc, #160]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	4925      	ldr	r1, [pc, #148]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	600b      	str	r3, [r1, #0]
 8004ab0:	e015      	b.n	8004ade <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ab2:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <HAL_RCC_OscConfig+0x244>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab8:	f7fd fde2 	bl	8002680 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ac0:	f7fd fdde 	bl	8002680 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e187      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad2:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f0      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d036      	beq.n	8004b58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d016      	beq.n	8004b20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004af2:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <HAL_RCC_OscConfig+0x248>)
 8004af4:	2201      	movs	r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af8:	f7fd fdc2 	bl	8002680 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b00:	f7fd fdbe 	bl	8002680 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e167      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <HAL_RCC_OscConfig+0x240>)
 8004b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCC_OscConfig+0x200>
 8004b1e:	e01b      	b.n	8004b58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b20:	4b09      	ldr	r3, [pc, #36]	; (8004b48 <HAL_RCC_OscConfig+0x248>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b26:	f7fd fdab 	bl	8002680 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b2c:	e00e      	b.n	8004b4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b2e:	f7fd fda7 	bl	8002680 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d907      	bls.n	8004b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e150      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
 8004b40:	40023800 	.word	0x40023800
 8004b44:	42470000 	.word	0x42470000
 8004b48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b4c:	4b88      	ldr	r3, [pc, #544]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1ea      	bne.n	8004b2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 8097 	beq.w	8004c94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b66:	2300      	movs	r3, #0
 8004b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b6a:	4b81      	ldr	r3, [pc, #516]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10f      	bne.n	8004b96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	4b7d      	ldr	r3, [pc, #500]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	4a7c      	ldr	r2, [pc, #496]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b84:	6413      	str	r3, [r2, #64]	; 0x40
 8004b86:	4b7a      	ldr	r3, [pc, #488]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8e:	60bb      	str	r3, [r7, #8]
 8004b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b92:	2301      	movs	r3, #1
 8004b94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b96:	4b77      	ldr	r3, [pc, #476]	; (8004d74 <HAL_RCC_OscConfig+0x474>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d118      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ba2:	4b74      	ldr	r3, [pc, #464]	; (8004d74 <HAL_RCC_OscConfig+0x474>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a73      	ldr	r2, [pc, #460]	; (8004d74 <HAL_RCC_OscConfig+0x474>)
 8004ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bae:	f7fd fd67 	bl	8002680 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb6:	f7fd fd63 	bl	8002680 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e10c      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc8:	4b6a      	ldr	r3, [pc, #424]	; (8004d74 <HAL_RCC_OscConfig+0x474>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f0      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d106      	bne.n	8004bea <HAL_RCC_OscConfig+0x2ea>
 8004bdc:	4b64      	ldr	r3, [pc, #400]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	4a63      	ldr	r2, [pc, #396]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	6713      	str	r3, [r2, #112]	; 0x70
 8004be8:	e01c      	b.n	8004c24 <HAL_RCC_OscConfig+0x324>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b05      	cmp	r3, #5
 8004bf0:	d10c      	bne.n	8004c0c <HAL_RCC_OscConfig+0x30c>
 8004bf2:	4b5f      	ldr	r3, [pc, #380]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	4a5e      	ldr	r2, [pc, #376]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004bf8:	f043 0304 	orr.w	r3, r3, #4
 8004bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bfe:	4b5c      	ldr	r3, [pc, #368]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	4a5b      	ldr	r2, [pc, #364]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	6713      	str	r3, [r2, #112]	; 0x70
 8004c0a:	e00b      	b.n	8004c24 <HAL_RCC_OscConfig+0x324>
 8004c0c:	4b58      	ldr	r3, [pc, #352]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c10:	4a57      	ldr	r2, [pc, #348]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004c12:	f023 0301 	bic.w	r3, r3, #1
 8004c16:	6713      	str	r3, [r2, #112]	; 0x70
 8004c18:	4b55      	ldr	r3, [pc, #340]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1c:	4a54      	ldr	r2, [pc, #336]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004c1e:	f023 0304 	bic.w	r3, r3, #4
 8004c22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d015      	beq.n	8004c58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fd fd28 	bl	8002680 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c34:	f7fd fd24 	bl	8002680 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e0cb      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4a:	4b49      	ldr	r3, [pc, #292]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0ee      	beq.n	8004c34 <HAL_RCC_OscConfig+0x334>
 8004c56:	e014      	b.n	8004c82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c58:	f7fd fd12 	bl	8002680 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c5e:	e00a      	b.n	8004c76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c60:	f7fd fd0e 	bl	8002680 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e0b5      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c76:	4b3e      	ldr	r3, [pc, #248]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1ee      	bne.n	8004c60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c82:	7dfb      	ldrb	r3, [r7, #23]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d105      	bne.n	8004c94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c88:	4b39      	ldr	r3, [pc, #228]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	4a38      	ldr	r2, [pc, #224]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80a1 	beq.w	8004de0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c9e:	4b34      	ldr	r3, [pc, #208]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 030c 	and.w	r3, r3, #12
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d05c      	beq.n	8004d64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d141      	bne.n	8004d36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb2:	4b31      	ldr	r3, [pc, #196]	; (8004d78 <HAL_RCC_OscConfig+0x478>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb8:	f7fd fce2 	bl	8002680 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc0:	f7fd fcde 	bl	8002680 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e087      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd2:	4b27      	ldr	r3, [pc, #156]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69da      	ldr	r2, [r3, #28]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	019b      	lsls	r3, r3, #6
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	085b      	lsrs	r3, r3, #1
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	041b      	lsls	r3, r3, #16
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	061b      	lsls	r3, r3, #24
 8004d02:	491b      	ldr	r1, [pc, #108]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d08:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <HAL_RCC_OscConfig+0x478>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0e:	f7fd fcb7 	bl	8002680 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d16:	f7fd fcb3 	bl	8002680 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e05c      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d28:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCC_OscConfig+0x416>
 8004d34:	e054      	b.n	8004de0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d36:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <HAL_RCC_OscConfig+0x478>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3c:	f7fd fca0 	bl	8002680 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fd fc9c 	bl	8002680 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e045      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d56:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <HAL_RCC_OscConfig+0x470>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x444>
 8004d62:	e03d      	b.n	8004de0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d107      	bne.n	8004d7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e038      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40007000 	.word	0x40007000
 8004d78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d7c:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <HAL_RCC_OscConfig+0x4ec>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d028      	beq.n	8004ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d121      	bne.n	8004ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d11a      	bne.n	8004ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dac:	4013      	ands	r3, r2
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004db2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d111      	bne.n	8004ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d107      	bne.n	8004ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	40023800 	.word	0x40023800

08004df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e0cc      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e04:	4b68      	ldr	r3, [pc, #416]	; (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d90c      	bls.n	8004e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e12:	4b65      	ldr	r3, [pc, #404]	; (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1a:	4b63      	ldr	r3, [pc, #396]	; (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0b8      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d020      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e44:	4b59      	ldr	r3, [pc, #356]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4a58      	ldr	r2, [pc, #352]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e5c:	4b53      	ldr	r3, [pc, #332]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4a52      	ldr	r2, [pc, #328]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e68:	4b50      	ldr	r3, [pc, #320]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	494d      	ldr	r1, [pc, #308]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d044      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d107      	bne.n	8004e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8e:	4b47      	ldr	r3, [pc, #284]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d119      	bne.n	8004ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e07f      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d003      	beq.n	8004eae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d107      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eae:	4b3f      	ldr	r3, [pc, #252]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e06f      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebe:	4b3b      	ldr	r3, [pc, #236]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e067      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ece:	4b37      	ldr	r3, [pc, #220]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f023 0203 	bic.w	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4934      	ldr	r1, [pc, #208]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ee0:	f7fd fbce 	bl	8002680 <HAL_GetTick>
 8004ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee8:	f7fd fbca 	bl	8002680 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e04f      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	4b2b      	ldr	r3, [pc, #172]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 020c 	and.w	r2, r3, #12
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d1eb      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f10:	4b25      	ldr	r3, [pc, #148]	; (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d20c      	bcs.n	8004f38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1e:	4b22      	ldr	r3, [pc, #136]	; (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f26:	4b20      	ldr	r3, [pc, #128]	; (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e032      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d008      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f44:	4b19      	ldr	r3, [pc, #100]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	4916      	ldr	r1, [pc, #88]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f62:	4b12      	ldr	r3, [pc, #72]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	490e      	ldr	r1, [pc, #56]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f76:	f000 f821 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	490a      	ldr	r1, [pc, #40]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	5ccb      	ldrb	r3, [r1, r3]
 8004f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8e:	4a09      	ldr	r2, [pc, #36]	; (8004fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f92:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fd fb2e 	bl	80025f8 <HAL_InitTick>

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40023c00 	.word	0x40023c00
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	0800eaa0 	.word	0x0800eaa0
 8004fb4:	20000040 	.word	0x20000040
 8004fb8:	20000044 	.word	0x20000044

08004fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc0:	b094      	sub	sp, #80	; 0x50
 8004fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc8:	2300      	movs	r3, #0
 8004fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fcc:	2300      	movs	r3, #0
 8004fce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fd4:	4b79      	ldr	r3, [pc, #484]	; (80051bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 030c 	and.w	r3, r3, #12
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d00d      	beq.n	8004ffc <HAL_RCC_GetSysClockFreq+0x40>
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	f200 80e1 	bhi.w	80051a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d003      	beq.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fee:	e0db      	b.n	80051a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ff0:	4b73      	ldr	r3, [pc, #460]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ff2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ff4:	e0db      	b.n	80051ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ff6:	4b73      	ldr	r3, [pc, #460]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ff8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ffa:	e0d8      	b.n	80051ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ffc:	4b6f      	ldr	r3, [pc, #444]	; (80051bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005004:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005006:	4b6d      	ldr	r3, [pc, #436]	; (80051bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d063      	beq.n	80050da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005012:	4b6a      	ldr	r3, [pc, #424]	; (80051bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	099b      	lsrs	r3, r3, #6
 8005018:	2200      	movs	r2, #0
 800501a:	63bb      	str	r3, [r7, #56]	; 0x38
 800501c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800501e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005024:	633b      	str	r3, [r7, #48]	; 0x30
 8005026:	2300      	movs	r3, #0
 8005028:	637b      	str	r3, [r7, #52]	; 0x34
 800502a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800502e:	4622      	mov	r2, r4
 8005030:	462b      	mov	r3, r5
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f04f 0100 	mov.w	r1, #0
 800503a:	0159      	lsls	r1, r3, #5
 800503c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005040:	0150      	lsls	r0, r2, #5
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4621      	mov	r1, r4
 8005048:	1a51      	subs	r1, r2, r1
 800504a:	6139      	str	r1, [r7, #16]
 800504c:	4629      	mov	r1, r5
 800504e:	eb63 0301 	sbc.w	r3, r3, r1
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005060:	4659      	mov	r1, fp
 8005062:	018b      	lsls	r3, r1, #6
 8005064:	4651      	mov	r1, sl
 8005066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800506a:	4651      	mov	r1, sl
 800506c:	018a      	lsls	r2, r1, #6
 800506e:	4651      	mov	r1, sl
 8005070:	ebb2 0801 	subs.w	r8, r2, r1
 8005074:	4659      	mov	r1, fp
 8005076:	eb63 0901 	sbc.w	r9, r3, r1
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800508a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800508e:	4690      	mov	r8, r2
 8005090:	4699      	mov	r9, r3
 8005092:	4623      	mov	r3, r4
 8005094:	eb18 0303 	adds.w	r3, r8, r3
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	462b      	mov	r3, r5
 800509c:	eb49 0303 	adc.w	r3, r9, r3
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	f04f 0300 	mov.w	r3, #0
 80050aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050ae:	4629      	mov	r1, r5
 80050b0:	024b      	lsls	r3, r1, #9
 80050b2:	4621      	mov	r1, r4
 80050b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050b8:	4621      	mov	r1, r4
 80050ba:	024a      	lsls	r2, r1, #9
 80050bc:	4610      	mov	r0, r2
 80050be:	4619      	mov	r1, r3
 80050c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c2:	2200      	movs	r2, #0
 80050c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050cc:	f7fb fdec 	bl	8000ca8 <__aeabi_uldivmod>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4613      	mov	r3, r2
 80050d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d8:	e058      	b.n	800518c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050da:	4b38      	ldr	r3, [pc, #224]	; (80051bc <HAL_RCC_GetSysClockFreq+0x200>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	099b      	lsrs	r3, r3, #6
 80050e0:	2200      	movs	r2, #0
 80050e2:	4618      	mov	r0, r3
 80050e4:	4611      	mov	r1, r2
 80050e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050ea:	623b      	str	r3, [r7, #32]
 80050ec:	2300      	movs	r3, #0
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
 80050f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050f4:	4642      	mov	r2, r8
 80050f6:	464b      	mov	r3, r9
 80050f8:	f04f 0000 	mov.w	r0, #0
 80050fc:	f04f 0100 	mov.w	r1, #0
 8005100:	0159      	lsls	r1, r3, #5
 8005102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005106:	0150      	lsls	r0, r2, #5
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4641      	mov	r1, r8
 800510e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005112:	4649      	mov	r1, r9
 8005114:	eb63 0b01 	sbc.w	fp, r3, r1
 8005118:	f04f 0200 	mov.w	r2, #0
 800511c:	f04f 0300 	mov.w	r3, #0
 8005120:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005124:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005128:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800512c:	ebb2 040a 	subs.w	r4, r2, sl
 8005130:	eb63 050b 	sbc.w	r5, r3, fp
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	00eb      	lsls	r3, r5, #3
 800513e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005142:	00e2      	lsls	r2, r4, #3
 8005144:	4614      	mov	r4, r2
 8005146:	461d      	mov	r5, r3
 8005148:	4643      	mov	r3, r8
 800514a:	18e3      	adds	r3, r4, r3
 800514c:	603b      	str	r3, [r7, #0]
 800514e:	464b      	mov	r3, r9
 8005150:	eb45 0303 	adc.w	r3, r5, r3
 8005154:	607b      	str	r3, [r7, #4]
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005162:	4629      	mov	r1, r5
 8005164:	028b      	lsls	r3, r1, #10
 8005166:	4621      	mov	r1, r4
 8005168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800516c:	4621      	mov	r1, r4
 800516e:	028a      	lsls	r2, r1, #10
 8005170:	4610      	mov	r0, r2
 8005172:	4619      	mov	r1, r3
 8005174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005176:	2200      	movs	r2, #0
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	61fa      	str	r2, [r7, #28]
 800517c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005180:	f7fb fd92 	bl	8000ca8 <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4613      	mov	r3, r2
 800518a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <HAL_RCC_GetSysClockFreq+0x200>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	0c1b      	lsrs	r3, r3, #16
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	3301      	adds	r3, #1
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800519c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800519e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051a6:	e002      	b.n	80051ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80051aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3750      	adds	r7, #80	; 0x50
 80051b4:	46bd      	mov	sp, r7
 80051b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ba:	bf00      	nop
 80051bc:	40023800 	.word	0x40023800
 80051c0:	00f42400 	.word	0x00f42400
 80051c4:	007a1200 	.word	0x007a1200

080051c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051cc:	4b03      	ldr	r3, [pc, #12]	; (80051dc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ce:	681b      	ldr	r3, [r3, #0]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20000040 	.word	0x20000040

080051e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e041      	b.n	8005276 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fd f806 	bl	8002218 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f000 f9b8 	bl	8005594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d109      	bne.n	80052a4 <HAL_TIM_PWM_Start+0x24>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	bf14      	ite	ne
 800529c:	2301      	movne	r3, #1
 800529e:	2300      	moveq	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	e022      	b.n	80052ea <HAL_TIM_PWM_Start+0x6a>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d109      	bne.n	80052be <HAL_TIM_PWM_Start+0x3e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	bf14      	ite	ne
 80052b6:	2301      	movne	r3, #1
 80052b8:	2300      	moveq	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	e015      	b.n	80052ea <HAL_TIM_PWM_Start+0x6a>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d109      	bne.n	80052d8 <HAL_TIM_PWM_Start+0x58>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	bf14      	ite	ne
 80052d0:	2301      	movne	r3, #1
 80052d2:	2300      	moveq	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	e008      	b.n	80052ea <HAL_TIM_PWM_Start+0x6a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	bf14      	ite	ne
 80052e4:	2301      	movne	r3, #1
 80052e6:	2300      	moveq	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e07c      	b.n	80053ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d104      	bne.n	8005302 <HAL_TIM_PWM_Start+0x82>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005300:	e013      	b.n	800532a <HAL_TIM_PWM_Start+0xaa>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b04      	cmp	r3, #4
 8005306:	d104      	bne.n	8005312 <HAL_TIM_PWM_Start+0x92>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005310:	e00b      	b.n	800532a <HAL_TIM_PWM_Start+0xaa>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b08      	cmp	r3, #8
 8005316:	d104      	bne.n	8005322 <HAL_TIM_PWM_Start+0xa2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005320:	e003      	b.n	800532a <HAL_TIM_PWM_Start+0xaa>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2201      	movs	r2, #1
 8005330:	6839      	ldr	r1, [r7, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fb7e 	bl	8005a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a2d      	ldr	r2, [pc, #180]	; (80053f4 <HAL_TIM_PWM_Start+0x174>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d004      	beq.n	800534c <HAL_TIM_PWM_Start+0xcc>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a2c      	ldr	r2, [pc, #176]	; (80053f8 <HAL_TIM_PWM_Start+0x178>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d101      	bne.n	8005350 <HAL_TIM_PWM_Start+0xd0>
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <HAL_TIM_PWM_Start+0xd2>
 8005350:	2300      	movs	r3, #0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005364:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a22      	ldr	r2, [pc, #136]	; (80053f4 <HAL_TIM_PWM_Start+0x174>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d022      	beq.n	80053b6 <HAL_TIM_PWM_Start+0x136>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005378:	d01d      	beq.n	80053b6 <HAL_TIM_PWM_Start+0x136>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1f      	ldr	r2, [pc, #124]	; (80053fc <HAL_TIM_PWM_Start+0x17c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d018      	beq.n	80053b6 <HAL_TIM_PWM_Start+0x136>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1d      	ldr	r2, [pc, #116]	; (8005400 <HAL_TIM_PWM_Start+0x180>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d013      	beq.n	80053b6 <HAL_TIM_PWM_Start+0x136>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a1c      	ldr	r2, [pc, #112]	; (8005404 <HAL_TIM_PWM_Start+0x184>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00e      	beq.n	80053b6 <HAL_TIM_PWM_Start+0x136>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a16      	ldr	r2, [pc, #88]	; (80053f8 <HAL_TIM_PWM_Start+0x178>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d009      	beq.n	80053b6 <HAL_TIM_PWM_Start+0x136>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a18      	ldr	r2, [pc, #96]	; (8005408 <HAL_TIM_PWM_Start+0x188>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d004      	beq.n	80053b6 <HAL_TIM_PWM_Start+0x136>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a16      	ldr	r2, [pc, #88]	; (800540c <HAL_TIM_PWM_Start+0x18c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d111      	bne.n	80053da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b06      	cmp	r3, #6
 80053c6:	d010      	beq.n	80053ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d8:	e007      	b.n	80053ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0201 	orr.w	r2, r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40010000 	.word	0x40010000
 80053f8:	40010400 	.word	0x40010400
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800
 8005404:	40000c00 	.word	0x40000c00
 8005408:	40014000 	.word	0x40014000
 800540c:	40001800 	.word	0x40001800

08005410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800542a:	2302      	movs	r3, #2
 800542c:	e0ae      	b.n	800558c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b0c      	cmp	r3, #12
 800543a:	f200 809f 	bhi.w	800557c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800543e:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	08005479 	.word	0x08005479
 8005448:	0800557d 	.word	0x0800557d
 800544c:	0800557d 	.word	0x0800557d
 8005450:	0800557d 	.word	0x0800557d
 8005454:	080054b9 	.word	0x080054b9
 8005458:	0800557d 	.word	0x0800557d
 800545c:	0800557d 	.word	0x0800557d
 8005460:	0800557d 	.word	0x0800557d
 8005464:	080054fb 	.word	0x080054fb
 8005468:	0800557d 	.word	0x0800557d
 800546c:	0800557d 	.word	0x0800557d
 8005470:	0800557d 	.word	0x0800557d
 8005474:	0800553b 	.word	0x0800553b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f928 	bl	80056d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0208 	orr.w	r2, r2, #8
 8005492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0204 	bic.w	r2, r2, #4
 80054a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6999      	ldr	r1, [r3, #24]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	619a      	str	r2, [r3, #24]
      break;
 80054b6:	e064      	b.n	8005582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 f978 	bl	80057b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6999      	ldr	r1, [r3, #24]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	021a      	lsls	r2, r3, #8
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	619a      	str	r2, [r3, #24]
      break;
 80054f8:	e043      	b.n	8005582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	4618      	mov	r0, r3
 8005502:	f000 f9cd 	bl	80058a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0208 	orr.w	r2, r2, #8
 8005514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0204 	bic.w	r2, r2, #4
 8005524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69d9      	ldr	r1, [r3, #28]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	61da      	str	r2, [r3, #28]
      break;
 8005538:	e023      	b.n	8005582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fa21 	bl	8005988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69da      	ldr	r2, [r3, #28]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69d9      	ldr	r1, [r3, #28]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	021a      	lsls	r2, r3, #8
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	61da      	str	r2, [r3, #28]
      break;
 800557a:	e002      	b.n	8005582 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	75fb      	strb	r3, [r7, #23]
      break;
 8005580:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800558a:	7dfb      	ldrb	r3, [r7, #23]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a40      	ldr	r2, [pc, #256]	; (80056a8 <TIM_Base_SetConfig+0x114>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d013      	beq.n	80055d4 <TIM_Base_SetConfig+0x40>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b2:	d00f      	beq.n	80055d4 <TIM_Base_SetConfig+0x40>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a3d      	ldr	r2, [pc, #244]	; (80056ac <TIM_Base_SetConfig+0x118>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d00b      	beq.n	80055d4 <TIM_Base_SetConfig+0x40>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a3c      	ldr	r2, [pc, #240]	; (80056b0 <TIM_Base_SetConfig+0x11c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d007      	beq.n	80055d4 <TIM_Base_SetConfig+0x40>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a3b      	ldr	r2, [pc, #236]	; (80056b4 <TIM_Base_SetConfig+0x120>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d003      	beq.n	80055d4 <TIM_Base_SetConfig+0x40>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a3a      	ldr	r2, [pc, #232]	; (80056b8 <TIM_Base_SetConfig+0x124>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d108      	bne.n	80055e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2f      	ldr	r2, [pc, #188]	; (80056a8 <TIM_Base_SetConfig+0x114>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d02b      	beq.n	8005646 <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f4:	d027      	beq.n	8005646 <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a2c      	ldr	r2, [pc, #176]	; (80056ac <TIM_Base_SetConfig+0x118>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d023      	beq.n	8005646 <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a2b      	ldr	r2, [pc, #172]	; (80056b0 <TIM_Base_SetConfig+0x11c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d01f      	beq.n	8005646 <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a2a      	ldr	r2, [pc, #168]	; (80056b4 <TIM_Base_SetConfig+0x120>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01b      	beq.n	8005646 <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a29      	ldr	r2, [pc, #164]	; (80056b8 <TIM_Base_SetConfig+0x124>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d017      	beq.n	8005646 <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a28      	ldr	r2, [pc, #160]	; (80056bc <TIM_Base_SetConfig+0x128>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d013      	beq.n	8005646 <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a27      	ldr	r2, [pc, #156]	; (80056c0 <TIM_Base_SetConfig+0x12c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00f      	beq.n	8005646 <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a26      	ldr	r2, [pc, #152]	; (80056c4 <TIM_Base_SetConfig+0x130>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00b      	beq.n	8005646 <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a25      	ldr	r2, [pc, #148]	; (80056c8 <TIM_Base_SetConfig+0x134>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d007      	beq.n	8005646 <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a24      	ldr	r2, [pc, #144]	; (80056cc <TIM_Base_SetConfig+0x138>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d003      	beq.n	8005646 <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a23      	ldr	r2, [pc, #140]	; (80056d0 <TIM_Base_SetConfig+0x13c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d108      	bne.n	8005658 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800564c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a0a      	ldr	r2, [pc, #40]	; (80056a8 <TIM_Base_SetConfig+0x114>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d003      	beq.n	800568c <TIM_Base_SetConfig+0xf8>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a0c      	ldr	r2, [pc, #48]	; (80056b8 <TIM_Base_SetConfig+0x124>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d103      	bne.n	8005694 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	615a      	str	r2, [r3, #20]
}
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40010000 	.word	0x40010000
 80056ac:	40000400 	.word	0x40000400
 80056b0:	40000800 	.word	0x40000800
 80056b4:	40000c00 	.word	0x40000c00
 80056b8:	40010400 	.word	0x40010400
 80056bc:	40014000 	.word	0x40014000
 80056c0:	40014400 	.word	0x40014400
 80056c4:	40014800 	.word	0x40014800
 80056c8:	40001800 	.word	0x40001800
 80056cc:	40001c00 	.word	0x40001c00
 80056d0:	40002000 	.word	0x40002000

080056d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f023 0201 	bic.w	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0303 	bic.w	r3, r3, #3
 800570a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 0302 	bic.w	r3, r3, #2
 800571c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a20      	ldr	r2, [pc, #128]	; (80057ac <TIM_OC1_SetConfig+0xd8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_OC1_SetConfig+0x64>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a1f      	ldr	r2, [pc, #124]	; (80057b0 <TIM_OC1_SetConfig+0xdc>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d10c      	bne.n	8005752 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0308 	bic.w	r3, r3, #8
 800573e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f023 0304 	bic.w	r3, r3, #4
 8005750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a15      	ldr	r2, [pc, #84]	; (80057ac <TIM_OC1_SetConfig+0xd8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d003      	beq.n	8005762 <TIM_OC1_SetConfig+0x8e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a14      	ldr	r2, [pc, #80]	; (80057b0 <TIM_OC1_SetConfig+0xdc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d111      	bne.n	8005786 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	621a      	str	r2, [r3, #32]
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	40010000 	.word	0x40010000
 80057b0:	40010400 	.word	0x40010400

080057b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	f023 0210 	bic.w	r2, r3, #16
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f023 0320 	bic.w	r3, r3, #32
 80057fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a22      	ldr	r2, [pc, #136]	; (8005898 <TIM_OC2_SetConfig+0xe4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d003      	beq.n	800581c <TIM_OC2_SetConfig+0x68>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a21      	ldr	r2, [pc, #132]	; (800589c <TIM_OC2_SetConfig+0xe8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d10d      	bne.n	8005838 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	011b      	lsls	r3, r3, #4
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005836:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a17      	ldr	r2, [pc, #92]	; (8005898 <TIM_OC2_SetConfig+0xe4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_OC2_SetConfig+0x94>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a16      	ldr	r2, [pc, #88]	; (800589c <TIM_OC2_SetConfig+0xe8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d113      	bne.n	8005870 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800584e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005856:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40010000 	.word	0x40010000
 800589c:	40010400 	.word	0x40010400

080058a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0303 	bic.w	r3, r3, #3
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a21      	ldr	r2, [pc, #132]	; (8005980 <TIM_OC3_SetConfig+0xe0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_OC3_SetConfig+0x66>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a20      	ldr	r2, [pc, #128]	; (8005984 <TIM_OC3_SetConfig+0xe4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d10d      	bne.n	8005922 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800590c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a16      	ldr	r2, [pc, #88]	; (8005980 <TIM_OC3_SetConfig+0xe0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d003      	beq.n	8005932 <TIM_OC3_SetConfig+0x92>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a15      	ldr	r2, [pc, #84]	; (8005984 <TIM_OC3_SetConfig+0xe4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d113      	bne.n	800595a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	621a      	str	r2, [r3, #32]
}
 8005974:	bf00      	nop
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	40010000 	.word	0x40010000
 8005984:	40010400 	.word	0x40010400

08005988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	031b      	lsls	r3, r3, #12
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a12      	ldr	r2, [pc, #72]	; (8005a2c <TIM_OC4_SetConfig+0xa4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_OC4_SetConfig+0x68>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a11      	ldr	r2, [pc, #68]	; (8005a30 <TIM_OC4_SetConfig+0xa8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d109      	bne.n	8005a04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	019b      	lsls	r3, r3, #6
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	621a      	str	r2, [r3, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40010400 	.word	0x40010400

08005a34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	2201      	movs	r2, #1
 8005a48:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a1a      	ldr	r2, [r3, #32]
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	43db      	mvns	r3, r3
 8005a56:	401a      	ands	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a1a      	ldr	r2, [r3, #32]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 031f 	and.w	r3, r3, #31
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	621a      	str	r2, [r3, #32]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e05a      	b.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a21      	ldr	r2, [pc, #132]	; (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d022      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae4:	d01d      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1d      	ldr	r2, [pc, #116]	; (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d018      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1b      	ldr	r2, [pc, #108]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1a      	ldr	r2, [pc, #104]	; (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00e      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a18      	ldr	r2, [pc, #96]	; (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d009      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a17      	ldr	r2, [pc, #92]	; (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d004      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d10c      	bne.n	8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40010000 	.word	0x40010000
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800
 8005b68:	40000c00 	.word	0x40000c00
 8005b6c:	40010400 	.word	0x40010400
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40001800 	.word	0x40001800

08005b78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b78:	b084      	sub	sp, #16
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	f107 001c 	add.w	r0, r7, #28
 8005b86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d122      	bne.n	8005bd6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d105      	bne.n	8005bca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f001 fbee 	bl	80073ac <USB_CoreReset>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	73fb      	strb	r3, [r7, #15]
 8005bd4:	e01a      	b.n	8005c0c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f001 fbe2 	bl	80073ac <USB_CoreReset>
 8005be8:	4603      	mov	r3, r0
 8005bea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d106      	bne.n	8005c00 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	639a      	str	r2, [r3, #56]	; 0x38
 8005bfe:	e005      	b.n	8005c0c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d10b      	bne.n	8005c2a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f043 0206 	orr.w	r2, r3, #6
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f043 0220 	orr.w	r2, r3, #32
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c36:	b004      	add	sp, #16
 8005c38:	4770      	bx	lr
	...

08005c3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	4613      	mov	r3, r2
 8005c48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005c4a:	79fb      	ldrb	r3, [r7, #7]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d165      	bne.n	8005d1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4a41      	ldr	r2, [pc, #260]	; (8005d58 <USB_SetTurnaroundTime+0x11c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d906      	bls.n	8005c66 <USB_SetTurnaroundTime+0x2a>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4a40      	ldr	r2, [pc, #256]	; (8005d5c <USB_SetTurnaroundTime+0x120>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d202      	bcs.n	8005c66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c60:	230f      	movs	r3, #15
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e062      	b.n	8005d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	4a3c      	ldr	r2, [pc, #240]	; (8005d5c <USB_SetTurnaroundTime+0x120>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d306      	bcc.n	8005c7c <USB_SetTurnaroundTime+0x40>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	4a3b      	ldr	r2, [pc, #236]	; (8005d60 <USB_SetTurnaroundTime+0x124>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d202      	bcs.n	8005c7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c76:	230e      	movs	r3, #14
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	e057      	b.n	8005d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4a38      	ldr	r2, [pc, #224]	; (8005d60 <USB_SetTurnaroundTime+0x124>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d306      	bcc.n	8005c92 <USB_SetTurnaroundTime+0x56>
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4a37      	ldr	r2, [pc, #220]	; (8005d64 <USB_SetTurnaroundTime+0x128>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d202      	bcs.n	8005c92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c8c:	230d      	movs	r3, #13
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	e04c      	b.n	8005d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4a33      	ldr	r2, [pc, #204]	; (8005d64 <USB_SetTurnaroundTime+0x128>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d306      	bcc.n	8005ca8 <USB_SetTurnaroundTime+0x6c>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	4a32      	ldr	r2, [pc, #200]	; (8005d68 <USB_SetTurnaroundTime+0x12c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d802      	bhi.n	8005ca8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ca2:	230c      	movs	r3, #12
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	e041      	b.n	8005d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4a2f      	ldr	r2, [pc, #188]	; (8005d68 <USB_SetTurnaroundTime+0x12c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d906      	bls.n	8005cbe <USB_SetTurnaroundTime+0x82>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4a2e      	ldr	r2, [pc, #184]	; (8005d6c <USB_SetTurnaroundTime+0x130>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d802      	bhi.n	8005cbe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005cb8:	230b      	movs	r3, #11
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	e036      	b.n	8005d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	4a2a      	ldr	r2, [pc, #168]	; (8005d6c <USB_SetTurnaroundTime+0x130>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d906      	bls.n	8005cd4 <USB_SetTurnaroundTime+0x98>
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	4a29      	ldr	r2, [pc, #164]	; (8005d70 <USB_SetTurnaroundTime+0x134>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d802      	bhi.n	8005cd4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005cce:	230a      	movs	r3, #10
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	e02b      	b.n	8005d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4a26      	ldr	r2, [pc, #152]	; (8005d70 <USB_SetTurnaroundTime+0x134>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d906      	bls.n	8005cea <USB_SetTurnaroundTime+0xae>
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4a25      	ldr	r2, [pc, #148]	; (8005d74 <USB_SetTurnaroundTime+0x138>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d202      	bcs.n	8005cea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ce4:	2309      	movs	r3, #9
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	e020      	b.n	8005d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	4a21      	ldr	r2, [pc, #132]	; (8005d74 <USB_SetTurnaroundTime+0x138>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d306      	bcc.n	8005d00 <USB_SetTurnaroundTime+0xc4>
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	4a20      	ldr	r2, [pc, #128]	; (8005d78 <USB_SetTurnaroundTime+0x13c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d802      	bhi.n	8005d00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005cfa:	2308      	movs	r3, #8
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	e015      	b.n	8005d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4a1d      	ldr	r2, [pc, #116]	; (8005d78 <USB_SetTurnaroundTime+0x13c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d906      	bls.n	8005d16 <USB_SetTurnaroundTime+0xda>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4a1c      	ldr	r2, [pc, #112]	; (8005d7c <USB_SetTurnaroundTime+0x140>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d202      	bcs.n	8005d16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005d10:	2307      	movs	r3, #7
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e00a      	b.n	8005d2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005d16:	2306      	movs	r3, #6
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	e007      	b.n	8005d2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d102      	bne.n	8005d28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005d22:	2309      	movs	r3, #9
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	e001      	b.n	8005d2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005d28:	2309      	movs	r3, #9
 8005d2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	029b      	lsls	r3, r3, #10
 8005d40:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005d44:	431a      	orrs	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	371c      	adds	r7, #28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	00d8acbf 	.word	0x00d8acbf
 8005d5c:	00e4e1c0 	.word	0x00e4e1c0
 8005d60:	00f42400 	.word	0x00f42400
 8005d64:	01067380 	.word	0x01067380
 8005d68:	011a499f 	.word	0x011a499f
 8005d6c:	01312cff 	.word	0x01312cff
 8005d70:	014ca43f 	.word	0x014ca43f
 8005d74:	016e3600 	.word	0x016e3600
 8005d78:	01a6ab1f 	.word	0x01a6ab1f
 8005d7c:	01e84800 	.word	0x01e84800

08005d80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f043 0201 	orr.w	r2, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f023 0201 	bic.w	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005de0:	78fb      	ldrb	r3, [r7, #3]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d115      	bne.n	8005e12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005df2:	2001      	movs	r0, #1
 8005df4:	f7fc fc50 	bl	8002698 <HAL_Delay>
      ms++;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f001 fa45 	bl	800728e <USB_GetMode>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d01e      	beq.n	8005e48 <USB_SetCurrentMode+0x84>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b31      	cmp	r3, #49	; 0x31
 8005e0e:	d9f0      	bls.n	8005df2 <USB_SetCurrentMode+0x2e>
 8005e10:	e01a      	b.n	8005e48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e12:	78fb      	ldrb	r3, [r7, #3]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d115      	bne.n	8005e44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e24:	2001      	movs	r0, #1
 8005e26:	f7fc fc37 	bl	8002698 <HAL_Delay>
      ms++;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f001 fa2c 	bl	800728e <USB_GetMode>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <USB_SetCurrentMode+0x84>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b31      	cmp	r3, #49	; 0x31
 8005e40:	d9f0      	bls.n	8005e24 <USB_SetCurrentMode+0x60>
 8005e42:	e001      	b.n	8005e48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e005      	b.n	8005e54 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b32      	cmp	r3, #50	; 0x32
 8005e4c:	d101      	bne.n	8005e52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b086      	sub	sp, #24
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e76:	2300      	movs	r3, #0
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	e009      	b.n	8005e90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	3340      	adds	r3, #64	; 0x40
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	2200      	movs	r2, #0
 8005e88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	613b      	str	r3, [r7, #16]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	2b0e      	cmp	r3, #14
 8005e94:	d9f2      	bls.n	8005e7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d11c      	bne.n	8005ed6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eaa:	f043 0302 	orr.w	r3, r3, #2
 8005eae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	639a      	str	r2, [r3, #56]	; 0x38
 8005ed4:	e00b      	b.n	8005eee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eda:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f00:	4619      	mov	r1, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f08:	461a      	mov	r2, r3
 8005f0a:	680b      	ldr	r3, [r1, #0]
 8005f0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d10c      	bne.n	8005f2e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d104      	bne.n	8005f24 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f965 	bl	80061ec <USB_SetDevSpeed>
 8005f22:	e008      	b.n	8005f36 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f24:	2101      	movs	r1, #1
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f960 	bl	80061ec <USB_SetDevSpeed>
 8005f2c:	e003      	b.n	8005f36 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f2e:	2103      	movs	r1, #3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f95b 	bl	80061ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f36:	2110      	movs	r1, #16
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f8f3 	bl	8006124 <USB_FlushTxFifo>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f91f 	bl	800618c <USB_FlushRxFifo>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5e:	461a      	mov	r2, r3
 8005f60:	2300      	movs	r3, #0
 8005f62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f76:	461a      	mov	r2, r3
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	e043      	b.n	800600a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f98:	d118      	bne.n	8005fcc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fac:	461a      	mov	r2, r3
 8005fae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	e013      	b.n	8005fde <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	e008      	b.n	8005fde <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd8:	461a      	mov	r2, r3
 8005fda:	2300      	movs	r3, #0
 8005fdc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fea:	461a      	mov	r2, r3
 8005fec:	2300      	movs	r3, #0
 8005fee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006002:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	3301      	adds	r3, #1
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	429a      	cmp	r2, r3
 8006010:	d3b7      	bcc.n	8005f82 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006012:	2300      	movs	r3, #0
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	e043      	b.n	80060a0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800602a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800602e:	d118      	bne.n	8006062 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10a      	bne.n	800604c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006042:	461a      	mov	r2, r3
 8006044:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	e013      	b.n	8006074 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006058:	461a      	mov	r2, r3
 800605a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	e008      	b.n	8006074 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606e:	461a      	mov	r2, r3
 8006070:	2300      	movs	r3, #0
 8006072:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006080:	461a      	mov	r2, r3
 8006082:	2300      	movs	r3, #0
 8006084:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006092:	461a      	mov	r2, r3
 8006094:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006098:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	3301      	adds	r3, #1
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d3b7      	bcc.n	8006018 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d105      	bne.n	80060dc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	f043 0210 	orr.w	r2, r3, #16
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699a      	ldr	r2, [r3, #24]
 80060e0:	4b0f      	ldr	r3, [pc, #60]	; (8006120 <USB_DevInit+0x2c4>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d005      	beq.n	80060fa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f043 0208 	orr.w	r2, r3, #8
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80060fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d107      	bne.n	8006110 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006108:	f043 0304 	orr.w	r3, r3, #4
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006110:	7dfb      	ldrb	r3, [r7, #23]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800611c:	b004      	add	sp, #16
 800611e:	4770      	bx	lr
 8006120:	803c3800 	.word	0x803c3800

08006124 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3301      	adds	r3, #1
 8006136:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4a13      	ldr	r2, [pc, #76]	; (8006188 <USB_FlushTxFifo+0x64>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d901      	bls.n	8006144 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e01b      	b.n	800617c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	daf2      	bge.n	8006132 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	019b      	lsls	r3, r3, #6
 8006154:	f043 0220 	orr.w	r2, r3, #32
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3301      	adds	r3, #1
 8006160:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4a08      	ldr	r2, [pc, #32]	; (8006188 <USB_FlushTxFifo+0x64>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d901      	bls.n	800616e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e006      	b.n	800617c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b20      	cmp	r3, #32
 8006178:	d0f0      	beq.n	800615c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	00030d40 	.word	0x00030d40

0800618c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3301      	adds	r3, #1
 800619c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4a11      	ldr	r2, [pc, #68]	; (80061e8 <USB_FlushRxFifo+0x5c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d901      	bls.n	80061aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e018      	b.n	80061dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	daf2      	bge.n	8006198 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2210      	movs	r2, #16
 80061ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3301      	adds	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4a08      	ldr	r2, [pc, #32]	; (80061e8 <USB_FlushRxFifo+0x5c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d901      	bls.n	80061ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e006      	b.n	80061dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f003 0310 	and.w	r3, r3, #16
 80061d6:	2b10      	cmp	r3, #16
 80061d8:	d0f0      	beq.n	80061bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	00030d40 	.word	0x00030d40

080061ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	78fb      	ldrb	r3, [r7, #3]
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800620c:	4313      	orrs	r3, r2
 800620e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800621e:	b480      	push	{r7}
 8006220:	b087      	sub	sp, #28
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 0306 	and.w	r3, r3, #6
 8006236:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d102      	bne.n	8006244 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800623e:	2300      	movs	r3, #0
 8006240:	75fb      	strb	r3, [r7, #23]
 8006242:	e00a      	b.n	800625a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d002      	beq.n	8006250 <USB_GetDevSpeed+0x32>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b06      	cmp	r3, #6
 800624e:	d102      	bne.n	8006256 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006250:	2302      	movs	r3, #2
 8006252:	75fb      	strb	r3, [r7, #23]
 8006254:	e001      	b.n	800625a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006256:	230f      	movs	r3, #15
 8006258:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800625a:	7dfb      	ldrb	r3, [r7, #23]
}
 800625c:	4618      	mov	r0, r3
 800625e:	371c      	adds	r7, #28
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	785b      	ldrb	r3, [r3, #1]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d13a      	bne.n	80062fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628a:	69da      	ldr	r2, [r3, #28]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	2101      	movs	r1, #1
 8006296:	fa01 f303 	lsl.w	r3, r1, r3
 800629a:	b29b      	uxth	r3, r3
 800629c:	68f9      	ldr	r1, [r7, #12]
 800629e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062a2:	4313      	orrs	r3, r2
 80062a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d155      	bne.n	8006368 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	791b      	ldrb	r3, [r3, #4]
 80062d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	059b      	lsls	r3, r3, #22
 80062de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062e0:	4313      	orrs	r3, r2
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	0151      	lsls	r1, r2, #5
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	440a      	add	r2, r1
 80062ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	e036      	b.n	8006368 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006300:	69da      	ldr	r2, [r3, #28]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	2101      	movs	r1, #1
 800630c:	fa01 f303 	lsl.w	r3, r1, r3
 8006310:	041b      	lsls	r3, r3, #16
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006318:	4313      	orrs	r3, r2
 800631a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d11a      	bne.n	8006368 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	791b      	ldrb	r3, [r3, #4]
 800634c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800634e:	430b      	orrs	r3, r1
 8006350:	4313      	orrs	r3, r2
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006366:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
	...

08006378 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	785b      	ldrb	r3, [r3, #1]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d161      	bne.n	8006458 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063aa:	d11f      	bne.n	80063ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	f003 030f 	and.w	r3, r3, #15
 80063fc:	2101      	movs	r1, #1
 80063fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006402:	b29b      	uxth	r3, r3
 8006404:	43db      	mvns	r3, r3
 8006406:	68f9      	ldr	r1, [r7, #12]
 8006408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800640c:	4013      	ands	r3, r2
 800640e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006416:	69da      	ldr	r2, [r3, #28]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	f003 030f 	and.w	r3, r3, #15
 8006420:	2101      	movs	r1, #1
 8006422:	fa01 f303 	lsl.w	r3, r1, r3
 8006426:	b29b      	uxth	r3, r3
 8006428:	43db      	mvns	r3, r3
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006430:	4013      	ands	r3, r2
 8006432:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	0159      	lsls	r1, r3, #5
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	440b      	add	r3, r1
 800644a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644e:	4619      	mov	r1, r3
 8006450:	4b35      	ldr	r3, [pc, #212]	; (8006528 <USB_DeactivateEndpoint+0x1b0>)
 8006452:	4013      	ands	r3, r2
 8006454:	600b      	str	r3, [r1, #0]
 8006456:	e060      	b.n	800651a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800646a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800646e:	d11f      	bne.n	80064b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	440a      	add	r2, r1
 8006486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800648e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	0151      	lsls	r1, r2, #5
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	440a      	add	r2, r1
 80064a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	f003 030f 	and.w	r3, r3, #15
 80064c0:	2101      	movs	r1, #1
 80064c2:	fa01 f303 	lsl.w	r3, r1, r3
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	43db      	mvns	r3, r3
 80064ca:	68f9      	ldr	r1, [r7, #12]
 80064cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064d0:	4013      	ands	r3, r2
 80064d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	f003 030f 	and.w	r3, r3, #15
 80064e4:	2101      	movs	r1, #1
 80064e6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ea:	041b      	lsls	r3, r3, #16
 80064ec:	43db      	mvns	r3, r3
 80064ee:	68f9      	ldr	r1, [r7, #12]
 80064f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064f4:	4013      	ands	r3, r2
 80064f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	0159      	lsls	r1, r3, #5
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	440b      	add	r3, r1
 800650e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006512:	4619      	mov	r1, r3
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <USB_DeactivateEndpoint+0x1b4>)
 8006516:	4013      	ands	r3, r2
 8006518:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	ec337800 	.word	0xec337800
 800652c:	eff37800 	.word	0xeff37800

08006530 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08a      	sub	sp, #40	; 0x28
 8006534:	af02      	add	r7, sp, #8
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	4613      	mov	r3, r2
 800653c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	785b      	ldrb	r3, [r3, #1]
 800654c:	2b01      	cmp	r3, #1
 800654e:	f040 815c 	bne.w	800680a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d132      	bne.n	80065c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	0151      	lsls	r1, r2, #5
 800656c:	69fa      	ldr	r2, [r7, #28]
 800656e:	440a      	add	r2, r1
 8006570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006574:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006578:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800657c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	69fa      	ldr	r2, [r7, #28]
 8006592:	440a      	add	r2, r1
 8006594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006598:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800659c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b8:	0cdb      	lsrs	r3, r3, #19
 80065ba:	04db      	lsls	r3, r3, #19
 80065bc:	6113      	str	r3, [r2, #16]
 80065be:	e074      	b.n	80066aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	0151      	lsls	r1, r2, #5
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	440a      	add	r2, r1
 80065d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065da:	0cdb      	lsrs	r3, r3, #19
 80065dc:	04db      	lsls	r3, r3, #19
 80065de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	0151      	lsls	r1, r2, #5
 80065f2:	69fa      	ldr	r2, [r7, #28]
 80065f4:	440a      	add	r2, r1
 80065f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006602:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006610:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	6999      	ldr	r1, [r3, #24]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	440b      	add	r3, r1
 800661c:	1e59      	subs	r1, r3, #1
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	fbb1 f3f3 	udiv	r3, r1, r3
 8006626:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006628:	4b9d      	ldr	r3, [pc, #628]	; (80068a0 <USB_EPStartXfer+0x370>)
 800662a:	400b      	ands	r3, r1
 800662c:	69b9      	ldr	r1, [r7, #24]
 800662e:	0148      	lsls	r0, r1, #5
 8006630:	69f9      	ldr	r1, [r7, #28]
 8006632:	4401      	add	r1, r0
 8006634:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006638:	4313      	orrs	r3, r2
 800663a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006648:	691a      	ldr	r2, [r3, #16]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006652:	69b9      	ldr	r1, [r7, #24]
 8006654:	0148      	lsls	r0, r1, #5
 8006656:	69f9      	ldr	r1, [r7, #28]
 8006658:	4401      	add	r1, r0
 800665a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800665e:	4313      	orrs	r3, r2
 8006660:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	791b      	ldrb	r3, [r3, #4]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d11f      	bne.n	80066aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	0151      	lsls	r1, r2, #5
 800667c:	69fa      	ldr	r2, [r7, #28]
 800667e:	440a      	add	r2, r1
 8006680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006684:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006688:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	69fa      	ldr	r2, [r7, #28]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d14b      	bne.n	8006748 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d009      	beq.n	80066cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c4:	461a      	mov	r2, r3
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	791b      	ldrb	r3, [r3, #4]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d128      	bne.n	8006726 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d110      	bne.n	8006706 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	e00f      	b.n	8006726 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	440a      	add	r2, r1
 800671c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006724:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	440a      	add	r2, r1
 800673c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006740:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	e133      	b.n	80069b0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	0151      	lsls	r1, r2, #5
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	440a      	add	r2, r1
 800675e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006762:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006766:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	791b      	ldrb	r3, [r3, #4]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d015      	beq.n	800679c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 811b 	beq.w	80069b0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	2101      	movs	r1, #1
 800678c:	fa01 f303 	lsl.w	r3, r1, r3
 8006790:	69f9      	ldr	r1, [r7, #28]
 8006792:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006796:	4313      	orrs	r3, r2
 8006798:	634b      	str	r3, [r1, #52]	; 0x34
 800679a:	e109      	b.n	80069b0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d110      	bne.n	80067ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	0151      	lsls	r1, r2, #5
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	440a      	add	r2, r1
 80067c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	e00f      	b.n	80067ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	0151      	lsls	r1, r2, #5
 80067e0:	69fa      	ldr	r2, [r7, #28]
 80067e2:	440a      	add	r2, r1
 80067e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	6919      	ldr	r1, [r3, #16]
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	781a      	ldrb	r2, [r3, #0]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	b298      	uxth	r0, r3
 80067fc:	79fb      	ldrb	r3, [r7, #7]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	4603      	mov	r3, r0
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 fade 	bl	8006dc4 <USB_WritePacket>
 8006808:	e0d2      	b.n	80069b0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006824:	0cdb      	lsrs	r3, r3, #19
 8006826:	04db      	lsls	r3, r3, #19
 8006828:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	0151      	lsls	r1, r2, #5
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	440a      	add	r2, r1
 8006840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006844:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006848:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800684c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d126      	bne.n	80068a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800686c:	69b9      	ldr	r1, [r7, #24]
 800686e:	0148      	lsls	r0, r1, #5
 8006870:	69f9      	ldr	r1, [r7, #28]
 8006872:	4401      	add	r1, r0
 8006874:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006878:	4313      	orrs	r3, r2
 800687a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	0151      	lsls	r1, r2, #5
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	440a      	add	r2, r1
 8006892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006896:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800689a:	6113      	str	r3, [r2, #16]
 800689c:	e03a      	b.n	8006914 <USB_EPStartXfer+0x3e4>
 800689e:	bf00      	nop
 80068a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	699a      	ldr	r2, [r3, #24]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	4413      	add	r3, r2
 80068ae:	1e5a      	subs	r2, r3, #1
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	8afa      	ldrh	r2, [r7, #22]
 80068c0:	fb03 f202 	mul.w	r2, r3, r2
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d4:	691a      	ldr	r2, [r3, #16]
 80068d6:	8afb      	ldrh	r3, [r7, #22]
 80068d8:	04d9      	lsls	r1, r3, #19
 80068da:	4b38      	ldr	r3, [pc, #224]	; (80069bc <USB_EPStartXfer+0x48c>)
 80068dc:	400b      	ands	r3, r1
 80068de:	69b9      	ldr	r1, [r7, #24]
 80068e0:	0148      	lsls	r0, r1, #5
 80068e2:	69f9      	ldr	r1, [r7, #28]
 80068e4:	4401      	add	r1, r0
 80068e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068ea:	4313      	orrs	r3, r2
 80068ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006904:	69b9      	ldr	r1, [r7, #24]
 8006906:	0148      	lsls	r0, r1, #5
 8006908:	69f9      	ldr	r1, [r7, #28]
 800690a:	4401      	add	r1, r0
 800690c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006910:	4313      	orrs	r3, r2
 8006912:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d10d      	bne.n	8006936 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	6919      	ldr	r1, [r3, #16]
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006932:	460a      	mov	r2, r1
 8006934:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	791b      	ldrb	r3, [r3, #4]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d128      	bne.n	8006990 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800694a:	2b00      	cmp	r3, #0
 800694c:	d110      	bne.n	8006970 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	440a      	add	r2, r1
 8006964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006968:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	e00f      	b.n	8006990 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	0151      	lsls	r1, r2, #5
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	440a      	add	r2, r1
 8006986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800698a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800698e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3720      	adds	r7, #32
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	1ff80000 	.word	0x1ff80000

080069c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	4613      	mov	r3, r2
 80069cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	785b      	ldrb	r3, [r3, #1]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	f040 80ce 	bne.w	8006b7e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d132      	bne.n	8006a50 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	0151      	lsls	r1, r2, #5
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	440a      	add	r2, r1
 8006a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	0151      	lsls	r1, r2, #5
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	440a      	add	r2, r1
 8006a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	0151      	lsls	r1, r2, #5
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	440a      	add	r2, r1
 8006a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a48:	0cdb      	lsrs	r3, r3, #19
 8006a4a:	04db      	lsls	r3, r3, #19
 8006a4c:	6113      	str	r3, [r2, #16]
 8006a4e:	e04e      	b.n	8006aee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	0151      	lsls	r1, r2, #5
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	440a      	add	r2, r1
 8006a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a6a:	0cdb      	lsrs	r3, r3, #19
 8006a6c:	04db      	lsls	r3, r3, #19
 8006a6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	0151      	lsls	r1, r2, #5
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	440a      	add	r2, r1
 8006a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a92:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	699a      	ldr	r2, [r3, #24]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d903      	bls.n	8006aa8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ac6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad4:	691a      	ldr	r2, [r3, #16]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ade:	6939      	ldr	r1, [r7, #16]
 8006ae0:	0148      	lsls	r0, r1, #5
 8006ae2:	6979      	ldr	r1, [r7, #20]
 8006ae4:	4401      	add	r1, r0
 8006ae6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006aea:	4313      	orrs	r3, r2
 8006aec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d11e      	bne.n	8006b32 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d009      	beq.n	8006b10 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b08:	461a      	mov	r2, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b2e:	6013      	str	r3, [r2, #0]
 8006b30:	e097      	b.n	8006c62 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	0151      	lsls	r1, r2, #5
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	440a      	add	r2, r1
 8006b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b50:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 8083 	beq.w	8006c62 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f003 030f 	and.w	r3, r3, #15
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b72:	6979      	ldr	r1, [r7, #20]
 8006b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	634b      	str	r3, [r1, #52]	; 0x34
 8006b7c:	e071      	b.n	8006c62 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	0151      	lsls	r1, r2, #5
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	440a      	add	r2, r1
 8006b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b98:	0cdb      	lsrs	r3, r3, #19
 8006b9a:	04db      	lsls	r3, r3, #19
 8006b9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bc0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	68da      	ldr	r2, [r3, #12]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	0151      	lsls	r1, r2, #5
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	440a      	add	r2, r1
 8006bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c10:	6939      	ldr	r1, [r7, #16]
 8006c12:	0148      	lsls	r0, r1, #5
 8006c14:	6979      	ldr	r1, [r7, #20]
 8006c16:	4401      	add	r1, r0
 8006c18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006c20:	79fb      	ldrb	r3, [r7, #7]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d10d      	bne.n	8006c42 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d009      	beq.n	8006c42 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	6919      	ldr	r1, [r3, #16]
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3e:	460a      	mov	r2, r1
 8006c40:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	371c      	adds	r7, #28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d14a      	bne.n	8006d24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ca6:	f040 8086 	bne.w	8006db6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	7812      	ldrb	r2, [r2, #0]
 8006cbe:	0151      	lsls	r1, r2, #5
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	440a      	add	r2, r1
 8006cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ccc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	7812      	ldrb	r2, [r2, #0]
 8006ce2:	0151      	lsls	r1, r2, #5
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	440a      	add	r2, r1
 8006ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cf0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d902      	bls.n	8006d08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	75fb      	strb	r3, [r7, #23]
          break;
 8006d06:	e056      	b.n	8006db6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d20:	d0e7      	beq.n	8006cf2 <USB_EPStopXfer+0x82>
 8006d22:	e048      	b.n	8006db6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d3c:	d13b      	bne.n	8006db6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	7812      	ldrb	r2, [r2, #0]
 8006d52:	0151      	lsls	r1, r2, #5
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	440a      	add	r2, r1
 8006d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	7812      	ldrb	r2, [r2, #0]
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d902      	bls.n	8006d9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]
          break;
 8006d9a:	e00c      	b.n	8006db6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006db4:	d0e7      	beq.n	8006d86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b089      	sub	sp, #36	; 0x24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	4611      	mov	r1, r2
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	71fb      	strb	r3, [r7, #7]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006de2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d123      	bne.n	8006e32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006dea:	88bb      	ldrh	r3, [r7, #4]
 8006dec:	3303      	adds	r3, #3
 8006dee:	089b      	lsrs	r3, r3, #2
 8006df0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006df2:	2300      	movs	r3, #0
 8006df4:	61bb      	str	r3, [r7, #24]
 8006df6:	e018      	b.n	8006e2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	031a      	lsls	r2, r3, #12
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e04:	461a      	mov	r2, r3
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	3301      	adds	r3, #1
 8006e16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	3301      	adds	r3, #1
 8006e22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	3301      	adds	r3, #1
 8006e28:	61bb      	str	r3, [r7, #24]
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d3e2      	bcc.n	8006df8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3724      	adds	r7, #36	; 0x24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b08b      	sub	sp, #44	; 0x2c
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e56:	88fb      	ldrh	r3, [r7, #6]
 8006e58:	089b      	lsrs	r3, r3, #2
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e5e:	88fb      	ldrh	r3, [r7, #6]
 8006e60:	f003 0303 	and.w	r3, r3, #3
 8006e64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e66:	2300      	movs	r3, #0
 8006e68:	623b      	str	r3, [r7, #32]
 8006e6a:	e014      	b.n	8006e96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	3301      	adds	r3, #1
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	3301      	adds	r3, #1
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	3301      	adds	r3, #1
 8006e94:	623b      	str	r3, [r7, #32]
 8006e96:	6a3a      	ldr	r2, [r7, #32]
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d3e6      	bcc.n	8006e6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e9e:	8bfb      	ldrh	r3, [r7, #30]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01e      	beq.n	8006ee2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f107 0310 	add.w	r3, r7, #16
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	701a      	strb	r2, [r3, #0]
      i++;
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006ed6:	8bfb      	ldrh	r3, [r7, #30]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006edc:	8bfb      	ldrh	r3, [r7, #30]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1ea      	bne.n	8006eb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	372c      	adds	r7, #44	; 0x2c
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	785b      	ldrb	r3, [r3, #1]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d12c      	bne.n	8006f66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	db12      	blt.n	8006f44 <USB_EPSetStall+0x54>
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00f      	beq.n	8006f44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	0151      	lsls	r1, r2, #5
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	440a      	add	r2, r1
 8006f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f62:	6013      	str	r3, [r2, #0]
 8006f64:	e02b      	b.n	8006fbe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	db12      	blt.n	8006f9e <USB_EPSetStall+0xae>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00f      	beq.n	8006f9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	0151      	lsls	r1, r2, #5
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	440a      	add	r2, r1
 8006f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	0151      	lsls	r1, r2, #5
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d128      	bne.n	800703a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	0151      	lsls	r1, r2, #5
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007002:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007006:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	791b      	ldrb	r3, [r3, #4]
 800700c:	2b03      	cmp	r3, #3
 800700e:	d003      	beq.n	8007018 <USB_EPClearStall+0x4c>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	791b      	ldrb	r3, [r3, #4]
 8007014:	2b02      	cmp	r3, #2
 8007016:	d138      	bne.n	800708a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	440a      	add	r2, r1
 800702e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	e027      	b.n	800708a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	0151      	lsls	r1, r2, #5
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	440a      	add	r2, r1
 8007050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007054:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007058:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	791b      	ldrb	r3, [r3, #4]
 800705e:	2b03      	cmp	r3, #3
 8007060:	d003      	beq.n	800706a <USB_EPClearStall+0x9e>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	791b      	ldrb	r3, [r3, #4]
 8007066:	2b02      	cmp	r3, #2
 8007068:	d10f      	bne.n	800708a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	0151      	lsls	r1, r2, #5
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	440a      	add	r2, r1
 8007080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007088:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80070ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80070cc:	68f9      	ldr	r1, [r7, #12]
 80070ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070d2:	4313      	orrs	r3, r2
 80070d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070fe:	f023 0303 	bic.w	r3, r3, #3
 8007102:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007112:	f023 0302 	bic.w	r3, r3, #2
 8007116:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007126:	b480      	push	{r7}
 8007128:	b085      	sub	sp, #20
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007140:	f023 0303 	bic.w	r3, r3, #3
 8007144:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007154:	f043 0302 	orr.w	r3, r3, #2
 8007158:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	4013      	ands	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007180:	68fb      	ldr	r3, [r7, #12]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	4013      	ands	r3, r2
 80071b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	0c1b      	lsrs	r3, r3, #16
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	4013      	ands	r3, r2
 80071e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	b29b      	uxth	r3, r3
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b085      	sub	sp, #20
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	4013      	ands	r3, r2
 8007222:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007224:	68bb      	ldr	r3, [r7, #8]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007232:	b480      	push	{r7}
 8007234:	b087      	sub	sp, #28
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007254:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	f003 030f 	and.w	r3, r3, #15
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	fa22 f303 	lsr.w	r3, r2, r3
 8007262:	01db      	lsls	r3, r3, #7
 8007264:	b2db      	uxtb	r3, r3
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	4313      	orrs	r3, r2
 800726a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	4413      	add	r3, r2
 8007274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	4013      	ands	r3, r2
 800727e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007280:	68bb      	ldr	r3, [r7, #8]
}
 8007282:	4618      	mov	r0, r3
 8007284:	371c      	adds	r7, #28
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	f003 0301 	and.w	r3, r3, #1
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b085      	sub	sp, #20
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80072c8:	f023 0307 	bic.w	r3, r3, #7
 80072cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	460b      	mov	r3, r1
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	333c      	adds	r3, #60	; 0x3c
 8007306:	3304      	adds	r3, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	4a26      	ldr	r2, [pc, #152]	; (80073a8 <USB_EP0_OutStart+0xb8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d90a      	bls.n	800732a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007324:	d101      	bne.n	800732a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	e037      	b.n	800739a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	461a      	mov	r2, r3
 8007332:	2300      	movs	r3, #0
 8007334:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007344:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007348:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007358:	f043 0318 	orr.w	r3, r3, #24
 800735c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007370:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007372:	7afb      	ldrb	r3, [r7, #11]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d10f      	bne.n	8007398 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737e:	461a      	mov	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007392:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007396:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	371c      	adds	r7, #28
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	4f54300a 	.word	0x4f54300a

080073ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4a13      	ldr	r2, [pc, #76]	; (8007410 <USB_CoreReset+0x64>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d901      	bls.n	80073ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e01b      	b.n	8007402 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	daf2      	bge.n	80073b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f043 0201 	orr.w	r2, r3, #1
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3301      	adds	r3, #1
 80073e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4a09      	ldr	r2, [pc, #36]	; (8007410 <USB_CoreReset+0x64>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d901      	bls.n	80073f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e006      	b.n	8007402 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d0f0      	beq.n	80073e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	00030d40 	.word	0x00030d40

08007414 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007420:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007424:	f002 fc9a 	bl	8009d5c <USBD_static_malloc>
 8007428:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d109      	bne.n	8007444 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	32b0      	adds	r2, #176	; 0xb0
 800743a:	2100      	movs	r1, #0
 800743c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007440:	2302      	movs	r3, #2
 8007442:	e0d4      	b.n	80075ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007444:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007448:	2100      	movs	r1, #0
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f002 fd14 	bl	8009e78 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	32b0      	adds	r2, #176	; 0xb0
 800745a:	68f9      	ldr	r1, [r7, #12]
 800745c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	32b0      	adds	r2, #176	; 0xb0
 800746a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	7c1b      	ldrb	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d138      	bne.n	80074ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800747c:	4b5e      	ldr	r3, [pc, #376]	; (80075f8 <USBD_CDC_Init+0x1e4>)
 800747e:	7819      	ldrb	r1, [r3, #0]
 8007480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007484:	2202      	movs	r2, #2
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f002 fb45 	bl	8009b16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800748c:	4b5a      	ldr	r3, [pc, #360]	; (80075f8 <USBD_CDC_Init+0x1e4>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	f003 020f 	and.w	r2, r3, #15
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	4613      	mov	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	440b      	add	r3, r1
 80074a0:	3324      	adds	r3, #36	; 0x24
 80074a2:	2201      	movs	r2, #1
 80074a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80074a6:	4b55      	ldr	r3, [pc, #340]	; (80075fc <USBD_CDC_Init+0x1e8>)
 80074a8:	7819      	ldrb	r1, [r3, #0]
 80074aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074ae:	2202      	movs	r2, #2
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f002 fb30 	bl	8009b16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80074b6:	4b51      	ldr	r3, [pc, #324]	; (80075fc <USBD_CDC_Init+0x1e8>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	f003 020f 	and.w	r2, r3, #15
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074ce:	2201      	movs	r2, #1
 80074d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80074d2:	4b4b      	ldr	r3, [pc, #300]	; (8007600 <USBD_CDC_Init+0x1ec>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	f003 020f 	and.w	r2, r3, #15
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	4613      	mov	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	440b      	add	r3, r1
 80074e6:	3326      	adds	r3, #38	; 0x26
 80074e8:	2210      	movs	r2, #16
 80074ea:	801a      	strh	r2, [r3, #0]
 80074ec:	e035      	b.n	800755a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80074ee:	4b42      	ldr	r3, [pc, #264]	; (80075f8 <USBD_CDC_Init+0x1e4>)
 80074f0:	7819      	ldrb	r1, [r3, #0]
 80074f2:	2340      	movs	r3, #64	; 0x40
 80074f4:	2202      	movs	r2, #2
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f002 fb0d 	bl	8009b16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80074fc:	4b3e      	ldr	r3, [pc, #248]	; (80075f8 <USBD_CDC_Init+0x1e4>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	f003 020f 	and.w	r2, r3, #15
 8007504:	6879      	ldr	r1, [r7, #4]
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	440b      	add	r3, r1
 8007510:	3324      	adds	r3, #36	; 0x24
 8007512:	2201      	movs	r2, #1
 8007514:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007516:	4b39      	ldr	r3, [pc, #228]	; (80075fc <USBD_CDC_Init+0x1e8>)
 8007518:	7819      	ldrb	r1, [r3, #0]
 800751a:	2340      	movs	r3, #64	; 0x40
 800751c:	2202      	movs	r2, #2
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f002 faf9 	bl	8009b16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007524:	4b35      	ldr	r3, [pc, #212]	; (80075fc <USBD_CDC_Init+0x1e8>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	f003 020f 	and.w	r2, r3, #15
 800752c:	6879      	ldr	r1, [r7, #4]
 800752e:	4613      	mov	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	440b      	add	r3, r1
 8007538:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800753c:	2201      	movs	r2, #1
 800753e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007540:	4b2f      	ldr	r3, [pc, #188]	; (8007600 <USBD_CDC_Init+0x1ec>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	f003 020f 	and.w	r2, r3, #15
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	440b      	add	r3, r1
 8007554:	3326      	adds	r3, #38	; 0x26
 8007556:	2210      	movs	r2, #16
 8007558:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800755a:	4b29      	ldr	r3, [pc, #164]	; (8007600 <USBD_CDC_Init+0x1ec>)
 800755c:	7819      	ldrb	r1, [r3, #0]
 800755e:	2308      	movs	r3, #8
 8007560:	2203      	movs	r2, #3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f002 fad7 	bl	8009b16 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007568:	4b25      	ldr	r3, [pc, #148]	; (8007600 <USBD_CDC_Init+0x1ec>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	f003 020f 	and.w	r2, r3, #15
 8007570:	6879      	ldr	r1, [r7, #4]
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	440b      	add	r3, r1
 800757c:	3324      	adds	r3, #36	; 0x24
 800757e:	2201      	movs	r2, #1
 8007580:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	33b0      	adds	r3, #176	; 0xb0
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80075b8:	2302      	movs	r3, #2
 80075ba:	e018      	b.n	80075ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	7c1b      	ldrb	r3, [r3, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10a      	bne.n	80075da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075c4:	4b0d      	ldr	r3, [pc, #52]	; (80075fc <USBD_CDC_Init+0x1e8>)
 80075c6:	7819      	ldrb	r1, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f002 fb8e 	bl	8009cf4 <USBD_LL_PrepareReceive>
 80075d8:	e008      	b.n	80075ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075da:	4b08      	ldr	r3, [pc, #32]	; (80075fc <USBD_CDC_Init+0x1e8>)
 80075dc:	7819      	ldrb	r1, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075e4:	2340      	movs	r3, #64	; 0x40
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f002 fb84 	bl	8009cf4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	200000d3 	.word	0x200000d3
 80075fc:	200000d4 	.word	0x200000d4
 8007600:	200000d5 	.word	0x200000d5

08007604 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007610:	4b3a      	ldr	r3, [pc, #232]	; (80076fc <USBD_CDC_DeInit+0xf8>)
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f002 faa3 	bl	8009b62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800761c:	4b37      	ldr	r3, [pc, #220]	; (80076fc <USBD_CDC_DeInit+0xf8>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	f003 020f 	and.w	r2, r3, #15
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	3324      	adds	r3, #36	; 0x24
 8007632:	2200      	movs	r2, #0
 8007634:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007636:	4b32      	ldr	r3, [pc, #200]	; (8007700 <USBD_CDC_DeInit+0xfc>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f002 fa90 	bl	8009b62 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007642:	4b2f      	ldr	r3, [pc, #188]	; (8007700 <USBD_CDC_DeInit+0xfc>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	f003 020f 	and.w	r2, r3, #15
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	440b      	add	r3, r1
 8007656:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800765a:	2200      	movs	r2, #0
 800765c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800765e:	4b29      	ldr	r3, [pc, #164]	; (8007704 <USBD_CDC_DeInit+0x100>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f002 fa7c 	bl	8009b62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800766a:	4b26      	ldr	r3, [pc, #152]	; (8007704 <USBD_CDC_DeInit+0x100>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	f003 020f 	and.w	r2, r3, #15
 8007672:	6879      	ldr	r1, [r7, #4]
 8007674:	4613      	mov	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	440b      	add	r3, r1
 800767e:	3324      	adds	r3, #36	; 0x24
 8007680:	2200      	movs	r2, #0
 8007682:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007684:	4b1f      	ldr	r3, [pc, #124]	; (8007704 <USBD_CDC_DeInit+0x100>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	f003 020f 	and.w	r2, r3, #15
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	4613      	mov	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	440b      	add	r3, r1
 8007698:	3326      	adds	r3, #38	; 0x26
 800769a:	2200      	movs	r2, #0
 800769c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	32b0      	adds	r2, #176	; 0xb0
 80076a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d01f      	beq.n	80076f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	33b0      	adds	r3, #176	; 0xb0
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	32b0      	adds	r2, #176	; 0xb0
 80076ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f002 fb50 	bl	8009d78 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	32b0      	adds	r2, #176	; 0xb0
 80076e2:	2100      	movs	r1, #0
 80076e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	200000d3 	.word	0x200000d3
 8007700:	200000d4 	.word	0x200000d4
 8007704:	200000d5 	.word	0x200000d5

08007708 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	32b0      	adds	r2, #176	; 0xb0
 800771c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007720:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007734:	2303      	movs	r3, #3
 8007736:	e0bf      	b.n	80078b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007740:	2b00      	cmp	r3, #0
 8007742:	d050      	beq.n	80077e6 <USBD_CDC_Setup+0xde>
 8007744:	2b20      	cmp	r3, #32
 8007746:	f040 80af 	bne.w	80078a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	88db      	ldrh	r3, [r3, #6]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d03a      	beq.n	80077c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	b25b      	sxtb	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	da1b      	bge.n	8007794 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	33b0      	adds	r3, #176	; 0xb0
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007772:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	88d2      	ldrh	r2, [r2, #6]
 8007778:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	88db      	ldrh	r3, [r3, #6]
 800777e:	2b07      	cmp	r3, #7
 8007780:	bf28      	it	cs
 8007782:	2307      	movcs	r3, #7
 8007784:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	89fa      	ldrh	r2, [r7, #14]
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 fd89 	bl	80092a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007792:	e090      	b.n	80078b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	785a      	ldrb	r2, [r3, #1]
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	88db      	ldrh	r3, [r3, #6]
 80077a2:	2b3f      	cmp	r3, #63	; 0x3f
 80077a4:	d803      	bhi.n	80077ae <USBD_CDC_Setup+0xa6>
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	88db      	ldrh	r3, [r3, #6]
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	e000      	b.n	80077b0 <USBD_CDC_Setup+0xa8>
 80077ae:	2240      	movs	r2, #64	; 0x40
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80077b6:	6939      	ldr	r1, [r7, #16]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80077be:	461a      	mov	r2, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f001 fd9b 	bl	80092fc <USBD_CtlPrepareRx>
      break;
 80077c6:	e076      	b.n	80078b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	33b0      	adds	r3, #176	; 0xb0
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	7850      	ldrb	r0, [r2, #1]
 80077de:	2200      	movs	r2, #0
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	4798      	blx	r3
      break;
 80077e4:	e067      	b.n	80078b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	2b0b      	cmp	r3, #11
 80077ec:	d851      	bhi.n	8007892 <USBD_CDC_Setup+0x18a>
 80077ee:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <USBD_CDC_Setup+0xec>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	08007825 	.word	0x08007825
 80077f8:	080078a1 	.word	0x080078a1
 80077fc:	08007893 	.word	0x08007893
 8007800:	08007893 	.word	0x08007893
 8007804:	08007893 	.word	0x08007893
 8007808:	08007893 	.word	0x08007893
 800780c:	08007893 	.word	0x08007893
 8007810:	08007893 	.word	0x08007893
 8007814:	08007893 	.word	0x08007893
 8007818:	08007893 	.word	0x08007893
 800781c:	0800784f 	.word	0x0800784f
 8007820:	08007879 	.word	0x08007879
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b03      	cmp	r3, #3
 800782e:	d107      	bne.n	8007840 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007830:	f107 030a 	add.w	r3, r7, #10
 8007834:	2202      	movs	r2, #2
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f001 fd33 	bl	80092a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800783e:	e032      	b.n	80078a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 fcbd 	bl	80091c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007848:	2303      	movs	r3, #3
 800784a:	75fb      	strb	r3, [r7, #23]
          break;
 800784c:	e02b      	b.n	80078a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b03      	cmp	r3, #3
 8007858:	d107      	bne.n	800786a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800785a:	f107 030d 	add.w	r3, r7, #13
 800785e:	2201      	movs	r2, #1
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f001 fd1e 	bl	80092a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007868:	e01d      	b.n	80078a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 fca8 	bl	80091c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007872:	2303      	movs	r3, #3
 8007874:	75fb      	strb	r3, [r7, #23]
          break;
 8007876:	e016      	b.n	80078a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b03      	cmp	r3, #3
 8007882:	d00f      	beq.n	80078a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 fc9b 	bl	80091c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800788c:	2303      	movs	r3, #3
 800788e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007890:	e008      	b.n	80078a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 fc94 	bl	80091c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800789a:	2303      	movs	r3, #3
 800789c:	75fb      	strb	r3, [r7, #23]
          break;
 800789e:	e002      	b.n	80078a6 <USBD_CDC_Setup+0x19e>
          break;
 80078a0:	bf00      	nop
 80078a2:	e008      	b.n	80078b6 <USBD_CDC_Setup+0x1ae>
          break;
 80078a4:	bf00      	nop
      }
      break;
 80078a6:	e006      	b.n	80078b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 fc89 	bl	80091c2 <USBD_CtlError>
      ret = USBD_FAIL;
 80078b0:	2303      	movs	r3, #3
 80078b2:	75fb      	strb	r3, [r7, #23]
      break;
 80078b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3718      	adds	r7, #24
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	32b0      	adds	r2, #176	; 0xb0
 80078de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e065      	b.n	80079b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	32b0      	adds	r2, #176	; 0xb0
 80078f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	f003 020f 	and.w	r2, r3, #15
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	440b      	add	r3, r1
 800790c:	3318      	adds	r3, #24
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d02f      	beq.n	8007974 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	f003 020f 	and.w	r2, r3, #15
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	4613      	mov	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	440b      	add	r3, r1
 8007926:	3318      	adds	r3, #24
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	78fb      	ldrb	r3, [r7, #3]
 800792c:	f003 010f 	and.w	r1, r3, #15
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	460b      	mov	r3, r1
 8007934:	00db      	lsls	r3, r3, #3
 8007936:	440b      	add	r3, r1
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4403      	add	r3, r0
 800793c:	3348      	adds	r3, #72	; 0x48
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	fbb2 f1f3 	udiv	r1, r2, r3
 8007944:	fb01 f303 	mul.w	r3, r1, r3
 8007948:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800794a:	2b00      	cmp	r3, #0
 800794c:	d112      	bne.n	8007974 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800794e:	78fb      	ldrb	r3, [r7, #3]
 8007950:	f003 020f 	and.w	r2, r3, #15
 8007954:	6879      	ldr	r1, [r7, #4]
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	440b      	add	r3, r1
 8007960:	3318      	adds	r3, #24
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007966:	78f9      	ldrb	r1, [r7, #3]
 8007968:	2300      	movs	r3, #0
 800796a:	2200      	movs	r2, #0
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f002 f9a0 	bl	8009cb2 <USBD_LL_Transmit>
 8007972:	e01f      	b.n	80079b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2200      	movs	r2, #0
 8007978:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	33b0      	adds	r3, #176	; 0xb0
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d010      	beq.n	80079b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	33b0      	adds	r3, #176	; 0xb0
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80079b0:	78fa      	ldrb	r2, [r7, #3]
 80079b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	460b      	mov	r3, r1
 80079c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	32b0      	adds	r2, #176	; 0xb0
 80079d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	32b0      	adds	r2, #176	; 0xb0
 80079e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e01a      	b.n	8007a26 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079f0:	78fb      	ldrb	r3, [r7, #3]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f002 f99e 	bl	8009d36 <USBD_LL_GetRxDataSize>
 80079fa:	4602      	mov	r2, r0
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	33b0      	adds	r3, #176	; 0xb0
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007a20:	4611      	mov	r1, r2
 8007a22:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	32b0      	adds	r2, #176	; 0xb0
 8007a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e025      	b.n	8007a9c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	33b0      	adds	r3, #176	; 0xb0
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d01a      	beq.n	8007a9a <USBD_CDC_EP0_RxReady+0x6c>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007a6a:	2bff      	cmp	r3, #255	; 0xff
 8007a6c:	d015      	beq.n	8007a9a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	33b0      	adds	r3, #176	; 0xb0
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007a86:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a8e:	b292      	uxth	r2, r2
 8007a90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	22ff      	movs	r2, #255	; 0xff
 8007a96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007aac:	2182      	movs	r1, #130	; 0x82
 8007aae:	4818      	ldr	r0, [pc, #96]	; (8007b10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ab0:	f000 fd4f 	bl	8008552 <USBD_GetEpDesc>
 8007ab4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	4815      	ldr	r0, [pc, #84]	; (8007b10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007aba:	f000 fd4a 	bl	8008552 <USBD_GetEpDesc>
 8007abe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ac0:	2181      	movs	r1, #129	; 0x81
 8007ac2:	4813      	ldr	r0, [pc, #76]	; (8007b10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ac4:	f000 fd45 	bl	8008552 <USBD_GetEpDesc>
 8007ac8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2210      	movs	r2, #16
 8007ad4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d006      	beq.n	8007aea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ae4:	711a      	strb	r2, [r3, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d006      	beq.n	8007afe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007af8:	711a      	strb	r2, [r3, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2243      	movs	r2, #67	; 0x43
 8007b02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b04:	4b02      	ldr	r3, [pc, #8]	; (8007b10 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20000090 	.word	0x20000090

08007b14 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b1c:	2182      	movs	r1, #130	; 0x82
 8007b1e:	4818      	ldr	r0, [pc, #96]	; (8007b80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b20:	f000 fd17 	bl	8008552 <USBD_GetEpDesc>
 8007b24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b26:	2101      	movs	r1, #1
 8007b28:	4815      	ldr	r0, [pc, #84]	; (8007b80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b2a:	f000 fd12 	bl	8008552 <USBD_GetEpDesc>
 8007b2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b30:	2181      	movs	r1, #129	; 0x81
 8007b32:	4813      	ldr	r0, [pc, #76]	; (8007b80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b34:	f000 fd0d 	bl	8008552 <USBD_GetEpDesc>
 8007b38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2210      	movs	r2, #16
 8007b44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d006      	beq.n	8007b5a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	711a      	strb	r2, [r3, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f042 0202 	orr.w	r2, r2, #2
 8007b58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d006      	beq.n	8007b6e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	711a      	strb	r2, [r3, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f042 0202 	orr.w	r2, r2, #2
 8007b6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2243      	movs	r2, #67	; 0x43
 8007b72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b74:	4b02      	ldr	r3, [pc, #8]	; (8007b80 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20000090 	.word	0x20000090

08007b84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b8c:	2182      	movs	r1, #130	; 0x82
 8007b8e:	4818      	ldr	r0, [pc, #96]	; (8007bf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b90:	f000 fcdf 	bl	8008552 <USBD_GetEpDesc>
 8007b94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b96:	2101      	movs	r1, #1
 8007b98:	4815      	ldr	r0, [pc, #84]	; (8007bf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b9a:	f000 fcda 	bl	8008552 <USBD_GetEpDesc>
 8007b9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ba0:	2181      	movs	r1, #129	; 0x81
 8007ba2:	4813      	ldr	r0, [pc, #76]	; (8007bf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ba4:	f000 fcd5 	bl	8008552 <USBD_GetEpDesc>
 8007ba8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2210      	movs	r2, #16
 8007bb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d006      	beq.n	8007bca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bc4:	711a      	strb	r2, [r3, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d006      	beq.n	8007bde <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bd8:	711a      	strb	r2, [r3, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2243      	movs	r2, #67	; 0x43
 8007be2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007be4:	4b02      	ldr	r3, [pc, #8]	; (8007bf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000090 	.word	0x20000090

08007bf4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	220a      	movs	r2, #10
 8007c00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007c02:	4b03      	ldr	r3, [pc, #12]	; (8007c10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	2000004c 	.word	0x2000004c

08007c14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e009      	b.n	8007c3c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	33b0      	adds	r3, #176	; 0xb0
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	32b0      	adds	r2, #176	; 0xb0
 8007c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c62:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e008      	b.n	8007c80 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	371c      	adds	r7, #28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	32b0      	adds	r2, #176	; 0xb0
 8007ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e004      	b.n	8007cba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
	...

08007cc8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	32b0      	adds	r2, #176	; 0xb0
 8007cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cde:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	32b0      	adds	r2, #176	; 0xb0
 8007cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e025      	b.n	8007d46 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d11f      	bne.n	8007d44 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007d0c:	4b10      	ldr	r3, [pc, #64]	; (8007d50 <USBD_CDC_TransmitPacket+0x88>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	f003 020f 	and.w	r2, r3, #15
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4403      	add	r3, r0
 8007d26:	3318      	adds	r3, #24
 8007d28:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007d2a:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <USBD_CDC_TransmitPacket+0x88>)
 8007d2c:	7819      	ldrb	r1, [r3, #0]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f001 ffb9 	bl	8009cb2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	200000d3 	.word	0x200000d3

08007d54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	32b0      	adds	r2, #176	; 0xb0
 8007d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	32b0      	adds	r2, #176	; 0xb0
 8007d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e018      	b.n	8007db4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	7c1b      	ldrb	r3, [r3, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10a      	bne.n	8007da0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d8a:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <USBD_CDC_ReceivePacket+0x68>)
 8007d8c:	7819      	ldrb	r1, [r3, #0]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 ffab 	bl	8009cf4 <USBD_LL_PrepareReceive>
 8007d9e:	e008      	b.n	8007db2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007da0:	4b06      	ldr	r3, [pc, #24]	; (8007dbc <USBD_CDC_ReceivePacket+0x68>)
 8007da2:	7819      	ldrb	r1, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007daa:	2340      	movs	r3, #64	; 0x40
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 ffa1 	bl	8009cf4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	200000d4 	.word	0x200000d4

08007dc0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e01f      	b.n	8007e18 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	79fa      	ldrb	r2, [r7, #7]
 8007e0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f001 fe1b 	bl	8009a48 <USBD_LL_Init>
 8007e12:	4603      	mov	r3, r0
 8007e14:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e025      	b.n	8007e84 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	32ae      	adds	r2, #174	; 0xae
 8007e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00f      	beq.n	8007e74 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	32ae      	adds	r2, #174	; 0xae
 8007e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	f107 020e 	add.w	r2, r7, #14
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4798      	blx	r3
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 fe23 	bl	8009ae0 <USBD_LL_Start>
 8007e9a:	4603      	mov	r3, r0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007eac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d009      	beq.n	8007ee8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	78fa      	ldrb	r2, [r7, #3]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	4798      	blx	r3
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	78fa      	ldrb	r2, [r7, #3]
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4798      	blx	r3
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f001 f908 	bl	800914e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f5a:	f003 031f 	and.w	r3, r3, #31
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d01a      	beq.n	8007f98 <USBD_LL_SetupStage+0x72>
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d822      	bhi.n	8007fac <USBD_LL_SetupStage+0x86>
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d002      	beq.n	8007f70 <USBD_LL_SetupStage+0x4a>
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d00a      	beq.n	8007f84 <USBD_LL_SetupStage+0x5e>
 8007f6e:	e01d      	b.n	8007fac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f76:	4619      	mov	r1, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fb5f 	bl	800863c <USBD_StdDevReq>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	73fb      	strb	r3, [r7, #15]
      break;
 8007f82:	e020      	b.n	8007fc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fbc7 	bl	8008720 <USBD_StdItfReq>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73fb      	strb	r3, [r7, #15]
      break;
 8007f96:	e016      	b.n	8007fc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fc29 	bl	80087f8 <USBD_StdEPReq>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8007faa:	e00c      	b.n	8007fc6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f001 fdf0 	bl	8009ba0 <USBD_LL_StallEP>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc4:	bf00      	nop
  }

  return ret;
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007fe2:	7afb      	ldrb	r3, [r7, #11]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d16e      	bne.n	80080c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007fee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	f040 8098 	bne.w	800812c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	429a      	cmp	r2, r3
 8008006:	d913      	bls.n	8008030 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	1ad2      	subs	r2, r2, r3
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	68da      	ldr	r2, [r3, #12]
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	4293      	cmp	r3, r2
 8008020:	bf28      	it	cs
 8008022:	4613      	movcs	r3, r2
 8008024:	461a      	mov	r2, r3
 8008026:	6879      	ldr	r1, [r7, #4]
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f001 f984 	bl	8009336 <USBD_CtlContinueRx>
 800802e:	e07d      	b.n	800812c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008036:	f003 031f 	and.w	r3, r3, #31
 800803a:	2b02      	cmp	r3, #2
 800803c:	d014      	beq.n	8008068 <USBD_LL_DataOutStage+0x98>
 800803e:	2b02      	cmp	r3, #2
 8008040:	d81d      	bhi.n	800807e <USBD_LL_DataOutStage+0xae>
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <USBD_LL_DataOutStage+0x7c>
 8008046:	2b01      	cmp	r3, #1
 8008048:	d003      	beq.n	8008052 <USBD_LL_DataOutStage+0x82>
 800804a:	e018      	b.n	800807e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	75bb      	strb	r3, [r7, #22]
            break;
 8008050:	e018      	b.n	8008084 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008058:	b2db      	uxtb	r3, r3
 800805a:	4619      	mov	r1, r3
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 fa5e 	bl	800851e <USBD_CoreFindIF>
 8008062:	4603      	mov	r3, r0
 8008064:	75bb      	strb	r3, [r7, #22]
            break;
 8008066:	e00d      	b.n	8008084 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800806e:	b2db      	uxtb	r3, r3
 8008070:	4619      	mov	r1, r3
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 fa60 	bl	8008538 <USBD_CoreFindEP>
 8008078:	4603      	mov	r3, r0
 800807a:	75bb      	strb	r3, [r7, #22]
            break;
 800807c:	e002      	b.n	8008084 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	75bb      	strb	r3, [r7, #22]
            break;
 8008082:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008084:	7dbb      	ldrb	r3, [r7, #22]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d119      	bne.n	80080be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b03      	cmp	r3, #3
 8008094:	d113      	bne.n	80080be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008096:	7dba      	ldrb	r2, [r7, #22]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	32ae      	adds	r2, #174	; 0xae
 800809c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00b      	beq.n	80080be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80080a6:	7dba      	ldrb	r2, [r7, #22]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80080ae:	7dba      	ldrb	r2, [r7, #22]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	32ae      	adds	r2, #174	; 0xae
 80080b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f001 f94a 	bl	8009358 <USBD_CtlSendStatus>
 80080c4:	e032      	b.n	800812c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80080c6:	7afb      	ldrb	r3, [r7, #11]
 80080c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	4619      	mov	r1, r3
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fa31 	bl	8008538 <USBD_CoreFindEP>
 80080d6:	4603      	mov	r3, r0
 80080d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080da:	7dbb      	ldrb	r3, [r7, #22]
 80080dc:	2bff      	cmp	r3, #255	; 0xff
 80080de:	d025      	beq.n	800812c <USBD_LL_DataOutStage+0x15c>
 80080e0:	7dbb      	ldrb	r3, [r7, #22]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d122      	bne.n	800812c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d117      	bne.n	8008122 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80080f2:	7dba      	ldrb	r2, [r7, #22]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	32ae      	adds	r2, #174	; 0xae
 80080f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00f      	beq.n	8008122 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008102:	7dba      	ldrb	r2, [r7, #22]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800810a:	7dba      	ldrb	r2, [r7, #22]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	32ae      	adds	r2, #174	; 0xae
 8008110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	7afa      	ldrb	r2, [r7, #11]
 8008118:	4611      	mov	r1, r2
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	4798      	blx	r3
 800811e:	4603      	mov	r3, r0
 8008120:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008128:	7dfb      	ldrb	r3, [r7, #23]
 800812a:	e000      	b.n	800812e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b086      	sub	sp, #24
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	460b      	mov	r3, r1
 8008140:	607a      	str	r2, [r7, #4]
 8008142:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008144:	7afb      	ldrb	r3, [r7, #11]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d16f      	bne.n	800822a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3314      	adds	r3, #20
 800814e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008156:	2b02      	cmp	r3, #2
 8008158:	d15a      	bne.n	8008210 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	689a      	ldr	r2, [r3, #8]
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	429a      	cmp	r2, r3
 8008164:	d914      	bls.n	8008190 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	689a      	ldr	r2, [r3, #8]
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	1ad2      	subs	r2, r2, r3
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	461a      	mov	r2, r3
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f001 f8ac 	bl	80092da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008182:	2300      	movs	r3, #0
 8008184:	2200      	movs	r2, #0
 8008186:	2100      	movs	r1, #0
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f001 fdb3 	bl	8009cf4 <USBD_LL_PrepareReceive>
 800818e:	e03f      	b.n	8008210 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	68da      	ldr	r2, [r3, #12]
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	429a      	cmp	r2, r3
 800819a:	d11c      	bne.n	80081d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d316      	bcc.n	80081d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d20f      	bcs.n	80081d6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081b6:	2200      	movs	r2, #0
 80081b8:	2100      	movs	r1, #0
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f001 f88d 	bl	80092da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081c8:	2300      	movs	r3, #0
 80081ca:	2200      	movs	r2, #0
 80081cc:	2100      	movs	r1, #0
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f001 fd90 	bl	8009cf4 <USBD_LL_PrepareReceive>
 80081d4:	e01c      	b.n	8008210 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d10f      	bne.n	8008202 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d009      	beq.n	8008202 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008202:	2180      	movs	r1, #128	; 0x80
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f001 fccb 	bl	8009ba0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f001 f8b7 	bl	800937e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d03a      	beq.n	8008290 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f7ff fe42 	bl	8007ea4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008228:	e032      	b.n	8008290 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800822a:	7afb      	ldrb	r3, [r7, #11]
 800822c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008230:	b2db      	uxtb	r3, r3
 8008232:	4619      	mov	r1, r3
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f000 f97f 	bl	8008538 <USBD_CoreFindEP>
 800823a:	4603      	mov	r3, r0
 800823c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800823e:	7dfb      	ldrb	r3, [r7, #23]
 8008240:	2bff      	cmp	r3, #255	; 0xff
 8008242:	d025      	beq.n	8008290 <USBD_LL_DataInStage+0x15a>
 8008244:	7dfb      	ldrb	r3, [r7, #23]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d122      	bne.n	8008290 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b03      	cmp	r3, #3
 8008254:	d11c      	bne.n	8008290 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008256:	7dfa      	ldrb	r2, [r7, #23]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	32ae      	adds	r2, #174	; 0xae
 800825c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d014      	beq.n	8008290 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008266:	7dfa      	ldrb	r2, [r7, #23]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800826e:	7dfa      	ldrb	r2, [r7, #23]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	32ae      	adds	r2, #174	; 0xae
 8008274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	7afa      	ldrb	r2, [r7, #11]
 800827c:	4611      	mov	r1, r2
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	4798      	blx	r3
 8008282:	4603      	mov	r3, r0
 8008284:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008286:	7dbb      	ldrb	r3, [r7, #22]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800828c:	7dbb      	ldrb	r3, [r7, #22]
 800828e:	e000      	b.n	8008292 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d014      	beq.n	8008300 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00e      	beq.n	8008300 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	6852      	ldr	r2, [r2, #4]
 80082ee:	b2d2      	uxtb	r2, r2
 80082f0:	4611      	mov	r1, r2
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	4798      	blx	r3
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80082fc:	2303      	movs	r3, #3
 80082fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008300:	2340      	movs	r3, #64	; 0x40
 8008302:	2200      	movs	r2, #0
 8008304:	2100      	movs	r1, #0
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 fc05 	bl	8009b16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2240      	movs	r2, #64	; 0x40
 8008318:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800831c:	2340      	movs	r3, #64	; 0x40
 800831e:	2200      	movs	r2, #0
 8008320:	2180      	movs	r1, #128	; 0x80
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 fbf7 	bl	8009b16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2240      	movs	r2, #64	; 0x40
 8008332:	621a      	str	r2, [r3, #32]

  return ret;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	460b      	mov	r3, r1
 8008348:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800835e:	b480      	push	{r7}
 8008360:	b083      	sub	sp, #12
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836c:	b2da      	uxtb	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2204      	movs	r2, #4
 8008378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800838a:	b480      	push	{r7}
 800838c:	b083      	sub	sp, #12
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b04      	cmp	r3, #4
 800839c:	d106      	bne.n	80083ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b082      	sub	sp, #8
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d110      	bne.n	80083f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00b      	beq.n	80083f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083de:	69db      	ldr	r3, [r3, #28]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d005      	beq.n	80083f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	460b      	mov	r3, r1
 8008404:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	32ae      	adds	r2, #174	; 0xae
 8008410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008418:	2303      	movs	r3, #3
 800841a:	e01c      	b.n	8008456 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b03      	cmp	r3, #3
 8008426:	d115      	bne.n	8008454 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	32ae      	adds	r2, #174	; 0xae
 8008432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008436:	6a1b      	ldr	r3, [r3, #32]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00b      	beq.n	8008454 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	32ae      	adds	r2, #174	; 0xae
 8008446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844a:	6a1b      	ldr	r3, [r3, #32]
 800844c:	78fa      	ldrb	r2, [r7, #3]
 800844e:	4611      	mov	r1, r2
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	460b      	mov	r3, r1
 8008468:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	32ae      	adds	r2, #174	; 0xae
 8008474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800847c:	2303      	movs	r3, #3
 800847e:	e01c      	b.n	80084ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b03      	cmp	r3, #3
 800848a:	d115      	bne.n	80084b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	32ae      	adds	r2, #174	; 0xae
 8008496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00b      	beq.n	80084b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	32ae      	adds	r2, #174	; 0xae
 80084aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	78fa      	ldrb	r2, [r7, #3]
 80084b2:	4611      	mov	r1, r2
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b083      	sub	sp, #12
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00e      	beq.n	8008514 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	6852      	ldr	r2, [r2, #4]
 8008502:	b2d2      	uxtb	r2, r2
 8008504:	4611      	mov	r1, r2
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	4798      	blx	r3
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008510:	2303      	movs	r3, #3
 8008512:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008514:	7bfb      	ldrb	r3, [r7, #15]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800851e:	b480      	push	{r7}
 8008520:	b083      	sub	sp, #12
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	460b      	mov	r3, r1
 8008528:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800852a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800852c:	4618      	mov	r0, r3
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008544:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008546:	4618      	mov	r0, r3
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b086      	sub	sp, #24
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	460b      	mov	r3, r1
 800855c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008566:	2300      	movs	r3, #0
 8008568:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	885b      	ldrh	r3, [r3, #2]
 800856e:	b29a      	uxth	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	b29b      	uxth	r3, r3
 8008576:	429a      	cmp	r2, r3
 8008578:	d920      	bls.n	80085bc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	b29b      	uxth	r3, r3
 8008580:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008582:	e013      	b.n	80085ac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008584:	f107 030a 	add.w	r3, r7, #10
 8008588:	4619      	mov	r1, r3
 800858a:	6978      	ldr	r0, [r7, #20]
 800858c:	f000 f81b 	bl	80085c6 <USBD_GetNextDesc>
 8008590:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	785b      	ldrb	r3, [r3, #1]
 8008596:	2b05      	cmp	r3, #5
 8008598:	d108      	bne.n	80085ac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	789b      	ldrb	r3, [r3, #2]
 80085a2:	78fa      	ldrb	r2, [r7, #3]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d008      	beq.n	80085ba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80085a8:	2300      	movs	r3, #0
 80085aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	885b      	ldrh	r3, [r3, #2]
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	897b      	ldrh	r3, [r7, #10]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d8e5      	bhi.n	8008584 <USBD_GetEpDesc+0x32>
 80085b8:	e000      	b.n	80085bc <USBD_GetEpDesc+0x6a>
          break;
 80085ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80085bc:	693b      	ldr	r3, [r7, #16]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b085      	sub	sp, #20
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	881a      	ldrh	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	4413      	add	r3, r2
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4413      	add	r3, r2
 80085f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80085f2:	68fb      	ldr	r3, [r7, #12]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	3301      	adds	r3, #1
 8008616:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800861e:	8a3b      	ldrh	r3, [r7, #16]
 8008620:	021b      	lsls	r3, r3, #8
 8008622:	b21a      	sxth	r2, r3
 8008624:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008628:	4313      	orrs	r3, r2
 800862a:	b21b      	sxth	r3, r3
 800862c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800862e:	89fb      	ldrh	r3, [r7, #14]
}
 8008630:	4618      	mov	r0, r3
 8008632:	371c      	adds	r7, #28
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008652:	2b40      	cmp	r3, #64	; 0x40
 8008654:	d005      	beq.n	8008662 <USBD_StdDevReq+0x26>
 8008656:	2b40      	cmp	r3, #64	; 0x40
 8008658:	d857      	bhi.n	800870a <USBD_StdDevReq+0xce>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00f      	beq.n	800867e <USBD_StdDevReq+0x42>
 800865e:	2b20      	cmp	r3, #32
 8008660:	d153      	bne.n	800870a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	32ae      	adds	r2, #174	; 0xae
 800866c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	4798      	blx	r3
 8008678:	4603      	mov	r3, r0
 800867a:	73fb      	strb	r3, [r7, #15]
      break;
 800867c:	e04a      	b.n	8008714 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	785b      	ldrb	r3, [r3, #1]
 8008682:	2b09      	cmp	r3, #9
 8008684:	d83b      	bhi.n	80086fe <USBD_StdDevReq+0xc2>
 8008686:	a201      	add	r2, pc, #4	; (adr r2, 800868c <USBD_StdDevReq+0x50>)
 8008688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868c:	080086e1 	.word	0x080086e1
 8008690:	080086f5 	.word	0x080086f5
 8008694:	080086ff 	.word	0x080086ff
 8008698:	080086eb 	.word	0x080086eb
 800869c:	080086ff 	.word	0x080086ff
 80086a0:	080086bf 	.word	0x080086bf
 80086a4:	080086b5 	.word	0x080086b5
 80086a8:	080086ff 	.word	0x080086ff
 80086ac:	080086d7 	.word	0x080086d7
 80086b0:	080086c9 	.word	0x080086c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fa3c 	bl	8008b34 <USBD_GetDescriptor>
          break;
 80086bc:	e024      	b.n	8008708 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fba1 	bl	8008e08 <USBD_SetAddress>
          break;
 80086c6:	e01f      	b.n	8008708 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fbe0 	bl	8008e90 <USBD_SetConfig>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]
          break;
 80086d4:	e018      	b.n	8008708 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fc83 	bl	8008fe4 <USBD_GetConfig>
          break;
 80086de:	e013      	b.n	8008708 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fcb4 	bl	8009050 <USBD_GetStatus>
          break;
 80086e8:	e00e      	b.n	8008708 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fce3 	bl	80090b8 <USBD_SetFeature>
          break;
 80086f2:	e009      	b.n	8008708 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fd07 	bl	800910a <USBD_ClrFeature>
          break;
 80086fc:	e004      	b.n	8008708 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fd5e 	bl	80091c2 <USBD_CtlError>
          break;
 8008706:	bf00      	nop
      }
      break;
 8008708:	e004      	b.n	8008714 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fd58 	bl	80091c2 <USBD_CtlError>
      break;
 8008712:	bf00      	nop
  }

  return ret;
 8008714:	7bfb      	ldrb	r3, [r7, #15]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop

08008720 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008736:	2b40      	cmp	r3, #64	; 0x40
 8008738:	d005      	beq.n	8008746 <USBD_StdItfReq+0x26>
 800873a:	2b40      	cmp	r3, #64	; 0x40
 800873c:	d852      	bhi.n	80087e4 <USBD_StdItfReq+0xc4>
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <USBD_StdItfReq+0x26>
 8008742:	2b20      	cmp	r3, #32
 8008744:	d14e      	bne.n	80087e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800874c:	b2db      	uxtb	r3, r3
 800874e:	3b01      	subs	r3, #1
 8008750:	2b02      	cmp	r3, #2
 8008752:	d840      	bhi.n	80087d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	889b      	ldrh	r3, [r3, #4]
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b01      	cmp	r3, #1
 800875c:	d836      	bhi.n	80087cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	889b      	ldrh	r3, [r3, #4]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff fed9 	bl	800851e <USBD_CoreFindIF>
 800876c:	4603      	mov	r3, r0
 800876e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	2bff      	cmp	r3, #255	; 0xff
 8008774:	d01d      	beq.n	80087b2 <USBD_StdItfReq+0x92>
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d11a      	bne.n	80087b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800877c:	7bba      	ldrb	r2, [r7, #14]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	32ae      	adds	r2, #174	; 0xae
 8008782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00f      	beq.n	80087ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800878c:	7bba      	ldrb	r2, [r7, #14]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008794:	7bba      	ldrb	r2, [r7, #14]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	32ae      	adds	r2, #174	; 0xae
 800879a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	4798      	blx	r3
 80087a6:	4603      	mov	r3, r0
 80087a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80087aa:	e004      	b.n	80087b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80087ac:	2303      	movs	r3, #3
 80087ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80087b0:	e001      	b.n	80087b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80087b2:	2303      	movs	r3, #3
 80087b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	88db      	ldrh	r3, [r3, #6]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d110      	bne.n	80087e0 <USBD_StdItfReq+0xc0>
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10d      	bne.n	80087e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fdc7 	bl	8009358 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80087ca:	e009      	b.n	80087e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fcf7 	bl	80091c2 <USBD_CtlError>
          break;
 80087d4:	e004      	b.n	80087e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fcf2 	bl	80091c2 <USBD_CtlError>
          break;
 80087de:	e000      	b.n	80087e2 <USBD_StdItfReq+0xc2>
          break;
 80087e0:	bf00      	nop
      }
      break;
 80087e2:	e004      	b.n	80087ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fceb 	bl	80091c2 <USBD_CtlError>
      break;
 80087ec:	bf00      	nop
  }

  return ret;
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	889b      	ldrh	r3, [r3, #4]
 800880a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008814:	2b40      	cmp	r3, #64	; 0x40
 8008816:	d007      	beq.n	8008828 <USBD_StdEPReq+0x30>
 8008818:	2b40      	cmp	r3, #64	; 0x40
 800881a:	f200 817f 	bhi.w	8008b1c <USBD_StdEPReq+0x324>
 800881e:	2b00      	cmp	r3, #0
 8008820:	d02a      	beq.n	8008878 <USBD_StdEPReq+0x80>
 8008822:	2b20      	cmp	r3, #32
 8008824:	f040 817a 	bne.w	8008b1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008828:	7bbb      	ldrb	r3, [r7, #14]
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff fe83 	bl	8008538 <USBD_CoreFindEP>
 8008832:	4603      	mov	r3, r0
 8008834:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008836:	7b7b      	ldrb	r3, [r7, #13]
 8008838:	2bff      	cmp	r3, #255	; 0xff
 800883a:	f000 8174 	beq.w	8008b26 <USBD_StdEPReq+0x32e>
 800883e:	7b7b      	ldrb	r3, [r7, #13]
 8008840:	2b00      	cmp	r3, #0
 8008842:	f040 8170 	bne.w	8008b26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008846:	7b7a      	ldrb	r2, [r7, #13]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800884e:	7b7a      	ldrb	r2, [r7, #13]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	32ae      	adds	r2, #174	; 0xae
 8008854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 8163 	beq.w	8008b26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008860:	7b7a      	ldrb	r2, [r7, #13]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	32ae      	adds	r2, #174	; 0xae
 8008866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	4798      	blx	r3
 8008872:	4603      	mov	r3, r0
 8008874:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008876:	e156      	b.n	8008b26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	785b      	ldrb	r3, [r3, #1]
 800887c:	2b03      	cmp	r3, #3
 800887e:	d008      	beq.n	8008892 <USBD_StdEPReq+0x9a>
 8008880:	2b03      	cmp	r3, #3
 8008882:	f300 8145 	bgt.w	8008b10 <USBD_StdEPReq+0x318>
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 809b 	beq.w	80089c2 <USBD_StdEPReq+0x1ca>
 800888c:	2b01      	cmp	r3, #1
 800888e:	d03c      	beq.n	800890a <USBD_StdEPReq+0x112>
 8008890:	e13e      	b.n	8008b10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b02      	cmp	r3, #2
 800889c:	d002      	beq.n	80088a4 <USBD_StdEPReq+0xac>
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d016      	beq.n	80088d0 <USBD_StdEPReq+0xd8>
 80088a2:	e02c      	b.n	80088fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088a4:	7bbb      	ldrb	r3, [r7, #14]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00d      	beq.n	80088c6 <USBD_StdEPReq+0xce>
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b80      	cmp	r3, #128	; 0x80
 80088ae:	d00a      	beq.n	80088c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 f973 	bl	8009ba0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ba:	2180      	movs	r1, #128	; 0x80
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f001 f96f 	bl	8009ba0 <USBD_LL_StallEP>
 80088c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088c4:	e020      	b.n	8008908 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fc7a 	bl	80091c2 <USBD_CtlError>
              break;
 80088ce:	e01b      	b.n	8008908 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	885b      	ldrh	r3, [r3, #2]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10e      	bne.n	80088f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00b      	beq.n	80088f6 <USBD_StdEPReq+0xfe>
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	2b80      	cmp	r3, #128	; 0x80
 80088e2:	d008      	beq.n	80088f6 <USBD_StdEPReq+0xfe>
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	88db      	ldrh	r3, [r3, #6]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d104      	bne.n	80088f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 f955 	bl	8009ba0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fd2e 	bl	8009358 <USBD_CtlSendStatus>

              break;
 80088fc:	e004      	b.n	8008908 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fc5e 	bl	80091c2 <USBD_CtlError>
              break;
 8008906:	bf00      	nop
          }
          break;
 8008908:	e107      	b.n	8008b1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b02      	cmp	r3, #2
 8008914:	d002      	beq.n	800891c <USBD_StdEPReq+0x124>
 8008916:	2b03      	cmp	r3, #3
 8008918:	d016      	beq.n	8008948 <USBD_StdEPReq+0x150>
 800891a:	e04b      	b.n	80089b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00d      	beq.n	800893e <USBD_StdEPReq+0x146>
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b80      	cmp	r3, #128	; 0x80
 8008926:	d00a      	beq.n	800893e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 f937 	bl	8009ba0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008932:	2180      	movs	r1, #128	; 0x80
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f001 f933 	bl	8009ba0 <USBD_LL_StallEP>
 800893a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800893c:	e040      	b.n	80089c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fc3e 	bl	80091c2 <USBD_CtlError>
              break;
 8008946:	e03b      	b.n	80089c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	885b      	ldrh	r3, [r3, #2]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d136      	bne.n	80089be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008950:	7bbb      	ldrb	r3, [r7, #14]
 8008952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008956:	2b00      	cmp	r3, #0
 8008958:	d004      	beq.n	8008964 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f001 f93d 	bl	8009bde <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fcf7 	bl	8009358 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800896a:	7bbb      	ldrb	r3, [r7, #14]
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff fde2 	bl	8008538 <USBD_CoreFindEP>
 8008974:	4603      	mov	r3, r0
 8008976:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008978:	7b7b      	ldrb	r3, [r7, #13]
 800897a:	2bff      	cmp	r3, #255	; 0xff
 800897c:	d01f      	beq.n	80089be <USBD_StdEPReq+0x1c6>
 800897e:	7b7b      	ldrb	r3, [r7, #13]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d11c      	bne.n	80089be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008984:	7b7a      	ldrb	r2, [r7, #13]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800898c:	7b7a      	ldrb	r2, [r7, #13]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	32ae      	adds	r2, #174	; 0xae
 8008992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d010      	beq.n	80089be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800899c:	7b7a      	ldrb	r2, [r7, #13]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	32ae      	adds	r2, #174	; 0xae
 80089a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	4798      	blx	r3
 80089ae:	4603      	mov	r3, r0
 80089b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80089b2:	e004      	b.n	80089be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fc03 	bl	80091c2 <USBD_CtlError>
              break;
 80089bc:	e000      	b.n	80089c0 <USBD_StdEPReq+0x1c8>
              break;
 80089be:	bf00      	nop
          }
          break;
 80089c0:	e0ab      	b.n	8008b1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d002      	beq.n	80089d4 <USBD_StdEPReq+0x1dc>
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d032      	beq.n	8008a38 <USBD_StdEPReq+0x240>
 80089d2:	e097      	b.n	8008b04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d007      	beq.n	80089ea <USBD_StdEPReq+0x1f2>
 80089da:	7bbb      	ldrb	r3, [r7, #14]
 80089dc:	2b80      	cmp	r3, #128	; 0x80
 80089de:	d004      	beq.n	80089ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fbed 	bl	80091c2 <USBD_CtlError>
                break;
 80089e8:	e091      	b.n	8008b0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	da0b      	bge.n	8008a0a <USBD_StdEPReq+0x212>
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
 80089f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089f8:	4613      	mov	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	3310      	adds	r3, #16
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	4413      	add	r3, r2
 8008a06:	3304      	adds	r3, #4
 8008a08:	e00b      	b.n	8008a22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a0a:	7bbb      	ldrb	r3, [r7, #14]
 8008a0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a10:	4613      	mov	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	4413      	add	r3, r2
 8008a20:	3304      	adds	r3, #4
 8008a22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2200      	movs	r2, #0
 8008a28:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fc37 	bl	80092a4 <USBD_CtlSendData>
              break;
 8008a36:	e06a      	b.n	8008b0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	da11      	bge.n	8008a64 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	f003 020f 	and.w	r2, r3, #15
 8008a46:	6879      	ldr	r1, [r7, #4]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	440b      	add	r3, r1
 8008a52:	3324      	adds	r3, #36	; 0x24
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d117      	bne.n	8008a8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fbb0 	bl	80091c2 <USBD_CtlError>
                  break;
 8008a62:	e054      	b.n	8008b0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	f003 020f 	and.w	r2, r3, #15
 8008a6a:	6879      	ldr	r1, [r7, #4]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	440b      	add	r3, r1
 8008a76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d104      	bne.n	8008a8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fb9d 	bl	80091c2 <USBD_CtlError>
                  break;
 8008a88:	e041      	b.n	8008b0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	da0b      	bge.n	8008aaa <USBD_StdEPReq+0x2b2>
 8008a92:	7bbb      	ldrb	r3, [r7, #14]
 8008a94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a98:	4613      	mov	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	4413      	add	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	3310      	adds	r3, #16
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	3304      	adds	r3, #4
 8008aa8:	e00b      	b.n	8008ac2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	4413      	add	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	4413      	add	r3, r2
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <USBD_StdEPReq+0x2d8>
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	2b80      	cmp	r3, #128	; 0x80
 8008ace:	d103      	bne.n	8008ad8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	e00e      	b.n	8008af6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ad8:	7bbb      	ldrb	r3, [r7, #14]
 8008ada:	4619      	mov	r1, r3
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 f89d 	bl	8009c1c <USBD_LL_IsStallEP>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d003      	beq.n	8008af0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2201      	movs	r2, #1
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	e002      	b.n	8008af6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2200      	movs	r2, #0
 8008af4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2202      	movs	r2, #2
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fbd1 	bl	80092a4 <USBD_CtlSendData>
              break;
 8008b02:	e004      	b.n	8008b0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fb5b 	bl	80091c2 <USBD_CtlError>
              break;
 8008b0c:	bf00      	nop
          }
          break;
 8008b0e:	e004      	b.n	8008b1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fb55 	bl	80091c2 <USBD_CtlError>
          break;
 8008b18:	bf00      	nop
      }
      break;
 8008b1a:	e005      	b.n	8008b28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fb4f 	bl	80091c2 <USBD_CtlError>
      break;
 8008b24:	e000      	b.n	8008b28 <USBD_StdEPReq+0x330>
      break;
 8008b26:	bf00      	nop
  }

  return ret;
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
	...

08008b34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b42:	2300      	movs	r3, #0
 8008b44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	885b      	ldrh	r3, [r3, #2]
 8008b4e:	0a1b      	lsrs	r3, r3, #8
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	3b01      	subs	r3, #1
 8008b54:	2b06      	cmp	r3, #6
 8008b56:	f200 8128 	bhi.w	8008daa <USBD_GetDescriptor+0x276>
 8008b5a:	a201      	add	r2, pc, #4	; (adr r2, 8008b60 <USBD_GetDescriptor+0x2c>)
 8008b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b60:	08008b7d 	.word	0x08008b7d
 8008b64:	08008b95 	.word	0x08008b95
 8008b68:	08008bd5 	.word	0x08008bd5
 8008b6c:	08008dab 	.word	0x08008dab
 8008b70:	08008dab 	.word	0x08008dab
 8008b74:	08008d4b 	.word	0x08008d4b
 8008b78:	08008d77 	.word	0x08008d77
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	7c12      	ldrb	r2, [r2, #16]
 8008b88:	f107 0108 	add.w	r1, r7, #8
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	4798      	blx	r3
 8008b90:	60f8      	str	r0, [r7, #12]
      break;
 8008b92:	e112      	b.n	8008dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	7c1b      	ldrb	r3, [r3, #16]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10d      	bne.n	8008bb8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba4:	f107 0208 	add.w	r2, r7, #8
 8008ba8:	4610      	mov	r0, r2
 8008baa:	4798      	blx	r3
 8008bac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bb6:	e100      	b.n	8008dba <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc0:	f107 0208 	add.w	r2, r7, #8
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	4798      	blx	r3
 8008bc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	2202      	movs	r2, #2
 8008bd0:	701a      	strb	r2, [r3, #0]
      break;
 8008bd2:	e0f2      	b.n	8008dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	885b      	ldrh	r3, [r3, #2]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b05      	cmp	r3, #5
 8008bdc:	f200 80ac 	bhi.w	8008d38 <USBD_GetDescriptor+0x204>
 8008be0:	a201      	add	r2, pc, #4	; (adr r2, 8008be8 <USBD_GetDescriptor+0xb4>)
 8008be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be6:	bf00      	nop
 8008be8:	08008c01 	.word	0x08008c01
 8008bec:	08008c35 	.word	0x08008c35
 8008bf0:	08008c69 	.word	0x08008c69
 8008bf4:	08008c9d 	.word	0x08008c9d
 8008bf8:	08008cd1 	.word	0x08008cd1
 8008bfc:	08008d05 	.word	0x08008d05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00b      	beq.n	8008c24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	7c12      	ldrb	r2, [r2, #16]
 8008c18:	f107 0108 	add.w	r1, r7, #8
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	4798      	blx	r3
 8008c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c22:	e091      	b.n	8008d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 facb 	bl	80091c2 <USBD_CtlError>
            err++;
 8008c2c:	7afb      	ldrb	r3, [r7, #11]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	72fb      	strb	r3, [r7, #11]
          break;
 8008c32:	e089      	b.n	8008d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00b      	beq.n	8008c58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	7c12      	ldrb	r2, [r2, #16]
 8008c4c:	f107 0108 	add.w	r1, r7, #8
 8008c50:	4610      	mov	r0, r2
 8008c52:	4798      	blx	r3
 8008c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c56:	e077      	b.n	8008d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fab1 	bl	80091c2 <USBD_CtlError>
            err++;
 8008c60:	7afb      	ldrb	r3, [r7, #11]
 8008c62:	3301      	adds	r3, #1
 8008c64:	72fb      	strb	r3, [r7, #11]
          break;
 8008c66:	e06f      	b.n	8008d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00b      	beq.n	8008c8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	7c12      	ldrb	r2, [r2, #16]
 8008c80:	f107 0108 	add.w	r1, r7, #8
 8008c84:	4610      	mov	r0, r2
 8008c86:	4798      	blx	r3
 8008c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c8a:	e05d      	b.n	8008d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fa97 	bl	80091c2 <USBD_CtlError>
            err++;
 8008c94:	7afb      	ldrb	r3, [r7, #11]
 8008c96:	3301      	adds	r3, #1
 8008c98:	72fb      	strb	r3, [r7, #11]
          break;
 8008c9a:	e055      	b.n	8008d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00b      	beq.n	8008cc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	7c12      	ldrb	r2, [r2, #16]
 8008cb4:	f107 0108 	add.w	r1, r7, #8
 8008cb8:	4610      	mov	r0, r2
 8008cba:	4798      	blx	r3
 8008cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cbe:	e043      	b.n	8008d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fa7d 	bl	80091c2 <USBD_CtlError>
            err++;
 8008cc8:	7afb      	ldrb	r3, [r7, #11]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8008cce:	e03b      	b.n	8008d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00b      	beq.n	8008cf4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	7c12      	ldrb	r2, [r2, #16]
 8008ce8:	f107 0108 	add.w	r1, r7, #8
 8008cec:	4610      	mov	r0, r2
 8008cee:	4798      	blx	r3
 8008cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cf2:	e029      	b.n	8008d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fa63 	bl	80091c2 <USBD_CtlError>
            err++;
 8008cfc:	7afb      	ldrb	r3, [r7, #11]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	72fb      	strb	r3, [r7, #11]
          break;
 8008d02:	e021      	b.n	8008d48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00b      	beq.n	8008d28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	7c12      	ldrb	r2, [r2, #16]
 8008d1c:	f107 0108 	add.w	r1, r7, #8
 8008d20:	4610      	mov	r0, r2
 8008d22:	4798      	blx	r3
 8008d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d26:	e00f      	b.n	8008d48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fa49 	bl	80091c2 <USBD_CtlError>
            err++;
 8008d30:	7afb      	ldrb	r3, [r7, #11]
 8008d32:	3301      	adds	r3, #1
 8008d34:	72fb      	strb	r3, [r7, #11]
          break;
 8008d36:	e007      	b.n	8008d48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fa41 	bl	80091c2 <USBD_CtlError>
          err++;
 8008d40:	7afb      	ldrb	r3, [r7, #11]
 8008d42:	3301      	adds	r3, #1
 8008d44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008d46:	bf00      	nop
      }
      break;
 8008d48:	e037      	b.n	8008dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	7c1b      	ldrb	r3, [r3, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d109      	bne.n	8008d66 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d5a:	f107 0208 	add.w	r2, r7, #8
 8008d5e:	4610      	mov	r0, r2
 8008d60:	4798      	blx	r3
 8008d62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d64:	e029      	b.n	8008dba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fa2a 	bl	80091c2 <USBD_CtlError>
        err++;
 8008d6e:	7afb      	ldrb	r3, [r7, #11]
 8008d70:	3301      	adds	r3, #1
 8008d72:	72fb      	strb	r3, [r7, #11]
      break;
 8008d74:	e021      	b.n	8008dba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	7c1b      	ldrb	r3, [r3, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10d      	bne.n	8008d9a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d86:	f107 0208 	add.w	r2, r7, #8
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	4798      	blx	r3
 8008d8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	3301      	adds	r3, #1
 8008d94:	2207      	movs	r2, #7
 8008d96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d98:	e00f      	b.n	8008dba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fa10 	bl	80091c2 <USBD_CtlError>
        err++;
 8008da2:	7afb      	ldrb	r3, [r7, #11]
 8008da4:	3301      	adds	r3, #1
 8008da6:	72fb      	strb	r3, [r7, #11]
      break;
 8008da8:	e007      	b.n	8008dba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fa08 	bl	80091c2 <USBD_CtlError>
      err++;
 8008db2:	7afb      	ldrb	r3, [r7, #11]
 8008db4:	3301      	adds	r3, #1
 8008db6:	72fb      	strb	r3, [r7, #11]
      break;
 8008db8:	bf00      	nop
  }

  if (err != 0U)
 8008dba:	7afb      	ldrb	r3, [r7, #11]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d11e      	bne.n	8008dfe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	88db      	ldrh	r3, [r3, #6]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d016      	beq.n	8008df6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008dc8:	893b      	ldrh	r3, [r7, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00e      	beq.n	8008dec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	88da      	ldrh	r2, [r3, #6]
 8008dd2:	893b      	ldrh	r3, [r7, #8]
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	bf28      	it	cs
 8008dd8:	4613      	movcs	r3, r2
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008dde:	893b      	ldrh	r3, [r7, #8]
 8008de0:	461a      	mov	r2, r3
 8008de2:	68f9      	ldr	r1, [r7, #12]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fa5d 	bl	80092a4 <USBD_CtlSendData>
 8008dea:	e009      	b.n	8008e00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f9e7 	bl	80091c2 <USBD_CtlError>
 8008df4:	e004      	b.n	8008e00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 faae 	bl	8009358 <USBD_CtlSendStatus>
 8008dfc:	e000      	b.n	8008e00 <USBD_GetDescriptor+0x2cc>
    return;
 8008dfe:	bf00      	nop
  }
}
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop

08008e08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	889b      	ldrh	r3, [r3, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d131      	bne.n	8008e7e <USBD_SetAddress+0x76>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	88db      	ldrh	r3, [r3, #6]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d12d      	bne.n	8008e7e <USBD_SetAddress+0x76>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	885b      	ldrh	r3, [r3, #2]
 8008e26:	2b7f      	cmp	r3, #127	; 0x7f
 8008e28:	d829      	bhi.n	8008e7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	885b      	ldrh	r3, [r3, #2]
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	d104      	bne.n	8008e4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f9bc 	bl	80091c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e4a:	e01d      	b.n	8008e88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	7bfa      	ldrb	r2, [r7, #15]
 8008e50:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 ff0b 	bl	8009c74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fa7a 	bl	8009358 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d004      	beq.n	8008e74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e72:	e009      	b.n	8008e88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e7c:	e004      	b.n	8008e88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f99e 	bl	80091c2 <USBD_CtlError>
  }
}
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	885b      	ldrh	r3, [r3, #2]
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	4b4e      	ldr	r3, [pc, #312]	; (8008fe0 <USBD_SetConfig+0x150>)
 8008ea6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ea8:	4b4d      	ldr	r3, [pc, #308]	; (8008fe0 <USBD_SetConfig+0x150>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d905      	bls.n	8008ebc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f985 	bl	80091c2 <USBD_CtlError>
    return USBD_FAIL;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e08c      	b.n	8008fd6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d002      	beq.n	8008ece <USBD_SetConfig+0x3e>
 8008ec8:	2b03      	cmp	r3, #3
 8008eca:	d029      	beq.n	8008f20 <USBD_SetConfig+0x90>
 8008ecc:	e075      	b.n	8008fba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008ece:	4b44      	ldr	r3, [pc, #272]	; (8008fe0 <USBD_SetConfig+0x150>)
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d020      	beq.n	8008f18 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008ed6:	4b42      	ldr	r3, [pc, #264]	; (8008fe0 <USBD_SetConfig+0x150>)
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	461a      	mov	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ee0:	4b3f      	ldr	r3, [pc, #252]	; (8008fe0 <USBD_SetConfig+0x150>)
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7fe ffe7 	bl	8007eba <USBD_SetClassConfig>
 8008eec:	4603      	mov	r3, r0
 8008eee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d008      	beq.n	8008f08 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f962 	bl	80091c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2202      	movs	r2, #2
 8008f02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f06:	e065      	b.n	8008fd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fa25 	bl	8009358 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2203      	movs	r2, #3
 8008f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f16:	e05d      	b.n	8008fd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fa1d 	bl	8009358 <USBD_CtlSendStatus>
      break;
 8008f1e:	e059      	b.n	8008fd4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f20:	4b2f      	ldr	r3, [pc, #188]	; (8008fe0 <USBD_SetConfig+0x150>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d112      	bne.n	8008f4e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008f30:	4b2b      	ldr	r3, [pc, #172]	; (8008fe0 <USBD_SetConfig+0x150>)
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	461a      	mov	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f3a:	4b29      	ldr	r3, [pc, #164]	; (8008fe0 <USBD_SetConfig+0x150>)
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7fe ffd6 	bl	8007ef2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa06 	bl	8009358 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f4c:	e042      	b.n	8008fd4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008f4e:	4b24      	ldr	r3, [pc, #144]	; (8008fe0 <USBD_SetConfig+0x150>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	461a      	mov	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d02a      	beq.n	8008fb2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7fe ffc4 	bl	8007ef2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f6a:	4b1d      	ldr	r3, [pc, #116]	; (8008fe0 <USBD_SetConfig+0x150>)
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f74:	4b1a      	ldr	r3, [pc, #104]	; (8008fe0 <USBD_SetConfig+0x150>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7fe ff9d 	bl	8007eba <USBD_SetClassConfig>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00f      	beq.n	8008faa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008f8a:	6839      	ldr	r1, [r7, #0]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f918 	bl	80091c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7fe ffa9 	bl	8007ef2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008fa8:	e014      	b.n	8008fd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f9d4 	bl	8009358 <USBD_CtlSendStatus>
      break;
 8008fb0:	e010      	b.n	8008fd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f9d0 	bl	8009358 <USBD_CtlSendStatus>
      break;
 8008fb8:	e00c      	b.n	8008fd4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f900 	bl	80091c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fc2:	4b07      	ldr	r3, [pc, #28]	; (8008fe0 <USBD_SetConfig+0x150>)
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7fe ff92 	bl	8007ef2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008fd2:	bf00      	nop
  }

  return ret;
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	20000468 	.word	0x20000468

08008fe4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	88db      	ldrh	r3, [r3, #6]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d004      	beq.n	8009000 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f8e2 	bl	80091c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ffe:	e023      	b.n	8009048 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b02      	cmp	r3, #2
 800900a:	dc02      	bgt.n	8009012 <USBD_GetConfig+0x2e>
 800900c:	2b00      	cmp	r3, #0
 800900e:	dc03      	bgt.n	8009018 <USBD_GetConfig+0x34>
 8009010:	e015      	b.n	800903e <USBD_GetConfig+0x5a>
 8009012:	2b03      	cmp	r3, #3
 8009014:	d00b      	beq.n	800902e <USBD_GetConfig+0x4a>
 8009016:	e012      	b.n	800903e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3308      	adds	r3, #8
 8009022:	2201      	movs	r2, #1
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f93c 	bl	80092a4 <USBD_CtlSendData>
        break;
 800902c:	e00c      	b.n	8009048 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3304      	adds	r3, #4
 8009032:	2201      	movs	r2, #1
 8009034:	4619      	mov	r1, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f934 	bl	80092a4 <USBD_CtlSendData>
        break;
 800903c:	e004      	b.n	8009048 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f8be 	bl	80091c2 <USBD_CtlError>
        break;
 8009046:	bf00      	nop
}
 8009048:	bf00      	nop
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009060:	b2db      	uxtb	r3, r3
 8009062:	3b01      	subs	r3, #1
 8009064:	2b02      	cmp	r3, #2
 8009066:	d81e      	bhi.n	80090a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	88db      	ldrh	r3, [r3, #6]
 800906c:	2b02      	cmp	r3, #2
 800906e:	d004      	beq.n	800907a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f8a5 	bl	80091c2 <USBD_CtlError>
        break;
 8009078:	e01a      	b.n	80090b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009086:	2b00      	cmp	r3, #0
 8009088:	d005      	beq.n	8009096 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f043 0202 	orr.w	r2, r3, #2
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	330c      	adds	r3, #12
 800909a:	2202      	movs	r2, #2
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f900 	bl	80092a4 <USBD_CtlSendData>
      break;
 80090a4:	e004      	b.n	80090b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f88a 	bl	80091c2 <USBD_CtlError>
      break;
 80090ae:	bf00      	nop
  }
}
 80090b0:	bf00      	nop
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	885b      	ldrh	r3, [r3, #2]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d107      	bne.n	80090da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f940 	bl	8009358 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80090d8:	e013      	b.n	8009102 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	885b      	ldrh	r3, [r3, #2]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d10b      	bne.n	80090fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	889b      	ldrh	r3, [r3, #4]
 80090e6:	0a1b      	lsrs	r3, r3, #8
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f930 	bl	8009358 <USBD_CtlSendStatus>
}
 80090f8:	e003      	b.n	8009102 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f860 	bl	80091c2 <USBD_CtlError>
}
 8009102:	bf00      	nop
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911a:	b2db      	uxtb	r3, r3
 800911c:	3b01      	subs	r3, #1
 800911e:	2b02      	cmp	r3, #2
 8009120:	d80b      	bhi.n	800913a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	885b      	ldrh	r3, [r3, #2]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d10c      	bne.n	8009144 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f910 	bl	8009358 <USBD_CtlSendStatus>
      }
      break;
 8009138:	e004      	b.n	8009144 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f840 	bl	80091c2 <USBD_CtlError>
      break;
 8009142:	e000      	b.n	8009146 <USBD_ClrFeature+0x3c>
      break;
 8009144:	bf00      	nop
  }
}
 8009146:	bf00      	nop
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	781a      	ldrb	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	3301      	adds	r3, #1
 8009168:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	781a      	ldrb	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	3301      	adds	r3, #1
 8009176:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f7ff fa41 	bl	8008600 <SWAPBYTE>
 800917e:	4603      	mov	r3, r0
 8009180:	461a      	mov	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	3301      	adds	r3, #1
 800918a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3301      	adds	r3, #1
 8009190:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f7ff fa34 	bl	8008600 <SWAPBYTE>
 8009198:	4603      	mov	r3, r0
 800919a:	461a      	mov	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3301      	adds	r3, #1
 80091a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3301      	adds	r3, #1
 80091aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f7ff fa27 	bl	8008600 <SWAPBYTE>
 80091b2:	4603      	mov	r3, r0
 80091b4:	461a      	mov	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	80da      	strh	r2, [r3, #6]
}
 80091ba:	bf00      	nop
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b082      	sub	sp, #8
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091cc:	2180      	movs	r1, #128	; 0x80
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fce6 	bl	8009ba0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091d4:	2100      	movs	r1, #0
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fce2 	bl	8009ba0 <USBD_LL_StallEP>
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091f0:	2300      	movs	r3, #0
 80091f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d036      	beq.n	8009268 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80091fe:	6938      	ldr	r0, [r7, #16]
 8009200:	f000 f836 	bl	8009270 <USBD_GetLen>
 8009204:	4603      	mov	r3, r0
 8009206:	3301      	adds	r3, #1
 8009208:	b29b      	uxth	r3, r3
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	b29a      	uxth	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	4413      	add	r3, r2
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	7812      	ldrb	r2, [r2, #0]
 800921c:	701a      	strb	r2, [r3, #0]
  idx++;
 800921e:	7dfb      	ldrb	r3, [r7, #23]
 8009220:	3301      	adds	r3, #1
 8009222:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009224:	7dfb      	ldrb	r3, [r7, #23]
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	4413      	add	r3, r2
 800922a:	2203      	movs	r2, #3
 800922c:	701a      	strb	r2, [r3, #0]
  idx++;
 800922e:	7dfb      	ldrb	r3, [r7, #23]
 8009230:	3301      	adds	r3, #1
 8009232:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009234:	e013      	b.n	800925e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009236:	7dfb      	ldrb	r3, [r7, #23]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	4413      	add	r3, r2
 800923c:	693a      	ldr	r2, [r7, #16]
 800923e:	7812      	ldrb	r2, [r2, #0]
 8009240:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	3301      	adds	r3, #1
 8009246:	613b      	str	r3, [r7, #16]
    idx++;
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	3301      	adds	r3, #1
 800924c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800924e:	7dfb      	ldrb	r3, [r7, #23]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	4413      	add	r3, r2
 8009254:	2200      	movs	r2, #0
 8009256:	701a      	strb	r2, [r3, #0]
    idx++;
 8009258:	7dfb      	ldrb	r3, [r7, #23]
 800925a:	3301      	adds	r3, #1
 800925c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e7      	bne.n	8009236 <USBD_GetString+0x52>
 8009266:	e000      	b.n	800926a <USBD_GetString+0x86>
    return;
 8009268:	bf00      	nop
  }
}
 800926a:	3718      	adds	r7, #24
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009278:	2300      	movs	r3, #0
 800927a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009280:	e005      	b.n	800928e <USBD_GetLen+0x1e>
  {
    len++;
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	3301      	adds	r3, #1
 8009286:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	3301      	adds	r3, #1
 800928c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1f5      	bne.n	8009282 <USBD_GetLen+0x12>
  }

  return len;
 8009296:	7bfb      	ldrb	r3, [r7, #15]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2202      	movs	r2, #2
 80092b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	2100      	movs	r1, #0
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f000 fcf1 	bl	8009cb2 <USBD_LL_Transmit>

  return USBD_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b084      	sub	sp, #16
 80092de:	af00      	add	r7, sp, #0
 80092e0:	60f8      	str	r0, [r7, #12]
 80092e2:	60b9      	str	r1, [r7, #8]
 80092e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	2100      	movs	r1, #0
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 fce0 	bl	8009cb2 <USBD_LL_Transmit>

  return USBD_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2203      	movs	r2, #3
 800930c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	2100      	movs	r1, #0
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f000 fce4 	bl	8009cf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b084      	sub	sp, #16
 800933a:	af00      	add	r7, sp, #0
 800933c:	60f8      	str	r0, [r7, #12]
 800933e:	60b9      	str	r1, [r7, #8]
 8009340:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	2100      	movs	r1, #0
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 fcd3 	bl	8009cf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2204      	movs	r2, #4
 8009364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009368:	2300      	movs	r3, #0
 800936a:	2200      	movs	r2, #0
 800936c:	2100      	movs	r1, #0
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fc9f 	bl	8009cb2 <USBD_LL_Transmit>

  return USBD_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2205      	movs	r2, #5
 800938a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800938e:	2300      	movs	r3, #0
 8009390:	2200      	movs	r2, #0
 8009392:	2100      	movs	r1, #0
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fcad 	bl	8009cf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80093a8:	2200      	movs	r2, #0
 80093aa:	4912      	ldr	r1, [pc, #72]	; (80093f4 <MX_USB_DEVICE_Init+0x50>)
 80093ac:	4812      	ldr	r0, [pc, #72]	; (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093ae:	f7fe fd07 	bl	8007dc0 <USBD_Init>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80093b8:	f7f8 fe8c 	bl	80020d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80093bc:	490f      	ldr	r1, [pc, #60]	; (80093fc <MX_USB_DEVICE_Init+0x58>)
 80093be:	480e      	ldr	r0, [pc, #56]	; (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093c0:	f7fe fd2e 	bl	8007e20 <USBD_RegisterClass>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093ca:	f7f8 fe83 	bl	80020d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80093ce:	490c      	ldr	r1, [pc, #48]	; (8009400 <MX_USB_DEVICE_Init+0x5c>)
 80093d0:	4809      	ldr	r0, [pc, #36]	; (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093d2:	f7fe fc1f 	bl	8007c14 <USBD_CDC_RegisterInterface>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80093dc:	f7f8 fe7a 	bl	80020d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093e0:	4805      	ldr	r0, [pc, #20]	; (80093f8 <MX_USB_DEVICE_Init+0x54>)
 80093e2:	f7fe fd53 	bl	8007e8c <USBD_Start>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80093ec:	f7f8 fe72 	bl	80020d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093f0:	bf00      	nop
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	200000ec 	.word	0x200000ec
 80093f8:	2000046c 	.word	0x2000046c
 80093fc:	20000058 	.word	0x20000058
 8009400:	200000d8 	.word	0x200000d8

08009404 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009408:	2200      	movs	r2, #0
 800940a:	4905      	ldr	r1, [pc, #20]	; (8009420 <CDC_Init_FS+0x1c>)
 800940c:	4805      	ldr	r0, [pc, #20]	; (8009424 <CDC_Init_FS+0x20>)
 800940e:	f7fe fc1b 	bl	8007c48 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009412:	4905      	ldr	r1, [pc, #20]	; (8009428 <CDC_Init_FS+0x24>)
 8009414:	4803      	ldr	r0, [pc, #12]	; (8009424 <CDC_Init_FS+0x20>)
 8009416:	f7fe fc39 	bl	8007c8c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800941a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800941c:	4618      	mov	r0, r3
 800941e:	bd80      	pop	{r7, pc}
 8009420:	20000f48 	.word	0x20000f48
 8009424:	2000046c 	.word	0x2000046c
 8009428:	20000748 	.word	0x20000748

0800942c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800942c:	b480      	push	{r7}
 800942e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009430:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009432:	4618      	mov	r0, r3
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	6039      	str	r1, [r7, #0]
 8009446:	71fb      	strb	r3, [r7, #7]
 8009448:	4613      	mov	r3, r2
 800944a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	2b23      	cmp	r3, #35	; 0x23
 8009450:	d84a      	bhi.n	80094e8 <CDC_Control_FS+0xac>
 8009452:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <CDC_Control_FS+0x1c>)
 8009454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009458:	080094e9 	.word	0x080094e9
 800945c:	080094e9 	.word	0x080094e9
 8009460:	080094e9 	.word	0x080094e9
 8009464:	080094e9 	.word	0x080094e9
 8009468:	080094e9 	.word	0x080094e9
 800946c:	080094e9 	.word	0x080094e9
 8009470:	080094e9 	.word	0x080094e9
 8009474:	080094e9 	.word	0x080094e9
 8009478:	080094e9 	.word	0x080094e9
 800947c:	080094e9 	.word	0x080094e9
 8009480:	080094e9 	.word	0x080094e9
 8009484:	080094e9 	.word	0x080094e9
 8009488:	080094e9 	.word	0x080094e9
 800948c:	080094e9 	.word	0x080094e9
 8009490:	080094e9 	.word	0x080094e9
 8009494:	080094e9 	.word	0x080094e9
 8009498:	080094e9 	.word	0x080094e9
 800949c:	080094e9 	.word	0x080094e9
 80094a0:	080094e9 	.word	0x080094e9
 80094a4:	080094e9 	.word	0x080094e9
 80094a8:	080094e9 	.word	0x080094e9
 80094ac:	080094e9 	.word	0x080094e9
 80094b0:	080094e9 	.word	0x080094e9
 80094b4:	080094e9 	.word	0x080094e9
 80094b8:	080094e9 	.word	0x080094e9
 80094bc:	080094e9 	.word	0x080094e9
 80094c0:	080094e9 	.word	0x080094e9
 80094c4:	080094e9 	.word	0x080094e9
 80094c8:	080094e9 	.word	0x080094e9
 80094cc:	080094e9 	.word	0x080094e9
 80094d0:	080094e9 	.word	0x080094e9
 80094d4:	080094e9 	.word	0x080094e9
 80094d8:	080094e9 	.word	0x080094e9
 80094dc:	080094e9 	.word	0x080094e9
 80094e0:	080094e9 	.word	0x080094e9
 80094e4:	080094e9 	.word	0x080094e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80094e8:	bf00      	nop
  }

  return (USBD_OK);
 80094ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009502:	6879      	ldr	r1, [r7, #4]
 8009504:	4808      	ldr	r0, [pc, #32]	; (8009528 <CDC_Receive_FS+0x30>)
 8009506:	f7fe fbc1 	bl	8007c8c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800950a:	4807      	ldr	r0, [pc, #28]	; (8009528 <CDC_Receive_FS+0x30>)
 800950c:	f7fe fc22 	bl	8007d54 <USBD_CDC_ReceivePacket>
  ProcessUSBCommand((char*)Buf, *Len);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7f8 f9b4 	bl	8001884 <ProcessUSBCommand>
  return (USBD_OK);
 800951c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	2000046c 	.word	0x2000046c

0800952c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	460b      	mov	r3, r1
 8009536:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800953c:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <CDC_Transmit_FS+0x48>)
 800953e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009542:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800954a:	2b00      	cmp	r3, #0
 800954c:	d001      	beq.n	8009552 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800954e:	2301      	movs	r3, #1
 8009550:	e00b      	b.n	800956a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009552:	887b      	ldrh	r3, [r7, #2]
 8009554:	461a      	mov	r2, r3
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	4806      	ldr	r0, [pc, #24]	; (8009574 <CDC_Transmit_FS+0x48>)
 800955a:	f7fe fb75 	bl	8007c48 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800955e:	4805      	ldr	r0, [pc, #20]	; (8009574 <CDC_Transmit_FS+0x48>)
 8009560:	f7fe fbb2 	bl	8007cc8 <USBD_CDC_TransmitPacket>
 8009564:	4603      	mov	r3, r0
 8009566:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009568:	7bfb      	ldrb	r3, [r7, #15]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	2000046c 	.word	0x2000046c

08009578 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	4613      	mov	r3, r2
 8009584:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009586:	2300      	movs	r3, #0
 8009588:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800958a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800958e:	4618      	mov	r0, r3
 8009590:	371c      	adds	r7, #28
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
	...

0800959c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	4603      	mov	r3, r0
 80095a4:	6039      	str	r1, [r7, #0]
 80095a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2212      	movs	r2, #18
 80095ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80095ae:	4b03      	ldr	r3, [pc, #12]	; (80095bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	20000108 	.word	0x20000108

080095c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	4603      	mov	r3, r0
 80095c8:	6039      	str	r1, [r7, #0]
 80095ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2204      	movs	r2, #4
 80095d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095d2:	4b03      	ldr	r3, [pc, #12]	; (80095e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	2000011c 	.word	0x2000011c

080095e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	4603      	mov	r3, r0
 80095ec:	6039      	str	r1, [r7, #0]
 80095ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095f0:	79fb      	ldrb	r3, [r7, #7]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d105      	bne.n	8009602 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	4907      	ldr	r1, [pc, #28]	; (8009618 <USBD_FS_ProductStrDescriptor+0x34>)
 80095fa:	4808      	ldr	r0, [pc, #32]	; (800961c <USBD_FS_ProductStrDescriptor+0x38>)
 80095fc:	f7ff fdf2 	bl	80091e4 <USBD_GetString>
 8009600:	e004      	b.n	800960c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	4904      	ldr	r1, [pc, #16]	; (8009618 <USBD_FS_ProductStrDescriptor+0x34>)
 8009606:	4805      	ldr	r0, [pc, #20]	; (800961c <USBD_FS_ProductStrDescriptor+0x38>)
 8009608:	f7ff fdec 	bl	80091e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800960c:	4b02      	ldr	r3, [pc, #8]	; (8009618 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	20001748 	.word	0x20001748
 800961c:	0800ea58 	.word	0x0800ea58

08009620 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	4603      	mov	r3, r0
 8009628:	6039      	str	r1, [r7, #0]
 800962a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800962c:	683a      	ldr	r2, [r7, #0]
 800962e:	4904      	ldr	r1, [pc, #16]	; (8009640 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009630:	4804      	ldr	r0, [pc, #16]	; (8009644 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009632:	f7ff fdd7 	bl	80091e4 <USBD_GetString>
  return USBD_StrDesc;
 8009636:	4b02      	ldr	r3, [pc, #8]	; (8009640 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009638:	4618      	mov	r0, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	20001748 	.word	0x20001748
 8009644:	0800ea70 	.word	0x0800ea70

08009648 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	4603      	mov	r3, r0
 8009650:	6039      	str	r1, [r7, #0]
 8009652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	221a      	movs	r2, #26
 8009658:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800965a:	f000 f843 	bl	80096e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800965e:	4b02      	ldr	r3, [pc, #8]	; (8009668 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	20000120 	.word	0x20000120

0800966c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	4603      	mov	r3, r0
 8009674:	6039      	str	r1, [r7, #0]
 8009676:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009678:	79fb      	ldrb	r3, [r7, #7]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d105      	bne.n	800968a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	4907      	ldr	r1, [pc, #28]	; (80096a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009682:	4808      	ldr	r0, [pc, #32]	; (80096a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009684:	f7ff fdae 	bl	80091e4 <USBD_GetString>
 8009688:	e004      	b.n	8009694 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800968a:	683a      	ldr	r2, [r7, #0]
 800968c:	4904      	ldr	r1, [pc, #16]	; (80096a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800968e:	4805      	ldr	r0, [pc, #20]	; (80096a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009690:	f7ff fda8 	bl	80091e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009694:	4b02      	ldr	r3, [pc, #8]	; (80096a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	20001748 	.word	0x20001748
 80096a4:	0800ea84 	.word	0x0800ea84

080096a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	4603      	mov	r3, r0
 80096b0:	6039      	str	r1, [r7, #0]
 80096b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096b4:	79fb      	ldrb	r3, [r7, #7]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d105      	bne.n	80096c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096ba:	683a      	ldr	r2, [r7, #0]
 80096bc:	4907      	ldr	r1, [pc, #28]	; (80096dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096be:	4808      	ldr	r0, [pc, #32]	; (80096e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096c0:	f7ff fd90 	bl	80091e4 <USBD_GetString>
 80096c4:	e004      	b.n	80096d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	4904      	ldr	r1, [pc, #16]	; (80096dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096ca:	4805      	ldr	r0, [pc, #20]	; (80096e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096cc:	f7ff fd8a 	bl	80091e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096d0:	4b02      	ldr	r3, [pc, #8]	; (80096dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20001748 	.word	0x20001748
 80096e0:	0800ea90 	.word	0x0800ea90

080096e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096ea:	4b0f      	ldr	r3, [pc, #60]	; (8009728 <Get_SerialNum+0x44>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096f0:	4b0e      	ldr	r3, [pc, #56]	; (800972c <Get_SerialNum+0x48>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096f6:	4b0e      	ldr	r3, [pc, #56]	; (8009730 <Get_SerialNum+0x4c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4413      	add	r3, r2
 8009702:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d009      	beq.n	800971e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800970a:	2208      	movs	r2, #8
 800970c:	4909      	ldr	r1, [pc, #36]	; (8009734 <Get_SerialNum+0x50>)
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 f814 	bl	800973c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009714:	2204      	movs	r2, #4
 8009716:	4908      	ldr	r1, [pc, #32]	; (8009738 <Get_SerialNum+0x54>)
 8009718:	68b8      	ldr	r0, [r7, #8]
 800971a:	f000 f80f 	bl	800973c <IntToUnicode>
  }
}
 800971e:	bf00      	nop
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	1fff7a10 	.word	0x1fff7a10
 800972c:	1fff7a14 	.word	0x1fff7a14
 8009730:	1fff7a18 	.word	0x1fff7a18
 8009734:	20000122 	.word	0x20000122
 8009738:	20000132 	.word	0x20000132

0800973c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	4613      	mov	r3, r2
 8009748:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800974e:	2300      	movs	r3, #0
 8009750:	75fb      	strb	r3, [r7, #23]
 8009752:	e027      	b.n	80097a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	0f1b      	lsrs	r3, r3, #28
 8009758:	2b09      	cmp	r3, #9
 800975a:	d80b      	bhi.n	8009774 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	0f1b      	lsrs	r3, r3, #28
 8009760:	b2da      	uxtb	r2, r3
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	005b      	lsls	r3, r3, #1
 8009766:	4619      	mov	r1, r3
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	440b      	add	r3, r1
 800976c:	3230      	adds	r2, #48	; 0x30
 800976e:	b2d2      	uxtb	r2, r2
 8009770:	701a      	strb	r2, [r3, #0]
 8009772:	e00a      	b.n	800978a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	0f1b      	lsrs	r3, r3, #28
 8009778:	b2da      	uxtb	r2, r3
 800977a:	7dfb      	ldrb	r3, [r7, #23]
 800977c:	005b      	lsls	r3, r3, #1
 800977e:	4619      	mov	r1, r3
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	440b      	add	r3, r1
 8009784:	3237      	adds	r2, #55	; 0x37
 8009786:	b2d2      	uxtb	r2, r2
 8009788:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	011b      	lsls	r3, r3, #4
 800978e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009790:	7dfb      	ldrb	r3, [r7, #23]
 8009792:	005b      	lsls	r3, r3, #1
 8009794:	3301      	adds	r3, #1
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	4413      	add	r3, r2
 800979a:	2200      	movs	r2, #0
 800979c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	3301      	adds	r3, #1
 80097a2:	75fb      	strb	r3, [r7, #23]
 80097a4:	7dfa      	ldrb	r2, [r7, #23]
 80097a6:	79fb      	ldrb	r3, [r7, #7]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d3d3      	bcc.n	8009754 <IntToUnicode+0x18>
  }
}
 80097ac:	bf00      	nop
 80097ae:	bf00      	nop
 80097b0:	371c      	adds	r7, #28
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
	...

080097bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b08a      	sub	sp, #40	; 0x28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097c4:	f107 0314 	add.w	r3, r7, #20
 80097c8:	2200      	movs	r2, #0
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	605a      	str	r2, [r3, #4]
 80097ce:	609a      	str	r2, [r3, #8]
 80097d0:	60da      	str	r2, [r3, #12]
 80097d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097dc:	d13a      	bne.n	8009854 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097de:	2300      	movs	r3, #0
 80097e0:	613b      	str	r3, [r7, #16]
 80097e2:	4b1e      	ldr	r3, [pc, #120]	; (800985c <HAL_PCD_MspInit+0xa0>)
 80097e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e6:	4a1d      	ldr	r2, [pc, #116]	; (800985c <HAL_PCD_MspInit+0xa0>)
 80097e8:	f043 0301 	orr.w	r3, r3, #1
 80097ec:	6313      	str	r3, [r2, #48]	; 0x30
 80097ee:	4b1b      	ldr	r3, [pc, #108]	; (800985c <HAL_PCD_MspInit+0xa0>)
 80097f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	613b      	str	r3, [r7, #16]
 80097f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80097fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80097fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009800:	2302      	movs	r3, #2
 8009802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009804:	2300      	movs	r3, #0
 8009806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009808:	2303      	movs	r3, #3
 800980a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800980c:	230a      	movs	r3, #10
 800980e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009810:	f107 0314 	add.w	r3, r7, #20
 8009814:	4619      	mov	r1, r3
 8009816:	4812      	ldr	r0, [pc, #72]	; (8009860 <HAL_PCD_MspInit+0xa4>)
 8009818:	f7f9 fc40 	bl	800309c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800981c:	4b0f      	ldr	r3, [pc, #60]	; (800985c <HAL_PCD_MspInit+0xa0>)
 800981e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009820:	4a0e      	ldr	r2, [pc, #56]	; (800985c <HAL_PCD_MspInit+0xa0>)
 8009822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009826:	6353      	str	r3, [r2, #52]	; 0x34
 8009828:	2300      	movs	r3, #0
 800982a:	60fb      	str	r3, [r7, #12]
 800982c:	4b0b      	ldr	r3, [pc, #44]	; (800985c <HAL_PCD_MspInit+0xa0>)
 800982e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009830:	4a0a      	ldr	r2, [pc, #40]	; (800985c <HAL_PCD_MspInit+0xa0>)
 8009832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009836:	6453      	str	r3, [r2, #68]	; 0x44
 8009838:	4b08      	ldr	r3, [pc, #32]	; (800985c <HAL_PCD_MspInit+0xa0>)
 800983a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800983c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009840:	60fb      	str	r3, [r7, #12]
 8009842:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009844:	2200      	movs	r2, #0
 8009846:	2100      	movs	r1, #0
 8009848:	2043      	movs	r0, #67	; 0x43
 800984a:	f7f9 fbf0 	bl	800302e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800984e:	2043      	movs	r0, #67	; 0x43
 8009850:	f7f9 fc09 	bl	8003066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009854:	bf00      	nop
 8009856:	3728      	adds	r7, #40	; 0x28
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	40023800 	.word	0x40023800
 8009860:	40020000 	.word	0x40020000

08009864 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009878:	4619      	mov	r1, r3
 800987a:	4610      	mov	r0, r2
 800987c:	f7fe fb53 	bl	8007f26 <USBD_LL_SetupStage>
}
 8009880:	bf00      	nop
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800989a:	78fa      	ldrb	r2, [r7, #3]
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	4613      	mov	r3, r2
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	4413      	add	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	440b      	add	r3, r1
 80098a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	78fb      	ldrb	r3, [r7, #3]
 80098b0:	4619      	mov	r1, r3
 80098b2:	f7fe fb8d 	bl	8007fd0 <USBD_LL_DataOutStage>
}
 80098b6:	bf00      	nop
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b082      	sub	sp, #8
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	460b      	mov	r3, r1
 80098c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80098d0:	78fa      	ldrb	r2, [r7, #3]
 80098d2:	6879      	ldr	r1, [r7, #4]
 80098d4:	4613      	mov	r3, r2
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	4413      	add	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	440b      	add	r3, r1
 80098de:	334c      	adds	r3, #76	; 0x4c
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	78fb      	ldrb	r3, [r7, #3]
 80098e4:	4619      	mov	r1, r3
 80098e6:	f7fe fc26 	bl	8008136 <USBD_LL_DataInStage>
}
 80098ea:	bf00      	nop
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b082      	sub	sp, #8
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009900:	4618      	mov	r0, r3
 8009902:	f7fe fd5a 	bl	80083ba <USBD_LL_SOF>
}
 8009906:	bf00      	nop
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009916:	2301      	movs	r3, #1
 8009918:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d102      	bne.n	8009928 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009922:	2300      	movs	r3, #0
 8009924:	73fb      	strb	r3, [r7, #15]
 8009926:	e008      	b.n	800993a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	2b02      	cmp	r3, #2
 800992e:	d102      	bne.n	8009936 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009930:	2301      	movs	r3, #1
 8009932:	73fb      	strb	r3, [r7, #15]
 8009934:	e001      	b.n	800993a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009936:	f7f8 fbcd 	bl	80020d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009940:	7bfa      	ldrb	r2, [r7, #15]
 8009942:	4611      	mov	r1, r2
 8009944:	4618      	mov	r0, r3
 8009946:	f7fe fcfa 	bl	800833e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009950:	4618      	mov	r0, r3
 8009952:	f7fe fca2 	bl	800829a <USBD_LL_Reset>
}
 8009956:	bf00      	nop
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
	...

08009960 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800996e:	4618      	mov	r0, r3
 8009970:	f7fe fcf5 	bl	800835e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	6812      	ldr	r2, [r2, #0]
 8009982:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009986:	f043 0301 	orr.w	r3, r3, #1
 800998a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a1b      	ldr	r3, [r3, #32]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d005      	beq.n	80099a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009994:	4b04      	ldr	r3, [pc, #16]	; (80099a8 <HAL_PCD_SuspendCallback+0x48>)
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	4a03      	ldr	r2, [pc, #12]	; (80099a8 <HAL_PCD_SuspendCallback+0x48>)
 800999a:	f043 0306 	orr.w	r3, r3, #6
 800999e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80099a0:	bf00      	nop
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	e000ed00 	.word	0xe000ed00

080099ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fe fce5 	bl	800838a <USBD_LL_Resume>
}
 80099c0:	bf00      	nop
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099da:	78fa      	ldrb	r2, [r7, #3]
 80099dc:	4611      	mov	r1, r2
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fe fd3d 	bl	800845e <USBD_LL_IsoOUTIncomplete>
}
 80099e4:	bf00      	nop
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099fe:	78fa      	ldrb	r2, [r7, #3]
 8009a00:	4611      	mov	r1, r2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe fcf9 	bl	80083fa <USBD_LL_IsoINIncomplete>
}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fe fd4f 	bl	80084c2 <USBD_LL_DevConnected>
}
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fe fd4c 	bl	80084d8 <USBD_LL_DevDisconnected>
}
 8009a40:	bf00      	nop
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d13c      	bne.n	8009ad2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009a58:	4a20      	ldr	r2, [pc, #128]	; (8009adc <USBD_LL_Init+0x94>)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a1e      	ldr	r2, [pc, #120]	; (8009adc <USBD_LL_Init+0x94>)
 8009a64:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a68:	4b1c      	ldr	r3, [pc, #112]	; (8009adc <USBD_LL_Init+0x94>)
 8009a6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009a70:	4b1a      	ldr	r3, [pc, #104]	; (8009adc <USBD_LL_Init+0x94>)
 8009a72:	2204      	movs	r2, #4
 8009a74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009a76:	4b19      	ldr	r3, [pc, #100]	; (8009adc <USBD_LL_Init+0x94>)
 8009a78:	2202      	movs	r2, #2
 8009a7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009a7c:	4b17      	ldr	r3, [pc, #92]	; (8009adc <USBD_LL_Init+0x94>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a82:	4b16      	ldr	r3, [pc, #88]	; (8009adc <USBD_LL_Init+0x94>)
 8009a84:	2202      	movs	r2, #2
 8009a86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a88:	4b14      	ldr	r3, [pc, #80]	; (8009adc <USBD_LL_Init+0x94>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a8e:	4b13      	ldr	r3, [pc, #76]	; (8009adc <USBD_LL_Init+0x94>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009a94:	4b11      	ldr	r3, [pc, #68]	; (8009adc <USBD_LL_Init+0x94>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009a9a:	4b10      	ldr	r3, [pc, #64]	; (8009adc <USBD_LL_Init+0x94>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009aa0:	4b0e      	ldr	r3, [pc, #56]	; (8009adc <USBD_LL_Init+0x94>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009aa6:	480d      	ldr	r0, [pc, #52]	; (8009adc <USBD_LL_Init+0x94>)
 8009aa8:	f7f9 fcad 	bl	8003406 <HAL_PCD_Init>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009ab2:	f7f8 fb0f 	bl	80020d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009ab6:	2180      	movs	r1, #128	; 0x80
 8009ab8:	4808      	ldr	r0, [pc, #32]	; (8009adc <USBD_LL_Init+0x94>)
 8009aba:	f7fa ff04 	bl	80048c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009abe:	2240      	movs	r2, #64	; 0x40
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	4806      	ldr	r0, [pc, #24]	; (8009adc <USBD_LL_Init+0x94>)
 8009ac4:	f7fa feb8 	bl	8004838 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009ac8:	2280      	movs	r2, #128	; 0x80
 8009aca:	2101      	movs	r1, #1
 8009acc:	4803      	ldr	r0, [pc, #12]	; (8009adc <USBD_LL_Init+0x94>)
 8009ace:	f7fa feb3 	bl	8004838 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	20001948 	.word	0x20001948

08009ae0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7f9 fda2 	bl	8003640 <HAL_PCD_Start>
 8009afc:	4603      	mov	r3, r0
 8009afe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 f942 	bl	8009d8c <USBD_Get_USB_Status>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b084      	sub	sp, #16
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	4608      	mov	r0, r1
 8009b20:	4611      	mov	r1, r2
 8009b22:	461a      	mov	r2, r3
 8009b24:	4603      	mov	r3, r0
 8009b26:	70fb      	strb	r3, [r7, #3]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	70bb      	strb	r3, [r7, #2]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009b3e:	78bb      	ldrb	r3, [r7, #2]
 8009b40:	883a      	ldrh	r2, [r7, #0]
 8009b42:	78f9      	ldrb	r1, [r7, #3]
 8009b44:	f7fa fa73 	bl	800402e <HAL_PCD_EP_Open>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 f91c 	bl	8009d8c <USBD_Get_USB_Status>
 8009b54:	4603      	mov	r3, r0
 8009b56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b7c:	78fa      	ldrb	r2, [r7, #3]
 8009b7e:	4611      	mov	r1, r2
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fa fabc 	bl	80040fe <HAL_PCD_EP_Close>
 8009b86:	4603      	mov	r3, r0
 8009b88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f000 f8fd 	bl	8009d8c <USBD_Get_USB_Status>
 8009b92:	4603      	mov	r3, r0
 8009b94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b96:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bba:	78fa      	ldrb	r2, [r7, #3]
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fa fb94 	bl	80042ec <HAL_PCD_EP_SetStall>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 f8de 	bl	8009d8c <USBD_Get_USB_Status>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	460b      	mov	r3, r1
 8009be8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bf8:	78fa      	ldrb	r2, [r7, #3]
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fa fbd9 	bl	80043b4 <HAL_PCD_EP_ClrStall>
 8009c02:	4603      	mov	r3, r0
 8009c04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 f8bf 	bl	8009d8c <USBD_Get_USB_Status>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	da0b      	bge.n	8009c50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c3e:	68f9      	ldr	r1, [r7, #12]
 8009c40:	4613      	mov	r3, r2
 8009c42:	00db      	lsls	r3, r3, #3
 8009c44:	4413      	add	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	440b      	add	r3, r1
 8009c4a:	333e      	adds	r3, #62	; 0x3e
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	e00b      	b.n	8009c68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c50:	78fb      	ldrb	r3, [r7, #3]
 8009c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c56:	68f9      	ldr	r1, [r7, #12]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	00db      	lsls	r3, r3, #3
 8009c5c:	4413      	add	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	440b      	add	r3, r1
 8009c62:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009c66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3714      	adds	r7, #20
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c8e:	78fa      	ldrb	r2, [r7, #3]
 8009c90:	4611      	mov	r1, r2
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fa f9a6 	bl	8003fe4 <HAL_PCD_SetAddress>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 f874 	bl	8009d8c <USBD_Get_USB_Status>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b086      	sub	sp, #24
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	60f8      	str	r0, [r7, #12]
 8009cba:	607a      	str	r2, [r7, #4]
 8009cbc:	603b      	str	r3, [r7, #0]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009cd0:	7af9      	ldrb	r1, [r7, #11]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	f7fa fabf 	bl	8004258 <HAL_PCD_EP_Transmit>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cde:	7dfb      	ldrb	r3, [r7, #23]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 f853 	bl	8009d8c <USBD_Get_USB_Status>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cea:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3718      	adds	r7, #24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	607a      	str	r2, [r7, #4]
 8009cfe:	603b      	str	r3, [r7, #0]
 8009d00:	460b      	mov	r3, r1
 8009d02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d04:	2300      	movs	r3, #0
 8009d06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009d12:	7af9      	ldrb	r1, [r7, #11]
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	f7fa fa3b 	bl	8004192 <HAL_PCD_EP_Receive>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d20:	7dfb      	ldrb	r3, [r7, #23]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 f832 	bl	8009d8c <USBD_Get_USB_Status>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3718      	adds	r7, #24
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
 8009d3e:	460b      	mov	r3, r1
 8009d40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d48:	78fa      	ldrb	r2, [r7, #3]
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7fa fa6b 	bl	8004228 <HAL_PCD_EP_GetRxCount>
 8009d52:	4603      	mov	r3, r0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3708      	adds	r7, #8
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009d64:	4b03      	ldr	r3, [pc, #12]	; (8009d74 <USBD_static_malloc+0x18>)
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	370c      	adds	r7, #12
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	20001e54 	.word	0x20001e54

08009d78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]

}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	4603      	mov	r3, r0
 8009d94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d9a:	79fb      	ldrb	r3, [r7, #7]
 8009d9c:	2b03      	cmp	r3, #3
 8009d9e:	d817      	bhi.n	8009dd0 <USBD_Get_USB_Status+0x44>
 8009da0:	a201      	add	r2, pc, #4	; (adr r2, 8009da8 <USBD_Get_USB_Status+0x1c>)
 8009da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da6:	bf00      	nop
 8009da8:	08009db9 	.word	0x08009db9
 8009dac:	08009dbf 	.word	0x08009dbf
 8009db0:	08009dc5 	.word	0x08009dc5
 8009db4:	08009dcb 	.word	0x08009dcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	73fb      	strb	r3, [r7, #15]
    break;
 8009dbc:	e00b      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc2:	e008      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8009dc8:	e005      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	73fb      	strb	r3, [r7, #15]
    break;
 8009dce:	e002      	b.n	8009dd6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8009dd4:	bf00      	nop
  }
  return usb_status;
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <atof>:
 8009de4:	2100      	movs	r1, #0
 8009de6:	f001 be53 	b.w	800ba90 <strtod>

08009dea <atoi>:
 8009dea:	220a      	movs	r2, #10
 8009dec:	2100      	movs	r1, #0
 8009dee:	f001 bf3b 	b.w	800bc68 <strtol>
	...

08009df4 <calloc>:
 8009df4:	4b02      	ldr	r3, [pc, #8]	; (8009e00 <calloc+0xc>)
 8009df6:	460a      	mov	r2, r1
 8009df8:	4601      	mov	r1, r0
 8009dfa:	6818      	ldr	r0, [r3, #0]
 8009dfc:	f000 b844 	b.w	8009e88 <_calloc_r>
 8009e00:	2000013c 	.word	0x2000013c

08009e04 <__errno>:
 8009e04:	4b01      	ldr	r3, [pc, #4]	; (8009e0c <__errno+0x8>)
 8009e06:	6818      	ldr	r0, [r3, #0]
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	2000013c 	.word	0x2000013c

08009e10 <__libc_init_array>:
 8009e10:	b570      	push	{r4, r5, r6, lr}
 8009e12:	4d0d      	ldr	r5, [pc, #52]	; (8009e48 <__libc_init_array+0x38>)
 8009e14:	4c0d      	ldr	r4, [pc, #52]	; (8009e4c <__libc_init_array+0x3c>)
 8009e16:	1b64      	subs	r4, r4, r5
 8009e18:	10a4      	asrs	r4, r4, #2
 8009e1a:	2600      	movs	r6, #0
 8009e1c:	42a6      	cmp	r6, r4
 8009e1e:	d109      	bne.n	8009e34 <__libc_init_array+0x24>
 8009e20:	4d0b      	ldr	r5, [pc, #44]	; (8009e50 <__libc_init_array+0x40>)
 8009e22:	4c0c      	ldr	r4, [pc, #48]	; (8009e54 <__libc_init_array+0x44>)
 8009e24:	f004 fd40 	bl	800e8a8 <_init>
 8009e28:	1b64      	subs	r4, r4, r5
 8009e2a:	10a4      	asrs	r4, r4, #2
 8009e2c:	2600      	movs	r6, #0
 8009e2e:	42a6      	cmp	r6, r4
 8009e30:	d105      	bne.n	8009e3e <__libc_init_array+0x2e>
 8009e32:	bd70      	pop	{r4, r5, r6, pc}
 8009e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e38:	4798      	blx	r3
 8009e3a:	3601      	adds	r6, #1
 8009e3c:	e7ee      	b.n	8009e1c <__libc_init_array+0xc>
 8009e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e42:	4798      	blx	r3
 8009e44:	3601      	adds	r6, #1
 8009e46:	e7f2      	b.n	8009e2e <__libc_init_array+0x1e>
 8009e48:	0800efb8 	.word	0x0800efb8
 8009e4c:	0800efb8 	.word	0x0800efb8
 8009e50:	0800efb8 	.word	0x0800efb8
 8009e54:	0800efbc 	.word	0x0800efbc

08009e58 <malloc>:
 8009e58:	4b02      	ldr	r3, [pc, #8]	; (8009e64 <malloc+0xc>)
 8009e5a:	4601      	mov	r1, r0
 8009e5c:	6818      	ldr	r0, [r3, #0]
 8009e5e:	f000 b895 	b.w	8009f8c <_malloc_r>
 8009e62:	bf00      	nop
 8009e64:	2000013c 	.word	0x2000013c

08009e68 <free>:
 8009e68:	4b02      	ldr	r3, [pc, #8]	; (8009e74 <free+0xc>)
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	6818      	ldr	r0, [r3, #0]
 8009e6e:	f000 b821 	b.w	8009eb4 <_free_r>
 8009e72:	bf00      	nop
 8009e74:	2000013c 	.word	0x2000013c

08009e78 <memset>:
 8009e78:	4402      	add	r2, r0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d100      	bne.n	8009e82 <memset+0xa>
 8009e80:	4770      	bx	lr
 8009e82:	f803 1b01 	strb.w	r1, [r3], #1
 8009e86:	e7f9      	b.n	8009e7c <memset+0x4>

08009e88 <_calloc_r>:
 8009e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e8a:	fba1 2402 	umull	r2, r4, r1, r2
 8009e8e:	b94c      	cbnz	r4, 8009ea4 <_calloc_r+0x1c>
 8009e90:	4611      	mov	r1, r2
 8009e92:	9201      	str	r2, [sp, #4]
 8009e94:	f000 f87a 	bl	8009f8c <_malloc_r>
 8009e98:	9a01      	ldr	r2, [sp, #4]
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	b930      	cbnz	r0, 8009eac <_calloc_r+0x24>
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	b003      	add	sp, #12
 8009ea2:	bd30      	pop	{r4, r5, pc}
 8009ea4:	220c      	movs	r2, #12
 8009ea6:	6002      	str	r2, [r0, #0]
 8009ea8:	2500      	movs	r5, #0
 8009eaa:	e7f8      	b.n	8009e9e <_calloc_r+0x16>
 8009eac:	4621      	mov	r1, r4
 8009eae:	f7ff ffe3 	bl	8009e78 <memset>
 8009eb2:	e7f4      	b.n	8009e9e <_calloc_r+0x16>

08009eb4 <_free_r>:
 8009eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009eb6:	2900      	cmp	r1, #0
 8009eb8:	d044      	beq.n	8009f44 <_free_r+0x90>
 8009eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ebe:	9001      	str	r0, [sp, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ec6:	bfb8      	it	lt
 8009ec8:	18e4      	addlt	r4, r4, r3
 8009eca:	f003 f915 	bl	800d0f8 <__malloc_lock>
 8009ece:	4a1e      	ldr	r2, [pc, #120]	; (8009f48 <_free_r+0x94>)
 8009ed0:	9801      	ldr	r0, [sp, #4]
 8009ed2:	6813      	ldr	r3, [r2, #0]
 8009ed4:	b933      	cbnz	r3, 8009ee4 <_free_r+0x30>
 8009ed6:	6063      	str	r3, [r4, #4]
 8009ed8:	6014      	str	r4, [r2, #0]
 8009eda:	b003      	add	sp, #12
 8009edc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ee0:	f003 b910 	b.w	800d104 <__malloc_unlock>
 8009ee4:	42a3      	cmp	r3, r4
 8009ee6:	d908      	bls.n	8009efa <_free_r+0x46>
 8009ee8:	6825      	ldr	r5, [r4, #0]
 8009eea:	1961      	adds	r1, r4, r5
 8009eec:	428b      	cmp	r3, r1
 8009eee:	bf01      	itttt	eq
 8009ef0:	6819      	ldreq	r1, [r3, #0]
 8009ef2:	685b      	ldreq	r3, [r3, #4]
 8009ef4:	1949      	addeq	r1, r1, r5
 8009ef6:	6021      	streq	r1, [r4, #0]
 8009ef8:	e7ed      	b.n	8009ed6 <_free_r+0x22>
 8009efa:	461a      	mov	r2, r3
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	b10b      	cbz	r3, 8009f04 <_free_r+0x50>
 8009f00:	42a3      	cmp	r3, r4
 8009f02:	d9fa      	bls.n	8009efa <_free_r+0x46>
 8009f04:	6811      	ldr	r1, [r2, #0]
 8009f06:	1855      	adds	r5, r2, r1
 8009f08:	42a5      	cmp	r5, r4
 8009f0a:	d10b      	bne.n	8009f24 <_free_r+0x70>
 8009f0c:	6824      	ldr	r4, [r4, #0]
 8009f0e:	4421      	add	r1, r4
 8009f10:	1854      	adds	r4, r2, r1
 8009f12:	42a3      	cmp	r3, r4
 8009f14:	6011      	str	r1, [r2, #0]
 8009f16:	d1e0      	bne.n	8009eda <_free_r+0x26>
 8009f18:	681c      	ldr	r4, [r3, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	6053      	str	r3, [r2, #4]
 8009f1e:	4421      	add	r1, r4
 8009f20:	6011      	str	r1, [r2, #0]
 8009f22:	e7da      	b.n	8009eda <_free_r+0x26>
 8009f24:	d902      	bls.n	8009f2c <_free_r+0x78>
 8009f26:	230c      	movs	r3, #12
 8009f28:	6003      	str	r3, [r0, #0]
 8009f2a:	e7d6      	b.n	8009eda <_free_r+0x26>
 8009f2c:	6825      	ldr	r5, [r4, #0]
 8009f2e:	1961      	adds	r1, r4, r5
 8009f30:	428b      	cmp	r3, r1
 8009f32:	bf04      	itt	eq
 8009f34:	6819      	ldreq	r1, [r3, #0]
 8009f36:	685b      	ldreq	r3, [r3, #4]
 8009f38:	6063      	str	r3, [r4, #4]
 8009f3a:	bf04      	itt	eq
 8009f3c:	1949      	addeq	r1, r1, r5
 8009f3e:	6021      	streq	r1, [r4, #0]
 8009f40:	6054      	str	r4, [r2, #4]
 8009f42:	e7ca      	b.n	8009eda <_free_r+0x26>
 8009f44:	b003      	add	sp, #12
 8009f46:	bd30      	pop	{r4, r5, pc}
 8009f48:	20002074 	.word	0x20002074

08009f4c <sbrk_aligned>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	4e0e      	ldr	r6, [pc, #56]	; (8009f88 <sbrk_aligned+0x3c>)
 8009f50:	460c      	mov	r4, r1
 8009f52:	6831      	ldr	r1, [r6, #0]
 8009f54:	4605      	mov	r5, r0
 8009f56:	b911      	cbnz	r1, 8009f5e <sbrk_aligned+0x12>
 8009f58:	f000 ff06 	bl	800ad68 <_sbrk_r>
 8009f5c:	6030      	str	r0, [r6, #0]
 8009f5e:	4621      	mov	r1, r4
 8009f60:	4628      	mov	r0, r5
 8009f62:	f000 ff01 	bl	800ad68 <_sbrk_r>
 8009f66:	1c43      	adds	r3, r0, #1
 8009f68:	d00a      	beq.n	8009f80 <sbrk_aligned+0x34>
 8009f6a:	1cc4      	adds	r4, r0, #3
 8009f6c:	f024 0403 	bic.w	r4, r4, #3
 8009f70:	42a0      	cmp	r0, r4
 8009f72:	d007      	beq.n	8009f84 <sbrk_aligned+0x38>
 8009f74:	1a21      	subs	r1, r4, r0
 8009f76:	4628      	mov	r0, r5
 8009f78:	f000 fef6 	bl	800ad68 <_sbrk_r>
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	d101      	bne.n	8009f84 <sbrk_aligned+0x38>
 8009f80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009f84:	4620      	mov	r0, r4
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	20002078 	.word	0x20002078

08009f8c <_malloc_r>:
 8009f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f90:	1ccd      	adds	r5, r1, #3
 8009f92:	f025 0503 	bic.w	r5, r5, #3
 8009f96:	3508      	adds	r5, #8
 8009f98:	2d0c      	cmp	r5, #12
 8009f9a:	bf38      	it	cc
 8009f9c:	250c      	movcc	r5, #12
 8009f9e:	2d00      	cmp	r5, #0
 8009fa0:	4607      	mov	r7, r0
 8009fa2:	db01      	blt.n	8009fa8 <_malloc_r+0x1c>
 8009fa4:	42a9      	cmp	r1, r5
 8009fa6:	d905      	bls.n	8009fb4 <_malloc_r+0x28>
 8009fa8:	230c      	movs	r3, #12
 8009faa:	603b      	str	r3, [r7, #0]
 8009fac:	2600      	movs	r6, #0
 8009fae:	4630      	mov	r0, r6
 8009fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb4:	4e2e      	ldr	r6, [pc, #184]	; (800a070 <_malloc_r+0xe4>)
 8009fb6:	f003 f89f 	bl	800d0f8 <__malloc_lock>
 8009fba:	6833      	ldr	r3, [r6, #0]
 8009fbc:	461c      	mov	r4, r3
 8009fbe:	bb34      	cbnz	r4, 800a00e <_malloc_r+0x82>
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	f7ff ffc2 	bl	8009f4c <sbrk_aligned>
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	4604      	mov	r4, r0
 8009fcc:	d14d      	bne.n	800a06a <_malloc_r+0xde>
 8009fce:	6834      	ldr	r4, [r6, #0]
 8009fd0:	4626      	mov	r6, r4
 8009fd2:	2e00      	cmp	r6, #0
 8009fd4:	d140      	bne.n	800a058 <_malloc_r+0xcc>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	4631      	mov	r1, r6
 8009fda:	4638      	mov	r0, r7
 8009fdc:	eb04 0803 	add.w	r8, r4, r3
 8009fe0:	f000 fec2 	bl	800ad68 <_sbrk_r>
 8009fe4:	4580      	cmp	r8, r0
 8009fe6:	d13a      	bne.n	800a05e <_malloc_r+0xd2>
 8009fe8:	6821      	ldr	r1, [r4, #0]
 8009fea:	3503      	adds	r5, #3
 8009fec:	1a6d      	subs	r5, r5, r1
 8009fee:	f025 0503 	bic.w	r5, r5, #3
 8009ff2:	3508      	adds	r5, #8
 8009ff4:	2d0c      	cmp	r5, #12
 8009ff6:	bf38      	it	cc
 8009ff8:	250c      	movcc	r5, #12
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	4638      	mov	r0, r7
 8009ffe:	f7ff ffa5 	bl	8009f4c <sbrk_aligned>
 800a002:	3001      	adds	r0, #1
 800a004:	d02b      	beq.n	800a05e <_malloc_r+0xd2>
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	442b      	add	r3, r5
 800a00a:	6023      	str	r3, [r4, #0]
 800a00c:	e00e      	b.n	800a02c <_malloc_r+0xa0>
 800a00e:	6822      	ldr	r2, [r4, #0]
 800a010:	1b52      	subs	r2, r2, r5
 800a012:	d41e      	bmi.n	800a052 <_malloc_r+0xc6>
 800a014:	2a0b      	cmp	r2, #11
 800a016:	d916      	bls.n	800a046 <_malloc_r+0xba>
 800a018:	1961      	adds	r1, r4, r5
 800a01a:	42a3      	cmp	r3, r4
 800a01c:	6025      	str	r5, [r4, #0]
 800a01e:	bf18      	it	ne
 800a020:	6059      	strne	r1, [r3, #4]
 800a022:	6863      	ldr	r3, [r4, #4]
 800a024:	bf08      	it	eq
 800a026:	6031      	streq	r1, [r6, #0]
 800a028:	5162      	str	r2, [r4, r5]
 800a02a:	604b      	str	r3, [r1, #4]
 800a02c:	4638      	mov	r0, r7
 800a02e:	f104 060b 	add.w	r6, r4, #11
 800a032:	f003 f867 	bl	800d104 <__malloc_unlock>
 800a036:	f026 0607 	bic.w	r6, r6, #7
 800a03a:	1d23      	adds	r3, r4, #4
 800a03c:	1af2      	subs	r2, r6, r3
 800a03e:	d0b6      	beq.n	8009fae <_malloc_r+0x22>
 800a040:	1b9b      	subs	r3, r3, r6
 800a042:	50a3      	str	r3, [r4, r2]
 800a044:	e7b3      	b.n	8009fae <_malloc_r+0x22>
 800a046:	6862      	ldr	r2, [r4, #4]
 800a048:	42a3      	cmp	r3, r4
 800a04a:	bf0c      	ite	eq
 800a04c:	6032      	streq	r2, [r6, #0]
 800a04e:	605a      	strne	r2, [r3, #4]
 800a050:	e7ec      	b.n	800a02c <_malloc_r+0xa0>
 800a052:	4623      	mov	r3, r4
 800a054:	6864      	ldr	r4, [r4, #4]
 800a056:	e7b2      	b.n	8009fbe <_malloc_r+0x32>
 800a058:	4634      	mov	r4, r6
 800a05a:	6876      	ldr	r6, [r6, #4]
 800a05c:	e7b9      	b.n	8009fd2 <_malloc_r+0x46>
 800a05e:	230c      	movs	r3, #12
 800a060:	603b      	str	r3, [r7, #0]
 800a062:	4638      	mov	r0, r7
 800a064:	f003 f84e 	bl	800d104 <__malloc_unlock>
 800a068:	e7a1      	b.n	8009fae <_malloc_r+0x22>
 800a06a:	6025      	str	r5, [r4, #0]
 800a06c:	e7de      	b.n	800a02c <_malloc_r+0xa0>
 800a06e:	bf00      	nop
 800a070:	20002074 	.word	0x20002074

0800a074 <__cvt>:
 800a074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a078:	ec55 4b10 	vmov	r4, r5, d0
 800a07c:	2d00      	cmp	r5, #0
 800a07e:	460e      	mov	r6, r1
 800a080:	4619      	mov	r1, r3
 800a082:	462b      	mov	r3, r5
 800a084:	bfbb      	ittet	lt
 800a086:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a08a:	461d      	movlt	r5, r3
 800a08c:	2300      	movge	r3, #0
 800a08e:	232d      	movlt	r3, #45	; 0x2d
 800a090:	700b      	strb	r3, [r1, #0]
 800a092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a094:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a098:	4691      	mov	r9, r2
 800a09a:	f023 0820 	bic.w	r8, r3, #32
 800a09e:	bfbc      	itt	lt
 800a0a0:	4622      	movlt	r2, r4
 800a0a2:	4614      	movlt	r4, r2
 800a0a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0a8:	d005      	beq.n	800a0b6 <__cvt+0x42>
 800a0aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a0ae:	d100      	bne.n	800a0b2 <__cvt+0x3e>
 800a0b0:	3601      	adds	r6, #1
 800a0b2:	2102      	movs	r1, #2
 800a0b4:	e000      	b.n	800a0b8 <__cvt+0x44>
 800a0b6:	2103      	movs	r1, #3
 800a0b8:	ab03      	add	r3, sp, #12
 800a0ba:	9301      	str	r3, [sp, #4]
 800a0bc:	ab02      	add	r3, sp, #8
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	ec45 4b10 	vmov	d0, r4, r5
 800a0c4:	4653      	mov	r3, sl
 800a0c6:	4632      	mov	r2, r6
 800a0c8:	f001 fe82 	bl	800bdd0 <_dtoa_r>
 800a0cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a0d0:	4607      	mov	r7, r0
 800a0d2:	d102      	bne.n	800a0da <__cvt+0x66>
 800a0d4:	f019 0f01 	tst.w	r9, #1
 800a0d8:	d022      	beq.n	800a120 <__cvt+0xac>
 800a0da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0de:	eb07 0906 	add.w	r9, r7, r6
 800a0e2:	d110      	bne.n	800a106 <__cvt+0x92>
 800a0e4:	783b      	ldrb	r3, [r7, #0]
 800a0e6:	2b30      	cmp	r3, #48	; 0x30
 800a0e8:	d10a      	bne.n	800a100 <__cvt+0x8c>
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	f7f6 fcf9 	bl	8000ae8 <__aeabi_dcmpeq>
 800a0f6:	b918      	cbnz	r0, 800a100 <__cvt+0x8c>
 800a0f8:	f1c6 0601 	rsb	r6, r6, #1
 800a0fc:	f8ca 6000 	str.w	r6, [sl]
 800a100:	f8da 3000 	ldr.w	r3, [sl]
 800a104:	4499      	add	r9, r3
 800a106:	2200      	movs	r2, #0
 800a108:	2300      	movs	r3, #0
 800a10a:	4620      	mov	r0, r4
 800a10c:	4629      	mov	r1, r5
 800a10e:	f7f6 fceb 	bl	8000ae8 <__aeabi_dcmpeq>
 800a112:	b108      	cbz	r0, 800a118 <__cvt+0xa4>
 800a114:	f8cd 900c 	str.w	r9, [sp, #12]
 800a118:	2230      	movs	r2, #48	; 0x30
 800a11a:	9b03      	ldr	r3, [sp, #12]
 800a11c:	454b      	cmp	r3, r9
 800a11e:	d307      	bcc.n	800a130 <__cvt+0xbc>
 800a120:	9b03      	ldr	r3, [sp, #12]
 800a122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a124:	1bdb      	subs	r3, r3, r7
 800a126:	4638      	mov	r0, r7
 800a128:	6013      	str	r3, [r2, #0]
 800a12a:	b004      	add	sp, #16
 800a12c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a130:	1c59      	adds	r1, r3, #1
 800a132:	9103      	str	r1, [sp, #12]
 800a134:	701a      	strb	r2, [r3, #0]
 800a136:	e7f0      	b.n	800a11a <__cvt+0xa6>

0800a138 <__exponent>:
 800a138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a13a:	4603      	mov	r3, r0
 800a13c:	2900      	cmp	r1, #0
 800a13e:	bfb8      	it	lt
 800a140:	4249      	neglt	r1, r1
 800a142:	f803 2b02 	strb.w	r2, [r3], #2
 800a146:	bfb4      	ite	lt
 800a148:	222d      	movlt	r2, #45	; 0x2d
 800a14a:	222b      	movge	r2, #43	; 0x2b
 800a14c:	2909      	cmp	r1, #9
 800a14e:	7042      	strb	r2, [r0, #1]
 800a150:	dd2a      	ble.n	800a1a8 <__exponent+0x70>
 800a152:	f10d 0407 	add.w	r4, sp, #7
 800a156:	46a4      	mov	ip, r4
 800a158:	270a      	movs	r7, #10
 800a15a:	46a6      	mov	lr, r4
 800a15c:	460a      	mov	r2, r1
 800a15e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a162:	fb07 1516 	mls	r5, r7, r6, r1
 800a166:	3530      	adds	r5, #48	; 0x30
 800a168:	2a63      	cmp	r2, #99	; 0x63
 800a16a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a16e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a172:	4631      	mov	r1, r6
 800a174:	dcf1      	bgt.n	800a15a <__exponent+0x22>
 800a176:	3130      	adds	r1, #48	; 0x30
 800a178:	f1ae 0502 	sub.w	r5, lr, #2
 800a17c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a180:	1c44      	adds	r4, r0, #1
 800a182:	4629      	mov	r1, r5
 800a184:	4561      	cmp	r1, ip
 800a186:	d30a      	bcc.n	800a19e <__exponent+0x66>
 800a188:	f10d 0209 	add.w	r2, sp, #9
 800a18c:	eba2 020e 	sub.w	r2, r2, lr
 800a190:	4565      	cmp	r5, ip
 800a192:	bf88      	it	hi
 800a194:	2200      	movhi	r2, #0
 800a196:	4413      	add	r3, r2
 800a198:	1a18      	subs	r0, r3, r0
 800a19a:	b003      	add	sp, #12
 800a19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a19e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a1a6:	e7ed      	b.n	800a184 <__exponent+0x4c>
 800a1a8:	2330      	movs	r3, #48	; 0x30
 800a1aa:	3130      	adds	r1, #48	; 0x30
 800a1ac:	7083      	strb	r3, [r0, #2]
 800a1ae:	70c1      	strb	r1, [r0, #3]
 800a1b0:	1d03      	adds	r3, r0, #4
 800a1b2:	e7f1      	b.n	800a198 <__exponent+0x60>

0800a1b4 <_printf_float>:
 800a1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b8:	ed2d 8b02 	vpush	{d8}
 800a1bc:	b08d      	sub	sp, #52	; 0x34
 800a1be:	460c      	mov	r4, r1
 800a1c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a1c4:	4616      	mov	r6, r2
 800a1c6:	461f      	mov	r7, r3
 800a1c8:	4605      	mov	r5, r0
 800a1ca:	f002 ff71 	bl	800d0b0 <_localeconv_r>
 800a1ce:	f8d0 a000 	ldr.w	sl, [r0]
 800a1d2:	4650      	mov	r0, sl
 800a1d4:	f7f6 f806 	bl	80001e4 <strlen>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	930a      	str	r3, [sp, #40]	; 0x28
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	9305      	str	r3, [sp, #20]
 800a1e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a1e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a1e8:	3307      	adds	r3, #7
 800a1ea:	f023 0307 	bic.w	r3, r3, #7
 800a1ee:	f103 0208 	add.w	r2, r3, #8
 800a1f2:	f8c8 2000 	str.w	r2, [r8]
 800a1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a1fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a202:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a206:	9307      	str	r3, [sp, #28]
 800a208:	f8cd 8018 	str.w	r8, [sp, #24]
 800a20c:	ee08 0a10 	vmov	s16, r0
 800a210:	4b9f      	ldr	r3, [pc, #636]	; (800a490 <_printf_float+0x2dc>)
 800a212:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a21a:	f7f6 fc97 	bl	8000b4c <__aeabi_dcmpun>
 800a21e:	bb88      	cbnz	r0, 800a284 <_printf_float+0xd0>
 800a220:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a224:	4b9a      	ldr	r3, [pc, #616]	; (800a490 <_printf_float+0x2dc>)
 800a226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a22a:	f7f6 fc71 	bl	8000b10 <__aeabi_dcmple>
 800a22e:	bb48      	cbnz	r0, 800a284 <_printf_float+0xd0>
 800a230:	2200      	movs	r2, #0
 800a232:	2300      	movs	r3, #0
 800a234:	4640      	mov	r0, r8
 800a236:	4649      	mov	r1, r9
 800a238:	f7f6 fc60 	bl	8000afc <__aeabi_dcmplt>
 800a23c:	b110      	cbz	r0, 800a244 <_printf_float+0x90>
 800a23e:	232d      	movs	r3, #45	; 0x2d
 800a240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a244:	4b93      	ldr	r3, [pc, #588]	; (800a494 <_printf_float+0x2e0>)
 800a246:	4894      	ldr	r0, [pc, #592]	; (800a498 <_printf_float+0x2e4>)
 800a248:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a24c:	bf94      	ite	ls
 800a24e:	4698      	movls	r8, r3
 800a250:	4680      	movhi	r8, r0
 800a252:	2303      	movs	r3, #3
 800a254:	6123      	str	r3, [r4, #16]
 800a256:	9b05      	ldr	r3, [sp, #20]
 800a258:	f023 0204 	bic.w	r2, r3, #4
 800a25c:	6022      	str	r2, [r4, #0]
 800a25e:	f04f 0900 	mov.w	r9, #0
 800a262:	9700      	str	r7, [sp, #0]
 800a264:	4633      	mov	r3, r6
 800a266:	aa0b      	add	r2, sp, #44	; 0x2c
 800a268:	4621      	mov	r1, r4
 800a26a:	4628      	mov	r0, r5
 800a26c:	f000 f9d8 	bl	800a620 <_printf_common>
 800a270:	3001      	adds	r0, #1
 800a272:	f040 8090 	bne.w	800a396 <_printf_float+0x1e2>
 800a276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a27a:	b00d      	add	sp, #52	; 0x34
 800a27c:	ecbd 8b02 	vpop	{d8}
 800a280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a284:	4642      	mov	r2, r8
 800a286:	464b      	mov	r3, r9
 800a288:	4640      	mov	r0, r8
 800a28a:	4649      	mov	r1, r9
 800a28c:	f7f6 fc5e 	bl	8000b4c <__aeabi_dcmpun>
 800a290:	b140      	cbz	r0, 800a2a4 <_printf_float+0xf0>
 800a292:	464b      	mov	r3, r9
 800a294:	2b00      	cmp	r3, #0
 800a296:	bfbc      	itt	lt
 800a298:	232d      	movlt	r3, #45	; 0x2d
 800a29a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a29e:	487f      	ldr	r0, [pc, #508]	; (800a49c <_printf_float+0x2e8>)
 800a2a0:	4b7f      	ldr	r3, [pc, #508]	; (800a4a0 <_printf_float+0x2ec>)
 800a2a2:	e7d1      	b.n	800a248 <_printf_float+0x94>
 800a2a4:	6863      	ldr	r3, [r4, #4]
 800a2a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a2aa:	9206      	str	r2, [sp, #24]
 800a2ac:	1c5a      	adds	r2, r3, #1
 800a2ae:	d13f      	bne.n	800a330 <_printf_float+0x17c>
 800a2b0:	2306      	movs	r3, #6
 800a2b2:	6063      	str	r3, [r4, #4]
 800a2b4:	9b05      	ldr	r3, [sp, #20]
 800a2b6:	6861      	ldr	r1, [r4, #4]
 800a2b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a2bc:	2300      	movs	r3, #0
 800a2be:	9303      	str	r3, [sp, #12]
 800a2c0:	ab0a      	add	r3, sp, #40	; 0x28
 800a2c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a2c6:	ab09      	add	r3, sp, #36	; 0x24
 800a2c8:	ec49 8b10 	vmov	d0, r8, r9
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	6022      	str	r2, [r4, #0]
 800a2d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f7ff fecd 	bl	800a074 <__cvt>
 800a2da:	9b06      	ldr	r3, [sp, #24]
 800a2dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2de:	2b47      	cmp	r3, #71	; 0x47
 800a2e0:	4680      	mov	r8, r0
 800a2e2:	d108      	bne.n	800a2f6 <_printf_float+0x142>
 800a2e4:	1cc8      	adds	r0, r1, #3
 800a2e6:	db02      	blt.n	800a2ee <_printf_float+0x13a>
 800a2e8:	6863      	ldr	r3, [r4, #4]
 800a2ea:	4299      	cmp	r1, r3
 800a2ec:	dd41      	ble.n	800a372 <_printf_float+0x1be>
 800a2ee:	f1ab 0b02 	sub.w	fp, fp, #2
 800a2f2:	fa5f fb8b 	uxtb.w	fp, fp
 800a2f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2fa:	d820      	bhi.n	800a33e <_printf_float+0x18a>
 800a2fc:	3901      	subs	r1, #1
 800a2fe:	465a      	mov	r2, fp
 800a300:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a304:	9109      	str	r1, [sp, #36]	; 0x24
 800a306:	f7ff ff17 	bl	800a138 <__exponent>
 800a30a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a30c:	1813      	adds	r3, r2, r0
 800a30e:	2a01      	cmp	r2, #1
 800a310:	4681      	mov	r9, r0
 800a312:	6123      	str	r3, [r4, #16]
 800a314:	dc02      	bgt.n	800a31c <_printf_float+0x168>
 800a316:	6822      	ldr	r2, [r4, #0]
 800a318:	07d2      	lsls	r2, r2, #31
 800a31a:	d501      	bpl.n	800a320 <_printf_float+0x16c>
 800a31c:	3301      	adds	r3, #1
 800a31e:	6123      	str	r3, [r4, #16]
 800a320:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a324:	2b00      	cmp	r3, #0
 800a326:	d09c      	beq.n	800a262 <_printf_float+0xae>
 800a328:	232d      	movs	r3, #45	; 0x2d
 800a32a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a32e:	e798      	b.n	800a262 <_printf_float+0xae>
 800a330:	9a06      	ldr	r2, [sp, #24]
 800a332:	2a47      	cmp	r2, #71	; 0x47
 800a334:	d1be      	bne.n	800a2b4 <_printf_float+0x100>
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1bc      	bne.n	800a2b4 <_printf_float+0x100>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e7b9      	b.n	800a2b2 <_printf_float+0xfe>
 800a33e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a342:	d118      	bne.n	800a376 <_printf_float+0x1c2>
 800a344:	2900      	cmp	r1, #0
 800a346:	6863      	ldr	r3, [r4, #4]
 800a348:	dd0b      	ble.n	800a362 <_printf_float+0x1ae>
 800a34a:	6121      	str	r1, [r4, #16]
 800a34c:	b913      	cbnz	r3, 800a354 <_printf_float+0x1a0>
 800a34e:	6822      	ldr	r2, [r4, #0]
 800a350:	07d0      	lsls	r0, r2, #31
 800a352:	d502      	bpl.n	800a35a <_printf_float+0x1a6>
 800a354:	3301      	adds	r3, #1
 800a356:	440b      	add	r3, r1
 800a358:	6123      	str	r3, [r4, #16]
 800a35a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a35c:	f04f 0900 	mov.w	r9, #0
 800a360:	e7de      	b.n	800a320 <_printf_float+0x16c>
 800a362:	b913      	cbnz	r3, 800a36a <_printf_float+0x1b6>
 800a364:	6822      	ldr	r2, [r4, #0]
 800a366:	07d2      	lsls	r2, r2, #31
 800a368:	d501      	bpl.n	800a36e <_printf_float+0x1ba>
 800a36a:	3302      	adds	r3, #2
 800a36c:	e7f4      	b.n	800a358 <_printf_float+0x1a4>
 800a36e:	2301      	movs	r3, #1
 800a370:	e7f2      	b.n	800a358 <_printf_float+0x1a4>
 800a372:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a378:	4299      	cmp	r1, r3
 800a37a:	db05      	blt.n	800a388 <_printf_float+0x1d4>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	6121      	str	r1, [r4, #16]
 800a380:	07d8      	lsls	r0, r3, #31
 800a382:	d5ea      	bpl.n	800a35a <_printf_float+0x1a6>
 800a384:	1c4b      	adds	r3, r1, #1
 800a386:	e7e7      	b.n	800a358 <_printf_float+0x1a4>
 800a388:	2900      	cmp	r1, #0
 800a38a:	bfd4      	ite	le
 800a38c:	f1c1 0202 	rsble	r2, r1, #2
 800a390:	2201      	movgt	r2, #1
 800a392:	4413      	add	r3, r2
 800a394:	e7e0      	b.n	800a358 <_printf_float+0x1a4>
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	055a      	lsls	r2, r3, #21
 800a39a:	d407      	bmi.n	800a3ac <_printf_float+0x1f8>
 800a39c:	6923      	ldr	r3, [r4, #16]
 800a39e:	4642      	mov	r2, r8
 800a3a0:	4631      	mov	r1, r6
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	47b8      	blx	r7
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	d12c      	bne.n	800a404 <_printf_float+0x250>
 800a3aa:	e764      	b.n	800a276 <_printf_float+0xc2>
 800a3ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a3b0:	f240 80e0 	bls.w	800a574 <_printf_float+0x3c0>
 800a3b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f7f6 fb94 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d034      	beq.n	800a42e <_printf_float+0x27a>
 800a3c4:	4a37      	ldr	r2, [pc, #220]	; (800a4a4 <_printf_float+0x2f0>)
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	47b8      	blx	r7
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	f43f af51 	beq.w	800a276 <_printf_float+0xc2>
 800a3d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	db02      	blt.n	800a3e2 <_printf_float+0x22e>
 800a3dc:	6823      	ldr	r3, [r4, #0]
 800a3de:	07d8      	lsls	r0, r3, #31
 800a3e0:	d510      	bpl.n	800a404 <_printf_float+0x250>
 800a3e2:	ee18 3a10 	vmov	r3, s16
 800a3e6:	4652      	mov	r2, sl
 800a3e8:	4631      	mov	r1, r6
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	47b8      	blx	r7
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	f43f af41 	beq.w	800a276 <_printf_float+0xc2>
 800a3f4:	f04f 0800 	mov.w	r8, #0
 800a3f8:	f104 091a 	add.w	r9, r4, #26
 800a3fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3fe:	3b01      	subs	r3, #1
 800a400:	4543      	cmp	r3, r8
 800a402:	dc09      	bgt.n	800a418 <_printf_float+0x264>
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	079b      	lsls	r3, r3, #30
 800a408:	f100 8105 	bmi.w	800a616 <_printf_float+0x462>
 800a40c:	68e0      	ldr	r0, [r4, #12]
 800a40e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a410:	4298      	cmp	r0, r3
 800a412:	bfb8      	it	lt
 800a414:	4618      	movlt	r0, r3
 800a416:	e730      	b.n	800a27a <_printf_float+0xc6>
 800a418:	2301      	movs	r3, #1
 800a41a:	464a      	mov	r2, r9
 800a41c:	4631      	mov	r1, r6
 800a41e:	4628      	mov	r0, r5
 800a420:	47b8      	blx	r7
 800a422:	3001      	adds	r0, #1
 800a424:	f43f af27 	beq.w	800a276 <_printf_float+0xc2>
 800a428:	f108 0801 	add.w	r8, r8, #1
 800a42c:	e7e6      	b.n	800a3fc <_printf_float+0x248>
 800a42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a430:	2b00      	cmp	r3, #0
 800a432:	dc39      	bgt.n	800a4a8 <_printf_float+0x2f4>
 800a434:	4a1b      	ldr	r2, [pc, #108]	; (800a4a4 <_printf_float+0x2f0>)
 800a436:	2301      	movs	r3, #1
 800a438:	4631      	mov	r1, r6
 800a43a:	4628      	mov	r0, r5
 800a43c:	47b8      	blx	r7
 800a43e:	3001      	adds	r0, #1
 800a440:	f43f af19 	beq.w	800a276 <_printf_float+0xc2>
 800a444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a448:	4313      	orrs	r3, r2
 800a44a:	d102      	bne.n	800a452 <_printf_float+0x29e>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	07d9      	lsls	r1, r3, #31
 800a450:	d5d8      	bpl.n	800a404 <_printf_float+0x250>
 800a452:	ee18 3a10 	vmov	r3, s16
 800a456:	4652      	mov	r2, sl
 800a458:	4631      	mov	r1, r6
 800a45a:	4628      	mov	r0, r5
 800a45c:	47b8      	blx	r7
 800a45e:	3001      	adds	r0, #1
 800a460:	f43f af09 	beq.w	800a276 <_printf_float+0xc2>
 800a464:	f04f 0900 	mov.w	r9, #0
 800a468:	f104 0a1a 	add.w	sl, r4, #26
 800a46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46e:	425b      	negs	r3, r3
 800a470:	454b      	cmp	r3, r9
 800a472:	dc01      	bgt.n	800a478 <_printf_float+0x2c4>
 800a474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a476:	e792      	b.n	800a39e <_printf_float+0x1ea>
 800a478:	2301      	movs	r3, #1
 800a47a:	4652      	mov	r2, sl
 800a47c:	4631      	mov	r1, r6
 800a47e:	4628      	mov	r0, r5
 800a480:	47b8      	blx	r7
 800a482:	3001      	adds	r0, #1
 800a484:	f43f aef7 	beq.w	800a276 <_printf_float+0xc2>
 800a488:	f109 0901 	add.w	r9, r9, #1
 800a48c:	e7ee      	b.n	800a46c <_printf_float+0x2b8>
 800a48e:	bf00      	nop
 800a490:	7fefffff 	.word	0x7fefffff
 800a494:	0800eab4 	.word	0x0800eab4
 800a498:	0800eab8 	.word	0x0800eab8
 800a49c:	0800eac0 	.word	0x0800eac0
 800a4a0:	0800eabc 	.word	0x0800eabc
 800a4a4:	0800eac4 	.word	0x0800eac4
 800a4a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	bfa8      	it	ge
 800a4b0:	461a      	movge	r2, r3
 800a4b2:	2a00      	cmp	r2, #0
 800a4b4:	4691      	mov	r9, r2
 800a4b6:	dc37      	bgt.n	800a528 <_printf_float+0x374>
 800a4b8:	f04f 0b00 	mov.w	fp, #0
 800a4bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4c0:	f104 021a 	add.w	r2, r4, #26
 800a4c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4c6:	9305      	str	r3, [sp, #20]
 800a4c8:	eba3 0309 	sub.w	r3, r3, r9
 800a4cc:	455b      	cmp	r3, fp
 800a4ce:	dc33      	bgt.n	800a538 <_printf_float+0x384>
 800a4d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	db3b      	blt.n	800a550 <_printf_float+0x39c>
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	07da      	lsls	r2, r3, #31
 800a4dc:	d438      	bmi.n	800a550 <_printf_float+0x39c>
 800a4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4e0:	9a05      	ldr	r2, [sp, #20]
 800a4e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4e4:	1a9a      	subs	r2, r3, r2
 800a4e6:	eba3 0901 	sub.w	r9, r3, r1
 800a4ea:	4591      	cmp	r9, r2
 800a4ec:	bfa8      	it	ge
 800a4ee:	4691      	movge	r9, r2
 800a4f0:	f1b9 0f00 	cmp.w	r9, #0
 800a4f4:	dc35      	bgt.n	800a562 <_printf_float+0x3ae>
 800a4f6:	f04f 0800 	mov.w	r8, #0
 800a4fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4fe:	f104 0a1a 	add.w	sl, r4, #26
 800a502:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a506:	1a9b      	subs	r3, r3, r2
 800a508:	eba3 0309 	sub.w	r3, r3, r9
 800a50c:	4543      	cmp	r3, r8
 800a50e:	f77f af79 	ble.w	800a404 <_printf_float+0x250>
 800a512:	2301      	movs	r3, #1
 800a514:	4652      	mov	r2, sl
 800a516:	4631      	mov	r1, r6
 800a518:	4628      	mov	r0, r5
 800a51a:	47b8      	blx	r7
 800a51c:	3001      	adds	r0, #1
 800a51e:	f43f aeaa 	beq.w	800a276 <_printf_float+0xc2>
 800a522:	f108 0801 	add.w	r8, r8, #1
 800a526:	e7ec      	b.n	800a502 <_printf_float+0x34e>
 800a528:	4613      	mov	r3, r2
 800a52a:	4631      	mov	r1, r6
 800a52c:	4642      	mov	r2, r8
 800a52e:	4628      	mov	r0, r5
 800a530:	47b8      	blx	r7
 800a532:	3001      	adds	r0, #1
 800a534:	d1c0      	bne.n	800a4b8 <_printf_float+0x304>
 800a536:	e69e      	b.n	800a276 <_printf_float+0xc2>
 800a538:	2301      	movs	r3, #1
 800a53a:	4631      	mov	r1, r6
 800a53c:	4628      	mov	r0, r5
 800a53e:	9205      	str	r2, [sp, #20]
 800a540:	47b8      	blx	r7
 800a542:	3001      	adds	r0, #1
 800a544:	f43f ae97 	beq.w	800a276 <_printf_float+0xc2>
 800a548:	9a05      	ldr	r2, [sp, #20]
 800a54a:	f10b 0b01 	add.w	fp, fp, #1
 800a54e:	e7b9      	b.n	800a4c4 <_printf_float+0x310>
 800a550:	ee18 3a10 	vmov	r3, s16
 800a554:	4652      	mov	r2, sl
 800a556:	4631      	mov	r1, r6
 800a558:	4628      	mov	r0, r5
 800a55a:	47b8      	blx	r7
 800a55c:	3001      	adds	r0, #1
 800a55e:	d1be      	bne.n	800a4de <_printf_float+0x32a>
 800a560:	e689      	b.n	800a276 <_printf_float+0xc2>
 800a562:	9a05      	ldr	r2, [sp, #20]
 800a564:	464b      	mov	r3, r9
 800a566:	4442      	add	r2, r8
 800a568:	4631      	mov	r1, r6
 800a56a:	4628      	mov	r0, r5
 800a56c:	47b8      	blx	r7
 800a56e:	3001      	adds	r0, #1
 800a570:	d1c1      	bne.n	800a4f6 <_printf_float+0x342>
 800a572:	e680      	b.n	800a276 <_printf_float+0xc2>
 800a574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a576:	2a01      	cmp	r2, #1
 800a578:	dc01      	bgt.n	800a57e <_printf_float+0x3ca>
 800a57a:	07db      	lsls	r3, r3, #31
 800a57c:	d538      	bpl.n	800a5f0 <_printf_float+0x43c>
 800a57e:	2301      	movs	r3, #1
 800a580:	4642      	mov	r2, r8
 800a582:	4631      	mov	r1, r6
 800a584:	4628      	mov	r0, r5
 800a586:	47b8      	blx	r7
 800a588:	3001      	adds	r0, #1
 800a58a:	f43f ae74 	beq.w	800a276 <_printf_float+0xc2>
 800a58e:	ee18 3a10 	vmov	r3, s16
 800a592:	4652      	mov	r2, sl
 800a594:	4631      	mov	r1, r6
 800a596:	4628      	mov	r0, r5
 800a598:	47b8      	blx	r7
 800a59a:	3001      	adds	r0, #1
 800a59c:	f43f ae6b 	beq.w	800a276 <_printf_float+0xc2>
 800a5a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f7f6 fa9e 	bl	8000ae8 <__aeabi_dcmpeq>
 800a5ac:	b9d8      	cbnz	r0, 800a5e6 <_printf_float+0x432>
 800a5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b0:	f108 0201 	add.w	r2, r8, #1
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	47b8      	blx	r7
 800a5bc:	3001      	adds	r0, #1
 800a5be:	d10e      	bne.n	800a5de <_printf_float+0x42a>
 800a5c0:	e659      	b.n	800a276 <_printf_float+0xc2>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	4652      	mov	r2, sl
 800a5c6:	4631      	mov	r1, r6
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	47b8      	blx	r7
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	f43f ae52 	beq.w	800a276 <_printf_float+0xc2>
 800a5d2:	f108 0801 	add.w	r8, r8, #1
 800a5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	4543      	cmp	r3, r8
 800a5dc:	dcf1      	bgt.n	800a5c2 <_printf_float+0x40e>
 800a5de:	464b      	mov	r3, r9
 800a5e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a5e4:	e6dc      	b.n	800a3a0 <_printf_float+0x1ec>
 800a5e6:	f04f 0800 	mov.w	r8, #0
 800a5ea:	f104 0a1a 	add.w	sl, r4, #26
 800a5ee:	e7f2      	b.n	800a5d6 <_printf_float+0x422>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	4642      	mov	r2, r8
 800a5f4:	e7df      	b.n	800a5b6 <_printf_float+0x402>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	464a      	mov	r2, r9
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	47b8      	blx	r7
 800a600:	3001      	adds	r0, #1
 800a602:	f43f ae38 	beq.w	800a276 <_printf_float+0xc2>
 800a606:	f108 0801 	add.w	r8, r8, #1
 800a60a:	68e3      	ldr	r3, [r4, #12]
 800a60c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a60e:	1a5b      	subs	r3, r3, r1
 800a610:	4543      	cmp	r3, r8
 800a612:	dcf0      	bgt.n	800a5f6 <_printf_float+0x442>
 800a614:	e6fa      	b.n	800a40c <_printf_float+0x258>
 800a616:	f04f 0800 	mov.w	r8, #0
 800a61a:	f104 0919 	add.w	r9, r4, #25
 800a61e:	e7f4      	b.n	800a60a <_printf_float+0x456>

0800a620 <_printf_common>:
 800a620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a624:	4616      	mov	r6, r2
 800a626:	4699      	mov	r9, r3
 800a628:	688a      	ldr	r2, [r1, #8]
 800a62a:	690b      	ldr	r3, [r1, #16]
 800a62c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a630:	4293      	cmp	r3, r2
 800a632:	bfb8      	it	lt
 800a634:	4613      	movlt	r3, r2
 800a636:	6033      	str	r3, [r6, #0]
 800a638:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a63c:	4607      	mov	r7, r0
 800a63e:	460c      	mov	r4, r1
 800a640:	b10a      	cbz	r2, 800a646 <_printf_common+0x26>
 800a642:	3301      	adds	r3, #1
 800a644:	6033      	str	r3, [r6, #0]
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	0699      	lsls	r1, r3, #26
 800a64a:	bf42      	ittt	mi
 800a64c:	6833      	ldrmi	r3, [r6, #0]
 800a64e:	3302      	addmi	r3, #2
 800a650:	6033      	strmi	r3, [r6, #0]
 800a652:	6825      	ldr	r5, [r4, #0]
 800a654:	f015 0506 	ands.w	r5, r5, #6
 800a658:	d106      	bne.n	800a668 <_printf_common+0x48>
 800a65a:	f104 0a19 	add.w	sl, r4, #25
 800a65e:	68e3      	ldr	r3, [r4, #12]
 800a660:	6832      	ldr	r2, [r6, #0]
 800a662:	1a9b      	subs	r3, r3, r2
 800a664:	42ab      	cmp	r3, r5
 800a666:	dc26      	bgt.n	800a6b6 <_printf_common+0x96>
 800a668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a66c:	1e13      	subs	r3, r2, #0
 800a66e:	6822      	ldr	r2, [r4, #0]
 800a670:	bf18      	it	ne
 800a672:	2301      	movne	r3, #1
 800a674:	0692      	lsls	r2, r2, #26
 800a676:	d42b      	bmi.n	800a6d0 <_printf_common+0xb0>
 800a678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a67c:	4649      	mov	r1, r9
 800a67e:	4638      	mov	r0, r7
 800a680:	47c0      	blx	r8
 800a682:	3001      	adds	r0, #1
 800a684:	d01e      	beq.n	800a6c4 <_printf_common+0xa4>
 800a686:	6823      	ldr	r3, [r4, #0]
 800a688:	68e5      	ldr	r5, [r4, #12]
 800a68a:	6832      	ldr	r2, [r6, #0]
 800a68c:	f003 0306 	and.w	r3, r3, #6
 800a690:	2b04      	cmp	r3, #4
 800a692:	bf08      	it	eq
 800a694:	1aad      	subeq	r5, r5, r2
 800a696:	68a3      	ldr	r3, [r4, #8]
 800a698:	6922      	ldr	r2, [r4, #16]
 800a69a:	bf0c      	ite	eq
 800a69c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6a0:	2500      	movne	r5, #0
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	bfc4      	itt	gt
 800a6a6:	1a9b      	subgt	r3, r3, r2
 800a6a8:	18ed      	addgt	r5, r5, r3
 800a6aa:	2600      	movs	r6, #0
 800a6ac:	341a      	adds	r4, #26
 800a6ae:	42b5      	cmp	r5, r6
 800a6b0:	d11a      	bne.n	800a6e8 <_printf_common+0xc8>
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	e008      	b.n	800a6c8 <_printf_common+0xa8>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	4652      	mov	r2, sl
 800a6ba:	4649      	mov	r1, r9
 800a6bc:	4638      	mov	r0, r7
 800a6be:	47c0      	blx	r8
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	d103      	bne.n	800a6cc <_printf_common+0xac>
 800a6c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6cc:	3501      	adds	r5, #1
 800a6ce:	e7c6      	b.n	800a65e <_printf_common+0x3e>
 800a6d0:	18e1      	adds	r1, r4, r3
 800a6d2:	1c5a      	adds	r2, r3, #1
 800a6d4:	2030      	movs	r0, #48	; 0x30
 800a6d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6da:	4422      	add	r2, r4
 800a6dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6e4:	3302      	adds	r3, #2
 800a6e6:	e7c7      	b.n	800a678 <_printf_common+0x58>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	4622      	mov	r2, r4
 800a6ec:	4649      	mov	r1, r9
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	47c0      	blx	r8
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	d0e6      	beq.n	800a6c4 <_printf_common+0xa4>
 800a6f6:	3601      	adds	r6, #1
 800a6f8:	e7d9      	b.n	800a6ae <_printf_common+0x8e>
	...

0800a6fc <_printf_i>:
 800a6fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a700:	7e0f      	ldrb	r7, [r1, #24]
 800a702:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a704:	2f78      	cmp	r7, #120	; 0x78
 800a706:	4691      	mov	r9, r2
 800a708:	4680      	mov	r8, r0
 800a70a:	460c      	mov	r4, r1
 800a70c:	469a      	mov	sl, r3
 800a70e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a712:	d807      	bhi.n	800a724 <_printf_i+0x28>
 800a714:	2f62      	cmp	r7, #98	; 0x62
 800a716:	d80a      	bhi.n	800a72e <_printf_i+0x32>
 800a718:	2f00      	cmp	r7, #0
 800a71a:	f000 80d8 	beq.w	800a8ce <_printf_i+0x1d2>
 800a71e:	2f58      	cmp	r7, #88	; 0x58
 800a720:	f000 80a3 	beq.w	800a86a <_printf_i+0x16e>
 800a724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a72c:	e03a      	b.n	800a7a4 <_printf_i+0xa8>
 800a72e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a732:	2b15      	cmp	r3, #21
 800a734:	d8f6      	bhi.n	800a724 <_printf_i+0x28>
 800a736:	a101      	add	r1, pc, #4	; (adr r1, 800a73c <_printf_i+0x40>)
 800a738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a73c:	0800a795 	.word	0x0800a795
 800a740:	0800a7a9 	.word	0x0800a7a9
 800a744:	0800a725 	.word	0x0800a725
 800a748:	0800a725 	.word	0x0800a725
 800a74c:	0800a725 	.word	0x0800a725
 800a750:	0800a725 	.word	0x0800a725
 800a754:	0800a7a9 	.word	0x0800a7a9
 800a758:	0800a725 	.word	0x0800a725
 800a75c:	0800a725 	.word	0x0800a725
 800a760:	0800a725 	.word	0x0800a725
 800a764:	0800a725 	.word	0x0800a725
 800a768:	0800a8b5 	.word	0x0800a8b5
 800a76c:	0800a7d9 	.word	0x0800a7d9
 800a770:	0800a897 	.word	0x0800a897
 800a774:	0800a725 	.word	0x0800a725
 800a778:	0800a725 	.word	0x0800a725
 800a77c:	0800a8d7 	.word	0x0800a8d7
 800a780:	0800a725 	.word	0x0800a725
 800a784:	0800a7d9 	.word	0x0800a7d9
 800a788:	0800a725 	.word	0x0800a725
 800a78c:	0800a725 	.word	0x0800a725
 800a790:	0800a89f 	.word	0x0800a89f
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	1d1a      	adds	r2, r3, #4
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	602a      	str	r2, [r5, #0]
 800a79c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e0a3      	b.n	800a8f0 <_printf_i+0x1f4>
 800a7a8:	6820      	ldr	r0, [r4, #0]
 800a7aa:	6829      	ldr	r1, [r5, #0]
 800a7ac:	0606      	lsls	r6, r0, #24
 800a7ae:	f101 0304 	add.w	r3, r1, #4
 800a7b2:	d50a      	bpl.n	800a7ca <_printf_i+0xce>
 800a7b4:	680e      	ldr	r6, [r1, #0]
 800a7b6:	602b      	str	r3, [r5, #0]
 800a7b8:	2e00      	cmp	r6, #0
 800a7ba:	da03      	bge.n	800a7c4 <_printf_i+0xc8>
 800a7bc:	232d      	movs	r3, #45	; 0x2d
 800a7be:	4276      	negs	r6, r6
 800a7c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7c4:	485e      	ldr	r0, [pc, #376]	; (800a940 <_printf_i+0x244>)
 800a7c6:	230a      	movs	r3, #10
 800a7c8:	e019      	b.n	800a7fe <_printf_i+0x102>
 800a7ca:	680e      	ldr	r6, [r1, #0]
 800a7cc:	602b      	str	r3, [r5, #0]
 800a7ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a7d2:	bf18      	it	ne
 800a7d4:	b236      	sxthne	r6, r6
 800a7d6:	e7ef      	b.n	800a7b8 <_printf_i+0xbc>
 800a7d8:	682b      	ldr	r3, [r5, #0]
 800a7da:	6820      	ldr	r0, [r4, #0]
 800a7dc:	1d19      	adds	r1, r3, #4
 800a7de:	6029      	str	r1, [r5, #0]
 800a7e0:	0601      	lsls	r1, r0, #24
 800a7e2:	d501      	bpl.n	800a7e8 <_printf_i+0xec>
 800a7e4:	681e      	ldr	r6, [r3, #0]
 800a7e6:	e002      	b.n	800a7ee <_printf_i+0xf2>
 800a7e8:	0646      	lsls	r6, r0, #25
 800a7ea:	d5fb      	bpl.n	800a7e4 <_printf_i+0xe8>
 800a7ec:	881e      	ldrh	r6, [r3, #0]
 800a7ee:	4854      	ldr	r0, [pc, #336]	; (800a940 <_printf_i+0x244>)
 800a7f0:	2f6f      	cmp	r7, #111	; 0x6f
 800a7f2:	bf0c      	ite	eq
 800a7f4:	2308      	moveq	r3, #8
 800a7f6:	230a      	movne	r3, #10
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7fe:	6865      	ldr	r5, [r4, #4]
 800a800:	60a5      	str	r5, [r4, #8]
 800a802:	2d00      	cmp	r5, #0
 800a804:	bfa2      	ittt	ge
 800a806:	6821      	ldrge	r1, [r4, #0]
 800a808:	f021 0104 	bicge.w	r1, r1, #4
 800a80c:	6021      	strge	r1, [r4, #0]
 800a80e:	b90e      	cbnz	r6, 800a814 <_printf_i+0x118>
 800a810:	2d00      	cmp	r5, #0
 800a812:	d04d      	beq.n	800a8b0 <_printf_i+0x1b4>
 800a814:	4615      	mov	r5, r2
 800a816:	fbb6 f1f3 	udiv	r1, r6, r3
 800a81a:	fb03 6711 	mls	r7, r3, r1, r6
 800a81e:	5dc7      	ldrb	r7, [r0, r7]
 800a820:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a824:	4637      	mov	r7, r6
 800a826:	42bb      	cmp	r3, r7
 800a828:	460e      	mov	r6, r1
 800a82a:	d9f4      	bls.n	800a816 <_printf_i+0x11a>
 800a82c:	2b08      	cmp	r3, #8
 800a82e:	d10b      	bne.n	800a848 <_printf_i+0x14c>
 800a830:	6823      	ldr	r3, [r4, #0]
 800a832:	07de      	lsls	r6, r3, #31
 800a834:	d508      	bpl.n	800a848 <_printf_i+0x14c>
 800a836:	6923      	ldr	r3, [r4, #16]
 800a838:	6861      	ldr	r1, [r4, #4]
 800a83a:	4299      	cmp	r1, r3
 800a83c:	bfde      	ittt	le
 800a83e:	2330      	movle	r3, #48	; 0x30
 800a840:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a844:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a848:	1b52      	subs	r2, r2, r5
 800a84a:	6122      	str	r2, [r4, #16]
 800a84c:	f8cd a000 	str.w	sl, [sp]
 800a850:	464b      	mov	r3, r9
 800a852:	aa03      	add	r2, sp, #12
 800a854:	4621      	mov	r1, r4
 800a856:	4640      	mov	r0, r8
 800a858:	f7ff fee2 	bl	800a620 <_printf_common>
 800a85c:	3001      	adds	r0, #1
 800a85e:	d14c      	bne.n	800a8fa <_printf_i+0x1fe>
 800a860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a864:	b004      	add	sp, #16
 800a866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a86a:	4835      	ldr	r0, [pc, #212]	; (800a940 <_printf_i+0x244>)
 800a86c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a870:	6829      	ldr	r1, [r5, #0]
 800a872:	6823      	ldr	r3, [r4, #0]
 800a874:	f851 6b04 	ldr.w	r6, [r1], #4
 800a878:	6029      	str	r1, [r5, #0]
 800a87a:	061d      	lsls	r5, r3, #24
 800a87c:	d514      	bpl.n	800a8a8 <_printf_i+0x1ac>
 800a87e:	07df      	lsls	r7, r3, #31
 800a880:	bf44      	itt	mi
 800a882:	f043 0320 	orrmi.w	r3, r3, #32
 800a886:	6023      	strmi	r3, [r4, #0]
 800a888:	b91e      	cbnz	r6, 800a892 <_printf_i+0x196>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	f023 0320 	bic.w	r3, r3, #32
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	2310      	movs	r3, #16
 800a894:	e7b0      	b.n	800a7f8 <_printf_i+0xfc>
 800a896:	6823      	ldr	r3, [r4, #0]
 800a898:	f043 0320 	orr.w	r3, r3, #32
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	2378      	movs	r3, #120	; 0x78
 800a8a0:	4828      	ldr	r0, [pc, #160]	; (800a944 <_printf_i+0x248>)
 800a8a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8a6:	e7e3      	b.n	800a870 <_printf_i+0x174>
 800a8a8:	0659      	lsls	r1, r3, #25
 800a8aa:	bf48      	it	mi
 800a8ac:	b2b6      	uxthmi	r6, r6
 800a8ae:	e7e6      	b.n	800a87e <_printf_i+0x182>
 800a8b0:	4615      	mov	r5, r2
 800a8b2:	e7bb      	b.n	800a82c <_printf_i+0x130>
 800a8b4:	682b      	ldr	r3, [r5, #0]
 800a8b6:	6826      	ldr	r6, [r4, #0]
 800a8b8:	6961      	ldr	r1, [r4, #20]
 800a8ba:	1d18      	adds	r0, r3, #4
 800a8bc:	6028      	str	r0, [r5, #0]
 800a8be:	0635      	lsls	r5, r6, #24
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	d501      	bpl.n	800a8c8 <_printf_i+0x1cc>
 800a8c4:	6019      	str	r1, [r3, #0]
 800a8c6:	e002      	b.n	800a8ce <_printf_i+0x1d2>
 800a8c8:	0670      	lsls	r0, r6, #25
 800a8ca:	d5fb      	bpl.n	800a8c4 <_printf_i+0x1c8>
 800a8cc:	8019      	strh	r1, [r3, #0]
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	6123      	str	r3, [r4, #16]
 800a8d2:	4615      	mov	r5, r2
 800a8d4:	e7ba      	b.n	800a84c <_printf_i+0x150>
 800a8d6:	682b      	ldr	r3, [r5, #0]
 800a8d8:	1d1a      	adds	r2, r3, #4
 800a8da:	602a      	str	r2, [r5, #0]
 800a8dc:	681d      	ldr	r5, [r3, #0]
 800a8de:	6862      	ldr	r2, [r4, #4]
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f7f5 fc8c 	bl	8000200 <memchr>
 800a8e8:	b108      	cbz	r0, 800a8ee <_printf_i+0x1f2>
 800a8ea:	1b40      	subs	r0, r0, r5
 800a8ec:	6060      	str	r0, [r4, #4]
 800a8ee:	6863      	ldr	r3, [r4, #4]
 800a8f0:	6123      	str	r3, [r4, #16]
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8f8:	e7a8      	b.n	800a84c <_printf_i+0x150>
 800a8fa:	6923      	ldr	r3, [r4, #16]
 800a8fc:	462a      	mov	r2, r5
 800a8fe:	4649      	mov	r1, r9
 800a900:	4640      	mov	r0, r8
 800a902:	47d0      	blx	sl
 800a904:	3001      	adds	r0, #1
 800a906:	d0ab      	beq.n	800a860 <_printf_i+0x164>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	079b      	lsls	r3, r3, #30
 800a90c:	d413      	bmi.n	800a936 <_printf_i+0x23a>
 800a90e:	68e0      	ldr	r0, [r4, #12]
 800a910:	9b03      	ldr	r3, [sp, #12]
 800a912:	4298      	cmp	r0, r3
 800a914:	bfb8      	it	lt
 800a916:	4618      	movlt	r0, r3
 800a918:	e7a4      	b.n	800a864 <_printf_i+0x168>
 800a91a:	2301      	movs	r3, #1
 800a91c:	4632      	mov	r2, r6
 800a91e:	4649      	mov	r1, r9
 800a920:	4640      	mov	r0, r8
 800a922:	47d0      	blx	sl
 800a924:	3001      	adds	r0, #1
 800a926:	d09b      	beq.n	800a860 <_printf_i+0x164>
 800a928:	3501      	adds	r5, #1
 800a92a:	68e3      	ldr	r3, [r4, #12]
 800a92c:	9903      	ldr	r1, [sp, #12]
 800a92e:	1a5b      	subs	r3, r3, r1
 800a930:	42ab      	cmp	r3, r5
 800a932:	dcf2      	bgt.n	800a91a <_printf_i+0x21e>
 800a934:	e7eb      	b.n	800a90e <_printf_i+0x212>
 800a936:	2500      	movs	r5, #0
 800a938:	f104 0619 	add.w	r6, r4, #25
 800a93c:	e7f5      	b.n	800a92a <_printf_i+0x22e>
 800a93e:	bf00      	nop
 800a940:	0800eac6 	.word	0x0800eac6
 800a944:	0800ead7 	.word	0x0800ead7

0800a948 <_scanf_float>:
 800a948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94c:	b087      	sub	sp, #28
 800a94e:	4617      	mov	r7, r2
 800a950:	9303      	str	r3, [sp, #12]
 800a952:	688b      	ldr	r3, [r1, #8]
 800a954:	1e5a      	subs	r2, r3, #1
 800a956:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a95a:	bf83      	ittte	hi
 800a95c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a960:	195b      	addhi	r3, r3, r5
 800a962:	9302      	strhi	r3, [sp, #8]
 800a964:	2300      	movls	r3, #0
 800a966:	bf86      	itte	hi
 800a968:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a96c:	608b      	strhi	r3, [r1, #8]
 800a96e:	9302      	strls	r3, [sp, #8]
 800a970:	680b      	ldr	r3, [r1, #0]
 800a972:	468b      	mov	fp, r1
 800a974:	2500      	movs	r5, #0
 800a976:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a97a:	f84b 3b1c 	str.w	r3, [fp], #28
 800a97e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a982:	4680      	mov	r8, r0
 800a984:	460c      	mov	r4, r1
 800a986:	465e      	mov	r6, fp
 800a988:	46aa      	mov	sl, r5
 800a98a:	46a9      	mov	r9, r5
 800a98c:	9501      	str	r5, [sp, #4]
 800a98e:	68a2      	ldr	r2, [r4, #8]
 800a990:	b152      	cbz	r2, 800a9a8 <_scanf_float+0x60>
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	2b4e      	cmp	r3, #78	; 0x4e
 800a998:	d864      	bhi.n	800aa64 <_scanf_float+0x11c>
 800a99a:	2b40      	cmp	r3, #64	; 0x40
 800a99c:	d83c      	bhi.n	800aa18 <_scanf_float+0xd0>
 800a99e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a9a2:	b2c8      	uxtb	r0, r1
 800a9a4:	280e      	cmp	r0, #14
 800a9a6:	d93a      	bls.n	800aa1e <_scanf_float+0xd6>
 800a9a8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ac:	d003      	beq.n	800a9b6 <_scanf_float+0x6e>
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a9ba:	f1ba 0f01 	cmp.w	sl, #1
 800a9be:	f200 8113 	bhi.w	800abe8 <_scanf_float+0x2a0>
 800a9c2:	455e      	cmp	r6, fp
 800a9c4:	f200 8105 	bhi.w	800abd2 <_scanf_float+0x28a>
 800a9c8:	2501      	movs	r5, #1
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	b007      	add	sp, #28
 800a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a9d6:	2a0d      	cmp	r2, #13
 800a9d8:	d8e6      	bhi.n	800a9a8 <_scanf_float+0x60>
 800a9da:	a101      	add	r1, pc, #4	; (adr r1, 800a9e0 <_scanf_float+0x98>)
 800a9dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a9e0:	0800ab1f 	.word	0x0800ab1f
 800a9e4:	0800a9a9 	.word	0x0800a9a9
 800a9e8:	0800a9a9 	.word	0x0800a9a9
 800a9ec:	0800a9a9 	.word	0x0800a9a9
 800a9f0:	0800ab7f 	.word	0x0800ab7f
 800a9f4:	0800ab57 	.word	0x0800ab57
 800a9f8:	0800a9a9 	.word	0x0800a9a9
 800a9fc:	0800a9a9 	.word	0x0800a9a9
 800aa00:	0800ab2d 	.word	0x0800ab2d
 800aa04:	0800a9a9 	.word	0x0800a9a9
 800aa08:	0800a9a9 	.word	0x0800a9a9
 800aa0c:	0800a9a9 	.word	0x0800a9a9
 800aa10:	0800a9a9 	.word	0x0800a9a9
 800aa14:	0800aae5 	.word	0x0800aae5
 800aa18:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800aa1c:	e7db      	b.n	800a9d6 <_scanf_float+0x8e>
 800aa1e:	290e      	cmp	r1, #14
 800aa20:	d8c2      	bhi.n	800a9a8 <_scanf_float+0x60>
 800aa22:	a001      	add	r0, pc, #4	; (adr r0, 800aa28 <_scanf_float+0xe0>)
 800aa24:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aa28:	0800aad7 	.word	0x0800aad7
 800aa2c:	0800a9a9 	.word	0x0800a9a9
 800aa30:	0800aad7 	.word	0x0800aad7
 800aa34:	0800ab6b 	.word	0x0800ab6b
 800aa38:	0800a9a9 	.word	0x0800a9a9
 800aa3c:	0800aa85 	.word	0x0800aa85
 800aa40:	0800aac1 	.word	0x0800aac1
 800aa44:	0800aac1 	.word	0x0800aac1
 800aa48:	0800aac1 	.word	0x0800aac1
 800aa4c:	0800aac1 	.word	0x0800aac1
 800aa50:	0800aac1 	.word	0x0800aac1
 800aa54:	0800aac1 	.word	0x0800aac1
 800aa58:	0800aac1 	.word	0x0800aac1
 800aa5c:	0800aac1 	.word	0x0800aac1
 800aa60:	0800aac1 	.word	0x0800aac1
 800aa64:	2b6e      	cmp	r3, #110	; 0x6e
 800aa66:	d809      	bhi.n	800aa7c <_scanf_float+0x134>
 800aa68:	2b60      	cmp	r3, #96	; 0x60
 800aa6a:	d8b2      	bhi.n	800a9d2 <_scanf_float+0x8a>
 800aa6c:	2b54      	cmp	r3, #84	; 0x54
 800aa6e:	d077      	beq.n	800ab60 <_scanf_float+0x218>
 800aa70:	2b59      	cmp	r3, #89	; 0x59
 800aa72:	d199      	bne.n	800a9a8 <_scanf_float+0x60>
 800aa74:	2d07      	cmp	r5, #7
 800aa76:	d197      	bne.n	800a9a8 <_scanf_float+0x60>
 800aa78:	2508      	movs	r5, #8
 800aa7a:	e029      	b.n	800aad0 <_scanf_float+0x188>
 800aa7c:	2b74      	cmp	r3, #116	; 0x74
 800aa7e:	d06f      	beq.n	800ab60 <_scanf_float+0x218>
 800aa80:	2b79      	cmp	r3, #121	; 0x79
 800aa82:	e7f6      	b.n	800aa72 <_scanf_float+0x12a>
 800aa84:	6821      	ldr	r1, [r4, #0]
 800aa86:	05c8      	lsls	r0, r1, #23
 800aa88:	d51a      	bpl.n	800aac0 <_scanf_float+0x178>
 800aa8a:	9b02      	ldr	r3, [sp, #8]
 800aa8c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800aa90:	6021      	str	r1, [r4, #0]
 800aa92:	f109 0901 	add.w	r9, r9, #1
 800aa96:	b11b      	cbz	r3, 800aaa0 <_scanf_float+0x158>
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	3201      	adds	r2, #1
 800aa9c:	9302      	str	r3, [sp, #8]
 800aa9e:	60a2      	str	r2, [r4, #8]
 800aaa0:	68a3      	ldr	r3, [r4, #8]
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	60a3      	str	r3, [r4, #8]
 800aaa6:	6923      	ldr	r3, [r4, #16]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	6123      	str	r3, [r4, #16]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	3b01      	subs	r3, #1
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	607b      	str	r3, [r7, #4]
 800aab4:	f340 8084 	ble.w	800abc0 <_scanf_float+0x278>
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	3301      	adds	r3, #1
 800aabc:	603b      	str	r3, [r7, #0]
 800aabe:	e766      	b.n	800a98e <_scanf_float+0x46>
 800aac0:	eb1a 0f05 	cmn.w	sl, r5
 800aac4:	f47f af70 	bne.w	800a9a8 <_scanf_float+0x60>
 800aac8:	6822      	ldr	r2, [r4, #0]
 800aaca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800aace:	6022      	str	r2, [r4, #0]
 800aad0:	f806 3b01 	strb.w	r3, [r6], #1
 800aad4:	e7e4      	b.n	800aaa0 <_scanf_float+0x158>
 800aad6:	6822      	ldr	r2, [r4, #0]
 800aad8:	0610      	lsls	r0, r2, #24
 800aada:	f57f af65 	bpl.w	800a9a8 <_scanf_float+0x60>
 800aade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aae2:	e7f4      	b.n	800aace <_scanf_float+0x186>
 800aae4:	f1ba 0f00 	cmp.w	sl, #0
 800aae8:	d10e      	bne.n	800ab08 <_scanf_float+0x1c0>
 800aaea:	f1b9 0f00 	cmp.w	r9, #0
 800aaee:	d10e      	bne.n	800ab0e <_scanf_float+0x1c6>
 800aaf0:	6822      	ldr	r2, [r4, #0]
 800aaf2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aaf6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aafa:	d108      	bne.n	800ab0e <_scanf_float+0x1c6>
 800aafc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab00:	6022      	str	r2, [r4, #0]
 800ab02:	f04f 0a01 	mov.w	sl, #1
 800ab06:	e7e3      	b.n	800aad0 <_scanf_float+0x188>
 800ab08:	f1ba 0f02 	cmp.w	sl, #2
 800ab0c:	d055      	beq.n	800abba <_scanf_float+0x272>
 800ab0e:	2d01      	cmp	r5, #1
 800ab10:	d002      	beq.n	800ab18 <_scanf_float+0x1d0>
 800ab12:	2d04      	cmp	r5, #4
 800ab14:	f47f af48 	bne.w	800a9a8 <_scanf_float+0x60>
 800ab18:	3501      	adds	r5, #1
 800ab1a:	b2ed      	uxtb	r5, r5
 800ab1c:	e7d8      	b.n	800aad0 <_scanf_float+0x188>
 800ab1e:	f1ba 0f01 	cmp.w	sl, #1
 800ab22:	f47f af41 	bne.w	800a9a8 <_scanf_float+0x60>
 800ab26:	f04f 0a02 	mov.w	sl, #2
 800ab2a:	e7d1      	b.n	800aad0 <_scanf_float+0x188>
 800ab2c:	b97d      	cbnz	r5, 800ab4e <_scanf_float+0x206>
 800ab2e:	f1b9 0f00 	cmp.w	r9, #0
 800ab32:	f47f af3c 	bne.w	800a9ae <_scanf_float+0x66>
 800ab36:	6822      	ldr	r2, [r4, #0]
 800ab38:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ab3c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ab40:	f47f af39 	bne.w	800a9b6 <_scanf_float+0x6e>
 800ab44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab48:	6022      	str	r2, [r4, #0]
 800ab4a:	2501      	movs	r5, #1
 800ab4c:	e7c0      	b.n	800aad0 <_scanf_float+0x188>
 800ab4e:	2d03      	cmp	r5, #3
 800ab50:	d0e2      	beq.n	800ab18 <_scanf_float+0x1d0>
 800ab52:	2d05      	cmp	r5, #5
 800ab54:	e7de      	b.n	800ab14 <_scanf_float+0x1cc>
 800ab56:	2d02      	cmp	r5, #2
 800ab58:	f47f af26 	bne.w	800a9a8 <_scanf_float+0x60>
 800ab5c:	2503      	movs	r5, #3
 800ab5e:	e7b7      	b.n	800aad0 <_scanf_float+0x188>
 800ab60:	2d06      	cmp	r5, #6
 800ab62:	f47f af21 	bne.w	800a9a8 <_scanf_float+0x60>
 800ab66:	2507      	movs	r5, #7
 800ab68:	e7b2      	b.n	800aad0 <_scanf_float+0x188>
 800ab6a:	6822      	ldr	r2, [r4, #0]
 800ab6c:	0591      	lsls	r1, r2, #22
 800ab6e:	f57f af1b 	bpl.w	800a9a8 <_scanf_float+0x60>
 800ab72:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ab76:	6022      	str	r2, [r4, #0]
 800ab78:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab7c:	e7a8      	b.n	800aad0 <_scanf_float+0x188>
 800ab7e:	6822      	ldr	r2, [r4, #0]
 800ab80:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ab84:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ab88:	d006      	beq.n	800ab98 <_scanf_float+0x250>
 800ab8a:	0550      	lsls	r0, r2, #21
 800ab8c:	f57f af0c 	bpl.w	800a9a8 <_scanf_float+0x60>
 800ab90:	f1b9 0f00 	cmp.w	r9, #0
 800ab94:	f43f af0f 	beq.w	800a9b6 <_scanf_float+0x6e>
 800ab98:	0591      	lsls	r1, r2, #22
 800ab9a:	bf58      	it	pl
 800ab9c:	9901      	ldrpl	r1, [sp, #4]
 800ab9e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aba2:	bf58      	it	pl
 800aba4:	eba9 0101 	subpl.w	r1, r9, r1
 800aba8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800abac:	bf58      	it	pl
 800abae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800abb2:	6022      	str	r2, [r4, #0]
 800abb4:	f04f 0900 	mov.w	r9, #0
 800abb8:	e78a      	b.n	800aad0 <_scanf_float+0x188>
 800abba:	f04f 0a03 	mov.w	sl, #3
 800abbe:	e787      	b.n	800aad0 <_scanf_float+0x188>
 800abc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800abc4:	4639      	mov	r1, r7
 800abc6:	4640      	mov	r0, r8
 800abc8:	4798      	blx	r3
 800abca:	2800      	cmp	r0, #0
 800abcc:	f43f aedf 	beq.w	800a98e <_scanf_float+0x46>
 800abd0:	e6ea      	b.n	800a9a8 <_scanf_float+0x60>
 800abd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800abda:	463a      	mov	r2, r7
 800abdc:	4640      	mov	r0, r8
 800abde:	4798      	blx	r3
 800abe0:	6923      	ldr	r3, [r4, #16]
 800abe2:	3b01      	subs	r3, #1
 800abe4:	6123      	str	r3, [r4, #16]
 800abe6:	e6ec      	b.n	800a9c2 <_scanf_float+0x7a>
 800abe8:	1e6b      	subs	r3, r5, #1
 800abea:	2b06      	cmp	r3, #6
 800abec:	d825      	bhi.n	800ac3a <_scanf_float+0x2f2>
 800abee:	2d02      	cmp	r5, #2
 800abf0:	d836      	bhi.n	800ac60 <_scanf_float+0x318>
 800abf2:	455e      	cmp	r6, fp
 800abf4:	f67f aee8 	bls.w	800a9c8 <_scanf_float+0x80>
 800abf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abfc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac00:	463a      	mov	r2, r7
 800ac02:	4640      	mov	r0, r8
 800ac04:	4798      	blx	r3
 800ac06:	6923      	ldr	r3, [r4, #16]
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	6123      	str	r3, [r4, #16]
 800ac0c:	e7f1      	b.n	800abf2 <_scanf_float+0x2aa>
 800ac0e:	9802      	ldr	r0, [sp, #8]
 800ac10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac14:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ac18:	9002      	str	r0, [sp, #8]
 800ac1a:	463a      	mov	r2, r7
 800ac1c:	4640      	mov	r0, r8
 800ac1e:	4798      	blx	r3
 800ac20:	6923      	ldr	r3, [r4, #16]
 800ac22:	3b01      	subs	r3, #1
 800ac24:	6123      	str	r3, [r4, #16]
 800ac26:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ac2a:	fa5f fa8a 	uxtb.w	sl, sl
 800ac2e:	f1ba 0f02 	cmp.w	sl, #2
 800ac32:	d1ec      	bne.n	800ac0e <_scanf_float+0x2c6>
 800ac34:	3d03      	subs	r5, #3
 800ac36:	b2ed      	uxtb	r5, r5
 800ac38:	1b76      	subs	r6, r6, r5
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	05da      	lsls	r2, r3, #23
 800ac3e:	d52f      	bpl.n	800aca0 <_scanf_float+0x358>
 800ac40:	055b      	lsls	r3, r3, #21
 800ac42:	d510      	bpl.n	800ac66 <_scanf_float+0x31e>
 800ac44:	455e      	cmp	r6, fp
 800ac46:	f67f aebf 	bls.w	800a9c8 <_scanf_float+0x80>
 800ac4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac52:	463a      	mov	r2, r7
 800ac54:	4640      	mov	r0, r8
 800ac56:	4798      	blx	r3
 800ac58:	6923      	ldr	r3, [r4, #16]
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	6123      	str	r3, [r4, #16]
 800ac5e:	e7f1      	b.n	800ac44 <_scanf_float+0x2fc>
 800ac60:	46aa      	mov	sl, r5
 800ac62:	9602      	str	r6, [sp, #8]
 800ac64:	e7df      	b.n	800ac26 <_scanf_float+0x2de>
 800ac66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ac6a:	6923      	ldr	r3, [r4, #16]
 800ac6c:	2965      	cmp	r1, #101	; 0x65
 800ac6e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ac72:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800ac76:	6123      	str	r3, [r4, #16]
 800ac78:	d00c      	beq.n	800ac94 <_scanf_float+0x34c>
 800ac7a:	2945      	cmp	r1, #69	; 0x45
 800ac7c:	d00a      	beq.n	800ac94 <_scanf_float+0x34c>
 800ac7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac82:	463a      	mov	r2, r7
 800ac84:	4640      	mov	r0, r8
 800ac86:	4798      	blx	r3
 800ac88:	6923      	ldr	r3, [r4, #16]
 800ac8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	1eb5      	subs	r5, r6, #2
 800ac92:	6123      	str	r3, [r4, #16]
 800ac94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac98:	463a      	mov	r2, r7
 800ac9a:	4640      	mov	r0, r8
 800ac9c:	4798      	blx	r3
 800ac9e:	462e      	mov	r6, r5
 800aca0:	6825      	ldr	r5, [r4, #0]
 800aca2:	f015 0510 	ands.w	r5, r5, #16
 800aca6:	d159      	bne.n	800ad5c <_scanf_float+0x414>
 800aca8:	7035      	strb	r5, [r6, #0]
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800acb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acb4:	d11b      	bne.n	800acee <_scanf_float+0x3a6>
 800acb6:	9b01      	ldr	r3, [sp, #4]
 800acb8:	454b      	cmp	r3, r9
 800acba:	eba3 0209 	sub.w	r2, r3, r9
 800acbe:	d123      	bne.n	800ad08 <_scanf_float+0x3c0>
 800acc0:	2200      	movs	r2, #0
 800acc2:	4659      	mov	r1, fp
 800acc4:	4640      	mov	r0, r8
 800acc6:	f000 fedd 	bl	800ba84 <_strtod_r>
 800acca:	6822      	ldr	r2, [r4, #0]
 800accc:	9b03      	ldr	r3, [sp, #12]
 800acce:	f012 0f02 	tst.w	r2, #2
 800acd2:	ec57 6b10 	vmov	r6, r7, d0
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	d021      	beq.n	800ad1e <_scanf_float+0x3d6>
 800acda:	9903      	ldr	r1, [sp, #12]
 800acdc:	1d1a      	adds	r2, r3, #4
 800acde:	600a      	str	r2, [r1, #0]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	e9c3 6700 	strd	r6, r7, [r3]
 800ace6:	68e3      	ldr	r3, [r4, #12]
 800ace8:	3301      	adds	r3, #1
 800acea:	60e3      	str	r3, [r4, #12]
 800acec:	e66d      	b.n	800a9ca <_scanf_float+0x82>
 800acee:	9b04      	ldr	r3, [sp, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d0e5      	beq.n	800acc0 <_scanf_float+0x378>
 800acf4:	9905      	ldr	r1, [sp, #20]
 800acf6:	230a      	movs	r3, #10
 800acf8:	462a      	mov	r2, r5
 800acfa:	3101      	adds	r1, #1
 800acfc:	4640      	mov	r0, r8
 800acfe:	f000 ffb1 	bl	800bc64 <_strtol_r>
 800ad02:	9b04      	ldr	r3, [sp, #16]
 800ad04:	9e05      	ldr	r6, [sp, #20]
 800ad06:	1ac2      	subs	r2, r0, r3
 800ad08:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ad0c:	429e      	cmp	r6, r3
 800ad0e:	bf28      	it	cs
 800ad10:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ad14:	4912      	ldr	r1, [pc, #72]	; (800ad60 <_scanf_float+0x418>)
 800ad16:	4630      	mov	r0, r6
 800ad18:	f000 f870 	bl	800adfc <siprintf>
 800ad1c:	e7d0      	b.n	800acc0 <_scanf_float+0x378>
 800ad1e:	9903      	ldr	r1, [sp, #12]
 800ad20:	f012 0f04 	tst.w	r2, #4
 800ad24:	f103 0204 	add.w	r2, r3, #4
 800ad28:	600a      	str	r2, [r1, #0]
 800ad2a:	d1d9      	bne.n	800ace0 <_scanf_float+0x398>
 800ad2c:	f8d3 8000 	ldr.w	r8, [r3]
 800ad30:	ee10 2a10 	vmov	r2, s0
 800ad34:	ee10 0a10 	vmov	r0, s0
 800ad38:	463b      	mov	r3, r7
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	f7f5 ff06 	bl	8000b4c <__aeabi_dcmpun>
 800ad40:	b128      	cbz	r0, 800ad4e <_scanf_float+0x406>
 800ad42:	4808      	ldr	r0, [pc, #32]	; (800ad64 <_scanf_float+0x41c>)
 800ad44:	f000 f820 	bl	800ad88 <nanf>
 800ad48:	ed88 0a00 	vstr	s0, [r8]
 800ad4c:	e7cb      	b.n	800ace6 <_scanf_float+0x39e>
 800ad4e:	4630      	mov	r0, r6
 800ad50:	4639      	mov	r1, r7
 800ad52:	f7f5 ff59 	bl	8000c08 <__aeabi_d2f>
 800ad56:	f8c8 0000 	str.w	r0, [r8]
 800ad5a:	e7c4      	b.n	800ace6 <_scanf_float+0x39e>
 800ad5c:	2500      	movs	r5, #0
 800ad5e:	e634      	b.n	800a9ca <_scanf_float+0x82>
 800ad60:	0800eae8 	.word	0x0800eae8
 800ad64:	0800ebef 	.word	0x0800ebef

0800ad68 <_sbrk_r>:
 800ad68:	b538      	push	{r3, r4, r5, lr}
 800ad6a:	4d06      	ldr	r5, [pc, #24]	; (800ad84 <_sbrk_r+0x1c>)
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	4604      	mov	r4, r0
 800ad70:	4608      	mov	r0, r1
 800ad72:	602b      	str	r3, [r5, #0]
 800ad74:	f7f7 fbac 	bl	80024d0 <_sbrk>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d102      	bne.n	800ad82 <_sbrk_r+0x1a>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	b103      	cbz	r3, 800ad82 <_sbrk_r+0x1a>
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	2000207c 	.word	0x2000207c

0800ad88 <nanf>:
 800ad88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ad90 <nanf+0x8>
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	7fc00000 	.word	0x7fc00000

0800ad94 <sniprintf>:
 800ad94:	b40c      	push	{r2, r3}
 800ad96:	b530      	push	{r4, r5, lr}
 800ad98:	4b17      	ldr	r3, [pc, #92]	; (800adf8 <sniprintf+0x64>)
 800ad9a:	1e0c      	subs	r4, r1, #0
 800ad9c:	681d      	ldr	r5, [r3, #0]
 800ad9e:	b09d      	sub	sp, #116	; 0x74
 800ada0:	da08      	bge.n	800adb4 <sniprintf+0x20>
 800ada2:	238b      	movs	r3, #139	; 0x8b
 800ada4:	602b      	str	r3, [r5, #0]
 800ada6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adaa:	b01d      	add	sp, #116	; 0x74
 800adac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adb0:	b002      	add	sp, #8
 800adb2:	4770      	bx	lr
 800adb4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800adb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800adbc:	bf14      	ite	ne
 800adbe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800adc2:	4623      	moveq	r3, r4
 800adc4:	9304      	str	r3, [sp, #16]
 800adc6:	9307      	str	r3, [sp, #28]
 800adc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800adcc:	9002      	str	r0, [sp, #8]
 800adce:	9006      	str	r0, [sp, #24]
 800add0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800add4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800add6:	ab21      	add	r3, sp, #132	; 0x84
 800add8:	a902      	add	r1, sp, #8
 800adda:	4628      	mov	r0, r5
 800addc:	9301      	str	r3, [sp, #4]
 800adde:	f002 feb3 	bl	800db48 <_svfiprintf_r>
 800ade2:	1c43      	adds	r3, r0, #1
 800ade4:	bfbc      	itt	lt
 800ade6:	238b      	movlt	r3, #139	; 0x8b
 800ade8:	602b      	strlt	r3, [r5, #0]
 800adea:	2c00      	cmp	r4, #0
 800adec:	d0dd      	beq.n	800adaa <sniprintf+0x16>
 800adee:	9b02      	ldr	r3, [sp, #8]
 800adf0:	2200      	movs	r2, #0
 800adf2:	701a      	strb	r2, [r3, #0]
 800adf4:	e7d9      	b.n	800adaa <sniprintf+0x16>
 800adf6:	bf00      	nop
 800adf8:	2000013c 	.word	0x2000013c

0800adfc <siprintf>:
 800adfc:	b40e      	push	{r1, r2, r3}
 800adfe:	b500      	push	{lr}
 800ae00:	b09c      	sub	sp, #112	; 0x70
 800ae02:	ab1d      	add	r3, sp, #116	; 0x74
 800ae04:	9002      	str	r0, [sp, #8]
 800ae06:	9006      	str	r0, [sp, #24]
 800ae08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae0c:	4809      	ldr	r0, [pc, #36]	; (800ae34 <siprintf+0x38>)
 800ae0e:	9107      	str	r1, [sp, #28]
 800ae10:	9104      	str	r1, [sp, #16]
 800ae12:	4909      	ldr	r1, [pc, #36]	; (800ae38 <siprintf+0x3c>)
 800ae14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae18:	9105      	str	r1, [sp, #20]
 800ae1a:	6800      	ldr	r0, [r0, #0]
 800ae1c:	9301      	str	r3, [sp, #4]
 800ae1e:	a902      	add	r1, sp, #8
 800ae20:	f002 fe92 	bl	800db48 <_svfiprintf_r>
 800ae24:	9b02      	ldr	r3, [sp, #8]
 800ae26:	2200      	movs	r2, #0
 800ae28:	701a      	strb	r2, [r3, #0]
 800ae2a:	b01c      	add	sp, #112	; 0x70
 800ae2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae30:	b003      	add	sp, #12
 800ae32:	4770      	bx	lr
 800ae34:	2000013c 	.word	0x2000013c
 800ae38:	ffff0208 	.word	0xffff0208

0800ae3c <sulp>:
 800ae3c:	b570      	push	{r4, r5, r6, lr}
 800ae3e:	4604      	mov	r4, r0
 800ae40:	460d      	mov	r5, r1
 800ae42:	ec45 4b10 	vmov	d0, r4, r5
 800ae46:	4616      	mov	r6, r2
 800ae48:	f002 fcd4 	bl	800d7f4 <__ulp>
 800ae4c:	ec51 0b10 	vmov	r0, r1, d0
 800ae50:	b17e      	cbz	r6, 800ae72 <sulp+0x36>
 800ae52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	dd09      	ble.n	800ae72 <sulp+0x36>
 800ae5e:	051b      	lsls	r3, r3, #20
 800ae60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ae64:	2400      	movs	r4, #0
 800ae66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ae6a:	4622      	mov	r2, r4
 800ae6c:	462b      	mov	r3, r5
 800ae6e:	f7f5 fbd3 	bl	8000618 <__aeabi_dmul>
 800ae72:	bd70      	pop	{r4, r5, r6, pc}
 800ae74:	0000      	movs	r0, r0
	...

0800ae78 <_strtod_l>:
 800ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7c:	ed2d 8b02 	vpush	{d8}
 800ae80:	b09d      	sub	sp, #116	; 0x74
 800ae82:	461f      	mov	r7, r3
 800ae84:	2300      	movs	r3, #0
 800ae86:	9318      	str	r3, [sp, #96]	; 0x60
 800ae88:	4ba2      	ldr	r3, [pc, #648]	; (800b114 <_strtod_l+0x29c>)
 800ae8a:	9213      	str	r2, [sp, #76]	; 0x4c
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	9305      	str	r3, [sp, #20]
 800ae90:	4604      	mov	r4, r0
 800ae92:	4618      	mov	r0, r3
 800ae94:	4688      	mov	r8, r1
 800ae96:	f7f5 f9a5 	bl	80001e4 <strlen>
 800ae9a:	f04f 0a00 	mov.w	sl, #0
 800ae9e:	4605      	mov	r5, r0
 800aea0:	f04f 0b00 	mov.w	fp, #0
 800aea4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aeaa:	781a      	ldrb	r2, [r3, #0]
 800aeac:	2a2b      	cmp	r2, #43	; 0x2b
 800aeae:	d04e      	beq.n	800af4e <_strtod_l+0xd6>
 800aeb0:	d83b      	bhi.n	800af2a <_strtod_l+0xb2>
 800aeb2:	2a0d      	cmp	r2, #13
 800aeb4:	d834      	bhi.n	800af20 <_strtod_l+0xa8>
 800aeb6:	2a08      	cmp	r2, #8
 800aeb8:	d834      	bhi.n	800af24 <_strtod_l+0xac>
 800aeba:	2a00      	cmp	r2, #0
 800aebc:	d03e      	beq.n	800af3c <_strtod_l+0xc4>
 800aebe:	2300      	movs	r3, #0
 800aec0:	930a      	str	r3, [sp, #40]	; 0x28
 800aec2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800aec4:	7833      	ldrb	r3, [r6, #0]
 800aec6:	2b30      	cmp	r3, #48	; 0x30
 800aec8:	f040 80b0 	bne.w	800b02c <_strtod_l+0x1b4>
 800aecc:	7873      	ldrb	r3, [r6, #1]
 800aece:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aed2:	2b58      	cmp	r3, #88	; 0x58
 800aed4:	d168      	bne.n	800afa8 <_strtod_l+0x130>
 800aed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aed8:	9301      	str	r3, [sp, #4]
 800aeda:	ab18      	add	r3, sp, #96	; 0x60
 800aedc:	9702      	str	r7, [sp, #8]
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	4a8d      	ldr	r2, [pc, #564]	; (800b118 <_strtod_l+0x2a0>)
 800aee2:	ab19      	add	r3, sp, #100	; 0x64
 800aee4:	a917      	add	r1, sp, #92	; 0x5c
 800aee6:	4620      	mov	r0, r4
 800aee8:	f001 fdda 	bl	800caa0 <__gethex>
 800aeec:	f010 0707 	ands.w	r7, r0, #7
 800aef0:	4605      	mov	r5, r0
 800aef2:	d005      	beq.n	800af00 <_strtod_l+0x88>
 800aef4:	2f06      	cmp	r7, #6
 800aef6:	d12c      	bne.n	800af52 <_strtod_l+0xda>
 800aef8:	3601      	adds	r6, #1
 800aefa:	2300      	movs	r3, #0
 800aefc:	9617      	str	r6, [sp, #92]	; 0x5c
 800aefe:	930a      	str	r3, [sp, #40]	; 0x28
 800af00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af02:	2b00      	cmp	r3, #0
 800af04:	f040 8590 	bne.w	800ba28 <_strtod_l+0xbb0>
 800af08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af0a:	b1eb      	cbz	r3, 800af48 <_strtod_l+0xd0>
 800af0c:	4652      	mov	r2, sl
 800af0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af12:	ec43 2b10 	vmov	d0, r2, r3
 800af16:	b01d      	add	sp, #116	; 0x74
 800af18:	ecbd 8b02 	vpop	{d8}
 800af1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af20:	2a20      	cmp	r2, #32
 800af22:	d1cc      	bne.n	800aebe <_strtod_l+0x46>
 800af24:	3301      	adds	r3, #1
 800af26:	9317      	str	r3, [sp, #92]	; 0x5c
 800af28:	e7be      	b.n	800aea8 <_strtod_l+0x30>
 800af2a:	2a2d      	cmp	r2, #45	; 0x2d
 800af2c:	d1c7      	bne.n	800aebe <_strtod_l+0x46>
 800af2e:	2201      	movs	r2, #1
 800af30:	920a      	str	r2, [sp, #40]	; 0x28
 800af32:	1c5a      	adds	r2, r3, #1
 800af34:	9217      	str	r2, [sp, #92]	; 0x5c
 800af36:	785b      	ldrb	r3, [r3, #1]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1c2      	bne.n	800aec2 <_strtod_l+0x4a>
 800af3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800af42:	2b00      	cmp	r3, #0
 800af44:	f040 856e 	bne.w	800ba24 <_strtod_l+0xbac>
 800af48:	4652      	mov	r2, sl
 800af4a:	465b      	mov	r3, fp
 800af4c:	e7e1      	b.n	800af12 <_strtod_l+0x9a>
 800af4e:	2200      	movs	r2, #0
 800af50:	e7ee      	b.n	800af30 <_strtod_l+0xb8>
 800af52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800af54:	b13a      	cbz	r2, 800af66 <_strtod_l+0xee>
 800af56:	2135      	movs	r1, #53	; 0x35
 800af58:	a81a      	add	r0, sp, #104	; 0x68
 800af5a:	f002 fd56 	bl	800da0a <__copybits>
 800af5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af60:	4620      	mov	r0, r4
 800af62:	f002 f915 	bl	800d190 <_Bfree>
 800af66:	3f01      	subs	r7, #1
 800af68:	2f04      	cmp	r7, #4
 800af6a:	d806      	bhi.n	800af7a <_strtod_l+0x102>
 800af6c:	e8df f007 	tbb	[pc, r7]
 800af70:	1714030a 	.word	0x1714030a
 800af74:	0a          	.byte	0x0a
 800af75:	00          	.byte	0x00
 800af76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800af7a:	0728      	lsls	r0, r5, #28
 800af7c:	d5c0      	bpl.n	800af00 <_strtod_l+0x88>
 800af7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800af82:	e7bd      	b.n	800af00 <_strtod_l+0x88>
 800af84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800af88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800af8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800af8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800af92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800af96:	e7f0      	b.n	800af7a <_strtod_l+0x102>
 800af98:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b11c <_strtod_l+0x2a4>
 800af9c:	e7ed      	b.n	800af7a <_strtod_l+0x102>
 800af9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800afa2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800afa6:	e7e8      	b.n	800af7a <_strtod_l+0x102>
 800afa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800afaa:	1c5a      	adds	r2, r3, #1
 800afac:	9217      	str	r2, [sp, #92]	; 0x5c
 800afae:	785b      	ldrb	r3, [r3, #1]
 800afb0:	2b30      	cmp	r3, #48	; 0x30
 800afb2:	d0f9      	beq.n	800afa8 <_strtod_l+0x130>
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d0a3      	beq.n	800af00 <_strtod_l+0x88>
 800afb8:	2301      	movs	r3, #1
 800afba:	f04f 0900 	mov.w	r9, #0
 800afbe:	9304      	str	r3, [sp, #16]
 800afc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800afc2:	9308      	str	r3, [sp, #32]
 800afc4:	f8cd 901c 	str.w	r9, [sp, #28]
 800afc8:	464f      	mov	r7, r9
 800afca:	220a      	movs	r2, #10
 800afcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800afce:	7806      	ldrb	r6, [r0, #0]
 800afd0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800afd4:	b2d9      	uxtb	r1, r3
 800afd6:	2909      	cmp	r1, #9
 800afd8:	d92a      	bls.n	800b030 <_strtod_l+0x1b8>
 800afda:	9905      	ldr	r1, [sp, #20]
 800afdc:	462a      	mov	r2, r5
 800afde:	f003 f817 	bl	800e010 <strncmp>
 800afe2:	b398      	cbz	r0, 800b04c <_strtod_l+0x1d4>
 800afe4:	2000      	movs	r0, #0
 800afe6:	4632      	mov	r2, r6
 800afe8:	463d      	mov	r5, r7
 800afea:	9005      	str	r0, [sp, #20]
 800afec:	4603      	mov	r3, r0
 800afee:	2a65      	cmp	r2, #101	; 0x65
 800aff0:	d001      	beq.n	800aff6 <_strtod_l+0x17e>
 800aff2:	2a45      	cmp	r2, #69	; 0x45
 800aff4:	d118      	bne.n	800b028 <_strtod_l+0x1b0>
 800aff6:	b91d      	cbnz	r5, 800b000 <_strtod_l+0x188>
 800aff8:	9a04      	ldr	r2, [sp, #16]
 800affa:	4302      	orrs	r2, r0
 800affc:	d09e      	beq.n	800af3c <_strtod_l+0xc4>
 800affe:	2500      	movs	r5, #0
 800b000:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b004:	f108 0201 	add.w	r2, r8, #1
 800b008:	9217      	str	r2, [sp, #92]	; 0x5c
 800b00a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b00e:	2a2b      	cmp	r2, #43	; 0x2b
 800b010:	d075      	beq.n	800b0fe <_strtod_l+0x286>
 800b012:	2a2d      	cmp	r2, #45	; 0x2d
 800b014:	d07b      	beq.n	800b10e <_strtod_l+0x296>
 800b016:	f04f 0c00 	mov.w	ip, #0
 800b01a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b01e:	2909      	cmp	r1, #9
 800b020:	f240 8082 	bls.w	800b128 <_strtod_l+0x2b0>
 800b024:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b028:	2600      	movs	r6, #0
 800b02a:	e09d      	b.n	800b168 <_strtod_l+0x2f0>
 800b02c:	2300      	movs	r3, #0
 800b02e:	e7c4      	b.n	800afba <_strtod_l+0x142>
 800b030:	2f08      	cmp	r7, #8
 800b032:	bfd8      	it	le
 800b034:	9907      	ldrle	r1, [sp, #28]
 800b036:	f100 0001 	add.w	r0, r0, #1
 800b03a:	bfda      	itte	le
 800b03c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b040:	9307      	strle	r3, [sp, #28]
 800b042:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b046:	3701      	adds	r7, #1
 800b048:	9017      	str	r0, [sp, #92]	; 0x5c
 800b04a:	e7bf      	b.n	800afcc <_strtod_l+0x154>
 800b04c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b04e:	195a      	adds	r2, r3, r5
 800b050:	9217      	str	r2, [sp, #92]	; 0x5c
 800b052:	5d5a      	ldrb	r2, [r3, r5]
 800b054:	2f00      	cmp	r7, #0
 800b056:	d037      	beq.n	800b0c8 <_strtod_l+0x250>
 800b058:	9005      	str	r0, [sp, #20]
 800b05a:	463d      	mov	r5, r7
 800b05c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b060:	2b09      	cmp	r3, #9
 800b062:	d912      	bls.n	800b08a <_strtod_l+0x212>
 800b064:	2301      	movs	r3, #1
 800b066:	e7c2      	b.n	800afee <_strtod_l+0x176>
 800b068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b06a:	1c5a      	adds	r2, r3, #1
 800b06c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b06e:	785a      	ldrb	r2, [r3, #1]
 800b070:	3001      	adds	r0, #1
 800b072:	2a30      	cmp	r2, #48	; 0x30
 800b074:	d0f8      	beq.n	800b068 <_strtod_l+0x1f0>
 800b076:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b07a:	2b08      	cmp	r3, #8
 800b07c:	f200 84d9 	bhi.w	800ba32 <_strtod_l+0xbba>
 800b080:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b082:	9005      	str	r0, [sp, #20]
 800b084:	2000      	movs	r0, #0
 800b086:	9308      	str	r3, [sp, #32]
 800b088:	4605      	mov	r5, r0
 800b08a:	3a30      	subs	r2, #48	; 0x30
 800b08c:	f100 0301 	add.w	r3, r0, #1
 800b090:	d014      	beq.n	800b0bc <_strtod_l+0x244>
 800b092:	9905      	ldr	r1, [sp, #20]
 800b094:	4419      	add	r1, r3
 800b096:	9105      	str	r1, [sp, #20]
 800b098:	462b      	mov	r3, r5
 800b09a:	eb00 0e05 	add.w	lr, r0, r5
 800b09e:	210a      	movs	r1, #10
 800b0a0:	4573      	cmp	r3, lr
 800b0a2:	d113      	bne.n	800b0cc <_strtod_l+0x254>
 800b0a4:	182b      	adds	r3, r5, r0
 800b0a6:	2b08      	cmp	r3, #8
 800b0a8:	f105 0501 	add.w	r5, r5, #1
 800b0ac:	4405      	add	r5, r0
 800b0ae:	dc1c      	bgt.n	800b0ea <_strtod_l+0x272>
 800b0b0:	9907      	ldr	r1, [sp, #28]
 800b0b2:	230a      	movs	r3, #10
 800b0b4:	fb03 2301 	mla	r3, r3, r1, r2
 800b0b8:	9307      	str	r3, [sp, #28]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b0be:	1c51      	adds	r1, r2, #1
 800b0c0:	9117      	str	r1, [sp, #92]	; 0x5c
 800b0c2:	7852      	ldrb	r2, [r2, #1]
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	e7c9      	b.n	800b05c <_strtod_l+0x1e4>
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	e7d2      	b.n	800b072 <_strtod_l+0x1fa>
 800b0cc:	2b08      	cmp	r3, #8
 800b0ce:	dc04      	bgt.n	800b0da <_strtod_l+0x262>
 800b0d0:	9e07      	ldr	r6, [sp, #28]
 800b0d2:	434e      	muls	r6, r1
 800b0d4:	9607      	str	r6, [sp, #28]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	e7e2      	b.n	800b0a0 <_strtod_l+0x228>
 800b0da:	f103 0c01 	add.w	ip, r3, #1
 800b0de:	f1bc 0f10 	cmp.w	ip, #16
 800b0e2:	bfd8      	it	le
 800b0e4:	fb01 f909 	mulle.w	r9, r1, r9
 800b0e8:	e7f5      	b.n	800b0d6 <_strtod_l+0x25e>
 800b0ea:	2d10      	cmp	r5, #16
 800b0ec:	bfdc      	itt	le
 800b0ee:	230a      	movle	r3, #10
 800b0f0:	fb03 2909 	mlale	r9, r3, r9, r2
 800b0f4:	e7e1      	b.n	800b0ba <_strtod_l+0x242>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	9305      	str	r3, [sp, #20]
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e77c      	b.n	800aff8 <_strtod_l+0x180>
 800b0fe:	f04f 0c00 	mov.w	ip, #0
 800b102:	f108 0202 	add.w	r2, r8, #2
 800b106:	9217      	str	r2, [sp, #92]	; 0x5c
 800b108:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b10c:	e785      	b.n	800b01a <_strtod_l+0x1a2>
 800b10e:	f04f 0c01 	mov.w	ip, #1
 800b112:	e7f6      	b.n	800b102 <_strtod_l+0x28a>
 800b114:	0800edd0 	.word	0x0800edd0
 800b118:	0800eaf0 	.word	0x0800eaf0
 800b11c:	7ff00000 	.word	0x7ff00000
 800b120:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b122:	1c51      	adds	r1, r2, #1
 800b124:	9117      	str	r1, [sp, #92]	; 0x5c
 800b126:	7852      	ldrb	r2, [r2, #1]
 800b128:	2a30      	cmp	r2, #48	; 0x30
 800b12a:	d0f9      	beq.n	800b120 <_strtod_l+0x2a8>
 800b12c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b130:	2908      	cmp	r1, #8
 800b132:	f63f af79 	bhi.w	800b028 <_strtod_l+0x1b0>
 800b136:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b13a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b13c:	9206      	str	r2, [sp, #24]
 800b13e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b140:	1c51      	adds	r1, r2, #1
 800b142:	9117      	str	r1, [sp, #92]	; 0x5c
 800b144:	7852      	ldrb	r2, [r2, #1]
 800b146:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b14a:	2e09      	cmp	r6, #9
 800b14c:	d937      	bls.n	800b1be <_strtod_l+0x346>
 800b14e:	9e06      	ldr	r6, [sp, #24]
 800b150:	1b89      	subs	r1, r1, r6
 800b152:	2908      	cmp	r1, #8
 800b154:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b158:	dc02      	bgt.n	800b160 <_strtod_l+0x2e8>
 800b15a:	4576      	cmp	r6, lr
 800b15c:	bfa8      	it	ge
 800b15e:	4676      	movge	r6, lr
 800b160:	f1bc 0f00 	cmp.w	ip, #0
 800b164:	d000      	beq.n	800b168 <_strtod_l+0x2f0>
 800b166:	4276      	negs	r6, r6
 800b168:	2d00      	cmp	r5, #0
 800b16a:	d14d      	bne.n	800b208 <_strtod_l+0x390>
 800b16c:	9904      	ldr	r1, [sp, #16]
 800b16e:	4301      	orrs	r1, r0
 800b170:	f47f aec6 	bne.w	800af00 <_strtod_l+0x88>
 800b174:	2b00      	cmp	r3, #0
 800b176:	f47f aee1 	bne.w	800af3c <_strtod_l+0xc4>
 800b17a:	2a69      	cmp	r2, #105	; 0x69
 800b17c:	d027      	beq.n	800b1ce <_strtod_l+0x356>
 800b17e:	dc24      	bgt.n	800b1ca <_strtod_l+0x352>
 800b180:	2a49      	cmp	r2, #73	; 0x49
 800b182:	d024      	beq.n	800b1ce <_strtod_l+0x356>
 800b184:	2a4e      	cmp	r2, #78	; 0x4e
 800b186:	f47f aed9 	bne.w	800af3c <_strtod_l+0xc4>
 800b18a:	499f      	ldr	r1, [pc, #636]	; (800b408 <_strtod_l+0x590>)
 800b18c:	a817      	add	r0, sp, #92	; 0x5c
 800b18e:	f001 fedf 	bl	800cf50 <__match>
 800b192:	2800      	cmp	r0, #0
 800b194:	f43f aed2 	beq.w	800af3c <_strtod_l+0xc4>
 800b198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	2b28      	cmp	r3, #40	; 0x28
 800b19e:	d12d      	bne.n	800b1fc <_strtod_l+0x384>
 800b1a0:	499a      	ldr	r1, [pc, #616]	; (800b40c <_strtod_l+0x594>)
 800b1a2:	aa1a      	add	r2, sp, #104	; 0x68
 800b1a4:	a817      	add	r0, sp, #92	; 0x5c
 800b1a6:	f001 fee7 	bl	800cf78 <__hexnan>
 800b1aa:	2805      	cmp	r0, #5
 800b1ac:	d126      	bne.n	800b1fc <_strtod_l+0x384>
 800b1ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b1b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b1b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b1bc:	e6a0      	b.n	800af00 <_strtod_l+0x88>
 800b1be:	210a      	movs	r1, #10
 800b1c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b1c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b1c8:	e7b9      	b.n	800b13e <_strtod_l+0x2c6>
 800b1ca:	2a6e      	cmp	r2, #110	; 0x6e
 800b1cc:	e7db      	b.n	800b186 <_strtod_l+0x30e>
 800b1ce:	4990      	ldr	r1, [pc, #576]	; (800b410 <_strtod_l+0x598>)
 800b1d0:	a817      	add	r0, sp, #92	; 0x5c
 800b1d2:	f001 febd 	bl	800cf50 <__match>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	f43f aeb0 	beq.w	800af3c <_strtod_l+0xc4>
 800b1dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1de:	498d      	ldr	r1, [pc, #564]	; (800b414 <_strtod_l+0x59c>)
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	a817      	add	r0, sp, #92	; 0x5c
 800b1e4:	9317      	str	r3, [sp, #92]	; 0x5c
 800b1e6:	f001 feb3 	bl	800cf50 <__match>
 800b1ea:	b910      	cbnz	r0, 800b1f2 <_strtod_l+0x37a>
 800b1ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	9317      	str	r3, [sp, #92]	; 0x5c
 800b1f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b424 <_strtod_l+0x5ac>
 800b1f6:	f04f 0a00 	mov.w	sl, #0
 800b1fa:	e681      	b.n	800af00 <_strtod_l+0x88>
 800b1fc:	4886      	ldr	r0, [pc, #536]	; (800b418 <_strtod_l+0x5a0>)
 800b1fe:	f002 feff 	bl	800e000 <nan>
 800b202:	ec5b ab10 	vmov	sl, fp, d0
 800b206:	e67b      	b.n	800af00 <_strtod_l+0x88>
 800b208:	9b05      	ldr	r3, [sp, #20]
 800b20a:	9807      	ldr	r0, [sp, #28]
 800b20c:	1af3      	subs	r3, r6, r3
 800b20e:	2f00      	cmp	r7, #0
 800b210:	bf08      	it	eq
 800b212:	462f      	moveq	r7, r5
 800b214:	2d10      	cmp	r5, #16
 800b216:	9306      	str	r3, [sp, #24]
 800b218:	46a8      	mov	r8, r5
 800b21a:	bfa8      	it	ge
 800b21c:	f04f 0810 	movge.w	r8, #16
 800b220:	f7f5 f980 	bl	8000524 <__aeabi_ui2d>
 800b224:	2d09      	cmp	r5, #9
 800b226:	4682      	mov	sl, r0
 800b228:	468b      	mov	fp, r1
 800b22a:	dd13      	ble.n	800b254 <_strtod_l+0x3dc>
 800b22c:	4b7b      	ldr	r3, [pc, #492]	; (800b41c <_strtod_l+0x5a4>)
 800b22e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b232:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b236:	f7f5 f9ef 	bl	8000618 <__aeabi_dmul>
 800b23a:	4682      	mov	sl, r0
 800b23c:	4648      	mov	r0, r9
 800b23e:	468b      	mov	fp, r1
 800b240:	f7f5 f970 	bl	8000524 <__aeabi_ui2d>
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	4650      	mov	r0, sl
 800b24a:	4659      	mov	r1, fp
 800b24c:	f7f5 f82e 	bl	80002ac <__adddf3>
 800b250:	4682      	mov	sl, r0
 800b252:	468b      	mov	fp, r1
 800b254:	2d0f      	cmp	r5, #15
 800b256:	dc38      	bgt.n	800b2ca <_strtod_l+0x452>
 800b258:	9b06      	ldr	r3, [sp, #24]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f43f ae50 	beq.w	800af00 <_strtod_l+0x88>
 800b260:	dd24      	ble.n	800b2ac <_strtod_l+0x434>
 800b262:	2b16      	cmp	r3, #22
 800b264:	dc0b      	bgt.n	800b27e <_strtod_l+0x406>
 800b266:	496d      	ldr	r1, [pc, #436]	; (800b41c <_strtod_l+0x5a4>)
 800b268:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b26c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b270:	4652      	mov	r2, sl
 800b272:	465b      	mov	r3, fp
 800b274:	f7f5 f9d0 	bl	8000618 <__aeabi_dmul>
 800b278:	4682      	mov	sl, r0
 800b27a:	468b      	mov	fp, r1
 800b27c:	e640      	b.n	800af00 <_strtod_l+0x88>
 800b27e:	9a06      	ldr	r2, [sp, #24]
 800b280:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b284:	4293      	cmp	r3, r2
 800b286:	db20      	blt.n	800b2ca <_strtod_l+0x452>
 800b288:	4c64      	ldr	r4, [pc, #400]	; (800b41c <_strtod_l+0x5a4>)
 800b28a:	f1c5 050f 	rsb	r5, r5, #15
 800b28e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b292:	4652      	mov	r2, sl
 800b294:	465b      	mov	r3, fp
 800b296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b29a:	f7f5 f9bd 	bl	8000618 <__aeabi_dmul>
 800b29e:	9b06      	ldr	r3, [sp, #24]
 800b2a0:	1b5d      	subs	r5, r3, r5
 800b2a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b2a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b2aa:	e7e3      	b.n	800b274 <_strtod_l+0x3fc>
 800b2ac:	9b06      	ldr	r3, [sp, #24]
 800b2ae:	3316      	adds	r3, #22
 800b2b0:	db0b      	blt.n	800b2ca <_strtod_l+0x452>
 800b2b2:	9b05      	ldr	r3, [sp, #20]
 800b2b4:	1b9e      	subs	r6, r3, r6
 800b2b6:	4b59      	ldr	r3, [pc, #356]	; (800b41c <_strtod_l+0x5a4>)
 800b2b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b2bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2c0:	4650      	mov	r0, sl
 800b2c2:	4659      	mov	r1, fp
 800b2c4:	f7f5 fad2 	bl	800086c <__aeabi_ddiv>
 800b2c8:	e7d6      	b.n	800b278 <_strtod_l+0x400>
 800b2ca:	9b06      	ldr	r3, [sp, #24]
 800b2cc:	eba5 0808 	sub.w	r8, r5, r8
 800b2d0:	4498      	add	r8, r3
 800b2d2:	f1b8 0f00 	cmp.w	r8, #0
 800b2d6:	dd74      	ble.n	800b3c2 <_strtod_l+0x54a>
 800b2d8:	f018 030f 	ands.w	r3, r8, #15
 800b2dc:	d00a      	beq.n	800b2f4 <_strtod_l+0x47c>
 800b2de:	494f      	ldr	r1, [pc, #316]	; (800b41c <_strtod_l+0x5a4>)
 800b2e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2e4:	4652      	mov	r2, sl
 800b2e6:	465b      	mov	r3, fp
 800b2e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2ec:	f7f5 f994 	bl	8000618 <__aeabi_dmul>
 800b2f0:	4682      	mov	sl, r0
 800b2f2:	468b      	mov	fp, r1
 800b2f4:	f038 080f 	bics.w	r8, r8, #15
 800b2f8:	d04f      	beq.n	800b39a <_strtod_l+0x522>
 800b2fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b2fe:	dd22      	ble.n	800b346 <_strtod_l+0x4ce>
 800b300:	2500      	movs	r5, #0
 800b302:	462e      	mov	r6, r5
 800b304:	9507      	str	r5, [sp, #28]
 800b306:	9505      	str	r5, [sp, #20]
 800b308:	2322      	movs	r3, #34	; 0x22
 800b30a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b424 <_strtod_l+0x5ac>
 800b30e:	6023      	str	r3, [r4, #0]
 800b310:	f04f 0a00 	mov.w	sl, #0
 800b314:	9b07      	ldr	r3, [sp, #28]
 800b316:	2b00      	cmp	r3, #0
 800b318:	f43f adf2 	beq.w	800af00 <_strtod_l+0x88>
 800b31c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b31e:	4620      	mov	r0, r4
 800b320:	f001 ff36 	bl	800d190 <_Bfree>
 800b324:	9905      	ldr	r1, [sp, #20]
 800b326:	4620      	mov	r0, r4
 800b328:	f001 ff32 	bl	800d190 <_Bfree>
 800b32c:	4631      	mov	r1, r6
 800b32e:	4620      	mov	r0, r4
 800b330:	f001 ff2e 	bl	800d190 <_Bfree>
 800b334:	9907      	ldr	r1, [sp, #28]
 800b336:	4620      	mov	r0, r4
 800b338:	f001 ff2a 	bl	800d190 <_Bfree>
 800b33c:	4629      	mov	r1, r5
 800b33e:	4620      	mov	r0, r4
 800b340:	f001 ff26 	bl	800d190 <_Bfree>
 800b344:	e5dc      	b.n	800af00 <_strtod_l+0x88>
 800b346:	4b36      	ldr	r3, [pc, #216]	; (800b420 <_strtod_l+0x5a8>)
 800b348:	9304      	str	r3, [sp, #16]
 800b34a:	2300      	movs	r3, #0
 800b34c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b350:	4650      	mov	r0, sl
 800b352:	4659      	mov	r1, fp
 800b354:	4699      	mov	r9, r3
 800b356:	f1b8 0f01 	cmp.w	r8, #1
 800b35a:	dc21      	bgt.n	800b3a0 <_strtod_l+0x528>
 800b35c:	b10b      	cbz	r3, 800b362 <_strtod_l+0x4ea>
 800b35e:	4682      	mov	sl, r0
 800b360:	468b      	mov	fp, r1
 800b362:	4b2f      	ldr	r3, [pc, #188]	; (800b420 <_strtod_l+0x5a8>)
 800b364:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b368:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b36c:	4652      	mov	r2, sl
 800b36e:	465b      	mov	r3, fp
 800b370:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b374:	f7f5 f950 	bl	8000618 <__aeabi_dmul>
 800b378:	4b2a      	ldr	r3, [pc, #168]	; (800b424 <_strtod_l+0x5ac>)
 800b37a:	460a      	mov	r2, r1
 800b37c:	400b      	ands	r3, r1
 800b37e:	492a      	ldr	r1, [pc, #168]	; (800b428 <_strtod_l+0x5b0>)
 800b380:	428b      	cmp	r3, r1
 800b382:	4682      	mov	sl, r0
 800b384:	d8bc      	bhi.n	800b300 <_strtod_l+0x488>
 800b386:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b38a:	428b      	cmp	r3, r1
 800b38c:	bf86      	itte	hi
 800b38e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b42c <_strtod_l+0x5b4>
 800b392:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b396:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b39a:	2300      	movs	r3, #0
 800b39c:	9304      	str	r3, [sp, #16]
 800b39e:	e084      	b.n	800b4aa <_strtod_l+0x632>
 800b3a0:	f018 0f01 	tst.w	r8, #1
 800b3a4:	d005      	beq.n	800b3b2 <_strtod_l+0x53a>
 800b3a6:	9b04      	ldr	r3, [sp, #16]
 800b3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ac:	f7f5 f934 	bl	8000618 <__aeabi_dmul>
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	9a04      	ldr	r2, [sp, #16]
 800b3b4:	3208      	adds	r2, #8
 800b3b6:	f109 0901 	add.w	r9, r9, #1
 800b3ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b3be:	9204      	str	r2, [sp, #16]
 800b3c0:	e7c9      	b.n	800b356 <_strtod_l+0x4de>
 800b3c2:	d0ea      	beq.n	800b39a <_strtod_l+0x522>
 800b3c4:	f1c8 0800 	rsb	r8, r8, #0
 800b3c8:	f018 020f 	ands.w	r2, r8, #15
 800b3cc:	d00a      	beq.n	800b3e4 <_strtod_l+0x56c>
 800b3ce:	4b13      	ldr	r3, [pc, #76]	; (800b41c <_strtod_l+0x5a4>)
 800b3d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3d4:	4650      	mov	r0, sl
 800b3d6:	4659      	mov	r1, fp
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	f7f5 fa46 	bl	800086c <__aeabi_ddiv>
 800b3e0:	4682      	mov	sl, r0
 800b3e2:	468b      	mov	fp, r1
 800b3e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b3e8:	d0d7      	beq.n	800b39a <_strtod_l+0x522>
 800b3ea:	f1b8 0f1f 	cmp.w	r8, #31
 800b3ee:	dd1f      	ble.n	800b430 <_strtod_l+0x5b8>
 800b3f0:	2500      	movs	r5, #0
 800b3f2:	462e      	mov	r6, r5
 800b3f4:	9507      	str	r5, [sp, #28]
 800b3f6:	9505      	str	r5, [sp, #20]
 800b3f8:	2322      	movs	r3, #34	; 0x22
 800b3fa:	f04f 0a00 	mov.w	sl, #0
 800b3fe:	f04f 0b00 	mov.w	fp, #0
 800b402:	6023      	str	r3, [r4, #0]
 800b404:	e786      	b.n	800b314 <_strtod_l+0x49c>
 800b406:	bf00      	nop
 800b408:	0800eac1 	.word	0x0800eac1
 800b40c:	0800eb04 	.word	0x0800eb04
 800b410:	0800eab9 	.word	0x0800eab9
 800b414:	0800ecf4 	.word	0x0800ecf4
 800b418:	0800ebef 	.word	0x0800ebef
 800b41c:	0800ee68 	.word	0x0800ee68
 800b420:	0800ee40 	.word	0x0800ee40
 800b424:	7ff00000 	.word	0x7ff00000
 800b428:	7ca00000 	.word	0x7ca00000
 800b42c:	7fefffff 	.word	0x7fefffff
 800b430:	f018 0310 	ands.w	r3, r8, #16
 800b434:	bf18      	it	ne
 800b436:	236a      	movne	r3, #106	; 0x6a
 800b438:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b7e8 <_strtod_l+0x970>
 800b43c:	9304      	str	r3, [sp, #16]
 800b43e:	4650      	mov	r0, sl
 800b440:	4659      	mov	r1, fp
 800b442:	2300      	movs	r3, #0
 800b444:	f018 0f01 	tst.w	r8, #1
 800b448:	d004      	beq.n	800b454 <_strtod_l+0x5dc>
 800b44a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b44e:	f7f5 f8e3 	bl	8000618 <__aeabi_dmul>
 800b452:	2301      	movs	r3, #1
 800b454:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b458:	f109 0908 	add.w	r9, r9, #8
 800b45c:	d1f2      	bne.n	800b444 <_strtod_l+0x5cc>
 800b45e:	b10b      	cbz	r3, 800b464 <_strtod_l+0x5ec>
 800b460:	4682      	mov	sl, r0
 800b462:	468b      	mov	fp, r1
 800b464:	9b04      	ldr	r3, [sp, #16]
 800b466:	b1c3      	cbz	r3, 800b49a <_strtod_l+0x622>
 800b468:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b46c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b470:	2b00      	cmp	r3, #0
 800b472:	4659      	mov	r1, fp
 800b474:	dd11      	ble.n	800b49a <_strtod_l+0x622>
 800b476:	2b1f      	cmp	r3, #31
 800b478:	f340 8124 	ble.w	800b6c4 <_strtod_l+0x84c>
 800b47c:	2b34      	cmp	r3, #52	; 0x34
 800b47e:	bfde      	ittt	le
 800b480:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b484:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b488:	fa03 f202 	lslle.w	r2, r3, r2
 800b48c:	f04f 0a00 	mov.w	sl, #0
 800b490:	bfcc      	ite	gt
 800b492:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b496:	ea02 0b01 	andle.w	fp, r2, r1
 800b49a:	2200      	movs	r2, #0
 800b49c:	2300      	movs	r3, #0
 800b49e:	4650      	mov	r0, sl
 800b4a0:	4659      	mov	r1, fp
 800b4a2:	f7f5 fb21 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d1a2      	bne.n	800b3f0 <_strtod_l+0x578>
 800b4aa:	9b07      	ldr	r3, [sp, #28]
 800b4ac:	9300      	str	r3, [sp, #0]
 800b4ae:	9908      	ldr	r1, [sp, #32]
 800b4b0:	462b      	mov	r3, r5
 800b4b2:	463a      	mov	r2, r7
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f001 fed3 	bl	800d260 <__s2b>
 800b4ba:	9007      	str	r0, [sp, #28]
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	f43f af1f 	beq.w	800b300 <_strtod_l+0x488>
 800b4c2:	9b05      	ldr	r3, [sp, #20]
 800b4c4:	1b9e      	subs	r6, r3, r6
 800b4c6:	9b06      	ldr	r3, [sp, #24]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	bfb4      	ite	lt
 800b4cc:	4633      	movlt	r3, r6
 800b4ce:	2300      	movge	r3, #0
 800b4d0:	930c      	str	r3, [sp, #48]	; 0x30
 800b4d2:	9b06      	ldr	r3, [sp, #24]
 800b4d4:	2500      	movs	r5, #0
 800b4d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b4da:	9312      	str	r3, [sp, #72]	; 0x48
 800b4dc:	462e      	mov	r6, r5
 800b4de:	9b07      	ldr	r3, [sp, #28]
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	6859      	ldr	r1, [r3, #4]
 800b4e4:	f001 fe14 	bl	800d110 <_Balloc>
 800b4e8:	9005      	str	r0, [sp, #20]
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	f43f af0c 	beq.w	800b308 <_strtod_l+0x490>
 800b4f0:	9b07      	ldr	r3, [sp, #28]
 800b4f2:	691a      	ldr	r2, [r3, #16]
 800b4f4:	3202      	adds	r2, #2
 800b4f6:	f103 010c 	add.w	r1, r3, #12
 800b4fa:	0092      	lsls	r2, r2, #2
 800b4fc:	300c      	adds	r0, #12
 800b4fe:	f001 fded 	bl	800d0dc <memcpy>
 800b502:	ec4b ab10 	vmov	d0, sl, fp
 800b506:	aa1a      	add	r2, sp, #104	; 0x68
 800b508:	a919      	add	r1, sp, #100	; 0x64
 800b50a:	4620      	mov	r0, r4
 800b50c:	f002 f9ee 	bl	800d8ec <__d2b>
 800b510:	ec4b ab18 	vmov	d8, sl, fp
 800b514:	9018      	str	r0, [sp, #96]	; 0x60
 800b516:	2800      	cmp	r0, #0
 800b518:	f43f aef6 	beq.w	800b308 <_strtod_l+0x490>
 800b51c:	2101      	movs	r1, #1
 800b51e:	4620      	mov	r0, r4
 800b520:	f001 ff38 	bl	800d394 <__i2b>
 800b524:	4606      	mov	r6, r0
 800b526:	2800      	cmp	r0, #0
 800b528:	f43f aeee 	beq.w	800b308 <_strtod_l+0x490>
 800b52c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b52e:	9904      	ldr	r1, [sp, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	bfab      	itete	ge
 800b534:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b536:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b538:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b53a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b53e:	bfac      	ite	ge
 800b540:	eb03 0902 	addge.w	r9, r3, r2
 800b544:	1ad7      	sublt	r7, r2, r3
 800b546:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b548:	eba3 0801 	sub.w	r8, r3, r1
 800b54c:	4490      	add	r8, r2
 800b54e:	4ba1      	ldr	r3, [pc, #644]	; (800b7d4 <_strtod_l+0x95c>)
 800b550:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b554:	4598      	cmp	r8, r3
 800b556:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b55a:	f280 80c7 	bge.w	800b6ec <_strtod_l+0x874>
 800b55e:	eba3 0308 	sub.w	r3, r3, r8
 800b562:	2b1f      	cmp	r3, #31
 800b564:	eba2 0203 	sub.w	r2, r2, r3
 800b568:	f04f 0101 	mov.w	r1, #1
 800b56c:	f300 80b1 	bgt.w	800b6d2 <_strtod_l+0x85a>
 800b570:	fa01 f303 	lsl.w	r3, r1, r3
 800b574:	930d      	str	r3, [sp, #52]	; 0x34
 800b576:	2300      	movs	r3, #0
 800b578:	9308      	str	r3, [sp, #32]
 800b57a:	eb09 0802 	add.w	r8, r9, r2
 800b57e:	9b04      	ldr	r3, [sp, #16]
 800b580:	45c1      	cmp	r9, r8
 800b582:	4417      	add	r7, r2
 800b584:	441f      	add	r7, r3
 800b586:	464b      	mov	r3, r9
 800b588:	bfa8      	it	ge
 800b58a:	4643      	movge	r3, r8
 800b58c:	42bb      	cmp	r3, r7
 800b58e:	bfa8      	it	ge
 800b590:	463b      	movge	r3, r7
 800b592:	2b00      	cmp	r3, #0
 800b594:	bfc2      	ittt	gt
 800b596:	eba8 0803 	subgt.w	r8, r8, r3
 800b59a:	1aff      	subgt	r7, r7, r3
 800b59c:	eba9 0903 	subgt.w	r9, r9, r3
 800b5a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	dd17      	ble.n	800b5d6 <_strtod_l+0x75e>
 800b5a6:	4631      	mov	r1, r6
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f001 ffb2 	bl	800d514 <__pow5mult>
 800b5b0:	4606      	mov	r6, r0
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	f43f aea8 	beq.w	800b308 <_strtod_l+0x490>
 800b5b8:	4601      	mov	r1, r0
 800b5ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f001 feff 	bl	800d3c0 <__multiply>
 800b5c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	f43f ae9f 	beq.w	800b308 <_strtod_l+0x490>
 800b5ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f001 fddf 	bl	800d190 <_Bfree>
 800b5d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5d4:	9318      	str	r3, [sp, #96]	; 0x60
 800b5d6:	f1b8 0f00 	cmp.w	r8, #0
 800b5da:	f300 808c 	bgt.w	800b6f6 <_strtod_l+0x87e>
 800b5de:	9b06      	ldr	r3, [sp, #24]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	dd08      	ble.n	800b5f6 <_strtod_l+0x77e>
 800b5e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5e6:	9905      	ldr	r1, [sp, #20]
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f001 ff93 	bl	800d514 <__pow5mult>
 800b5ee:	9005      	str	r0, [sp, #20]
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	f43f ae89 	beq.w	800b308 <_strtod_l+0x490>
 800b5f6:	2f00      	cmp	r7, #0
 800b5f8:	dd08      	ble.n	800b60c <_strtod_l+0x794>
 800b5fa:	9905      	ldr	r1, [sp, #20]
 800b5fc:	463a      	mov	r2, r7
 800b5fe:	4620      	mov	r0, r4
 800b600:	f001 ffe2 	bl	800d5c8 <__lshift>
 800b604:	9005      	str	r0, [sp, #20]
 800b606:	2800      	cmp	r0, #0
 800b608:	f43f ae7e 	beq.w	800b308 <_strtod_l+0x490>
 800b60c:	f1b9 0f00 	cmp.w	r9, #0
 800b610:	dd08      	ble.n	800b624 <_strtod_l+0x7ac>
 800b612:	4631      	mov	r1, r6
 800b614:	464a      	mov	r2, r9
 800b616:	4620      	mov	r0, r4
 800b618:	f001 ffd6 	bl	800d5c8 <__lshift>
 800b61c:	4606      	mov	r6, r0
 800b61e:	2800      	cmp	r0, #0
 800b620:	f43f ae72 	beq.w	800b308 <_strtod_l+0x490>
 800b624:	9a05      	ldr	r2, [sp, #20]
 800b626:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b628:	4620      	mov	r0, r4
 800b62a:	f002 f859 	bl	800d6e0 <__mdiff>
 800b62e:	4605      	mov	r5, r0
 800b630:	2800      	cmp	r0, #0
 800b632:	f43f ae69 	beq.w	800b308 <_strtod_l+0x490>
 800b636:	68c3      	ldr	r3, [r0, #12]
 800b638:	930b      	str	r3, [sp, #44]	; 0x2c
 800b63a:	2300      	movs	r3, #0
 800b63c:	60c3      	str	r3, [r0, #12]
 800b63e:	4631      	mov	r1, r6
 800b640:	f002 f832 	bl	800d6a8 <__mcmp>
 800b644:	2800      	cmp	r0, #0
 800b646:	da60      	bge.n	800b70a <_strtod_l+0x892>
 800b648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b64a:	ea53 030a 	orrs.w	r3, r3, sl
 800b64e:	f040 8082 	bne.w	800b756 <_strtod_l+0x8de>
 800b652:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b656:	2b00      	cmp	r3, #0
 800b658:	d17d      	bne.n	800b756 <_strtod_l+0x8de>
 800b65a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b65e:	0d1b      	lsrs	r3, r3, #20
 800b660:	051b      	lsls	r3, r3, #20
 800b662:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b666:	d976      	bls.n	800b756 <_strtod_l+0x8de>
 800b668:	696b      	ldr	r3, [r5, #20]
 800b66a:	b913      	cbnz	r3, 800b672 <_strtod_l+0x7fa>
 800b66c:	692b      	ldr	r3, [r5, #16]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	dd71      	ble.n	800b756 <_strtod_l+0x8de>
 800b672:	4629      	mov	r1, r5
 800b674:	2201      	movs	r2, #1
 800b676:	4620      	mov	r0, r4
 800b678:	f001 ffa6 	bl	800d5c8 <__lshift>
 800b67c:	4631      	mov	r1, r6
 800b67e:	4605      	mov	r5, r0
 800b680:	f002 f812 	bl	800d6a8 <__mcmp>
 800b684:	2800      	cmp	r0, #0
 800b686:	dd66      	ble.n	800b756 <_strtod_l+0x8de>
 800b688:	9904      	ldr	r1, [sp, #16]
 800b68a:	4a53      	ldr	r2, [pc, #332]	; (800b7d8 <_strtod_l+0x960>)
 800b68c:	465b      	mov	r3, fp
 800b68e:	2900      	cmp	r1, #0
 800b690:	f000 8081 	beq.w	800b796 <_strtod_l+0x91e>
 800b694:	ea02 010b 	and.w	r1, r2, fp
 800b698:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b69c:	dc7b      	bgt.n	800b796 <_strtod_l+0x91e>
 800b69e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b6a2:	f77f aea9 	ble.w	800b3f8 <_strtod_l+0x580>
 800b6a6:	4b4d      	ldr	r3, [pc, #308]	; (800b7dc <_strtod_l+0x964>)
 800b6a8:	4650      	mov	r0, sl
 800b6aa:	4659      	mov	r1, fp
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f7f4 ffb3 	bl	8000618 <__aeabi_dmul>
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4303      	orrs	r3, r0
 800b6b6:	bf08      	it	eq
 800b6b8:	2322      	moveq	r3, #34	; 0x22
 800b6ba:	4682      	mov	sl, r0
 800b6bc:	468b      	mov	fp, r1
 800b6be:	bf08      	it	eq
 800b6c0:	6023      	streq	r3, [r4, #0]
 800b6c2:	e62b      	b.n	800b31c <_strtod_l+0x4a4>
 800b6c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6cc:	ea03 0a0a 	and.w	sl, r3, sl
 800b6d0:	e6e3      	b.n	800b49a <_strtod_l+0x622>
 800b6d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b6d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b6da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b6de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b6e2:	fa01 f308 	lsl.w	r3, r1, r8
 800b6e6:	9308      	str	r3, [sp, #32]
 800b6e8:	910d      	str	r1, [sp, #52]	; 0x34
 800b6ea:	e746      	b.n	800b57a <_strtod_l+0x702>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	9308      	str	r3, [sp, #32]
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	930d      	str	r3, [sp, #52]	; 0x34
 800b6f4:	e741      	b.n	800b57a <_strtod_l+0x702>
 800b6f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b6f8:	4642      	mov	r2, r8
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f001 ff64 	bl	800d5c8 <__lshift>
 800b700:	9018      	str	r0, [sp, #96]	; 0x60
 800b702:	2800      	cmp	r0, #0
 800b704:	f47f af6b 	bne.w	800b5de <_strtod_l+0x766>
 800b708:	e5fe      	b.n	800b308 <_strtod_l+0x490>
 800b70a:	465f      	mov	r7, fp
 800b70c:	d16e      	bne.n	800b7ec <_strtod_l+0x974>
 800b70e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b710:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b714:	b342      	cbz	r2, 800b768 <_strtod_l+0x8f0>
 800b716:	4a32      	ldr	r2, [pc, #200]	; (800b7e0 <_strtod_l+0x968>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d128      	bne.n	800b76e <_strtod_l+0x8f6>
 800b71c:	9b04      	ldr	r3, [sp, #16]
 800b71e:	4651      	mov	r1, sl
 800b720:	b1eb      	cbz	r3, 800b75e <_strtod_l+0x8e6>
 800b722:	4b2d      	ldr	r3, [pc, #180]	; (800b7d8 <_strtod_l+0x960>)
 800b724:	403b      	ands	r3, r7
 800b726:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b72a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b72e:	d819      	bhi.n	800b764 <_strtod_l+0x8ec>
 800b730:	0d1b      	lsrs	r3, r3, #20
 800b732:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b736:	fa02 f303 	lsl.w	r3, r2, r3
 800b73a:	4299      	cmp	r1, r3
 800b73c:	d117      	bne.n	800b76e <_strtod_l+0x8f6>
 800b73e:	4b29      	ldr	r3, [pc, #164]	; (800b7e4 <_strtod_l+0x96c>)
 800b740:	429f      	cmp	r7, r3
 800b742:	d102      	bne.n	800b74a <_strtod_l+0x8d2>
 800b744:	3101      	adds	r1, #1
 800b746:	f43f addf 	beq.w	800b308 <_strtod_l+0x490>
 800b74a:	4b23      	ldr	r3, [pc, #140]	; (800b7d8 <_strtod_l+0x960>)
 800b74c:	403b      	ands	r3, r7
 800b74e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b752:	f04f 0a00 	mov.w	sl, #0
 800b756:	9b04      	ldr	r3, [sp, #16]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1a4      	bne.n	800b6a6 <_strtod_l+0x82e>
 800b75c:	e5de      	b.n	800b31c <_strtod_l+0x4a4>
 800b75e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b762:	e7ea      	b.n	800b73a <_strtod_l+0x8c2>
 800b764:	4613      	mov	r3, r2
 800b766:	e7e8      	b.n	800b73a <_strtod_l+0x8c2>
 800b768:	ea53 030a 	orrs.w	r3, r3, sl
 800b76c:	d08c      	beq.n	800b688 <_strtod_l+0x810>
 800b76e:	9b08      	ldr	r3, [sp, #32]
 800b770:	b1db      	cbz	r3, 800b7aa <_strtod_l+0x932>
 800b772:	423b      	tst	r3, r7
 800b774:	d0ef      	beq.n	800b756 <_strtod_l+0x8de>
 800b776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b778:	9a04      	ldr	r2, [sp, #16]
 800b77a:	4650      	mov	r0, sl
 800b77c:	4659      	mov	r1, fp
 800b77e:	b1c3      	cbz	r3, 800b7b2 <_strtod_l+0x93a>
 800b780:	f7ff fb5c 	bl	800ae3c <sulp>
 800b784:	4602      	mov	r2, r0
 800b786:	460b      	mov	r3, r1
 800b788:	ec51 0b18 	vmov	r0, r1, d8
 800b78c:	f7f4 fd8e 	bl	80002ac <__adddf3>
 800b790:	4682      	mov	sl, r0
 800b792:	468b      	mov	fp, r1
 800b794:	e7df      	b.n	800b756 <_strtod_l+0x8de>
 800b796:	4013      	ands	r3, r2
 800b798:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b79c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b7a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b7a4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b7a8:	e7d5      	b.n	800b756 <_strtod_l+0x8de>
 800b7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ac:	ea13 0f0a 	tst.w	r3, sl
 800b7b0:	e7e0      	b.n	800b774 <_strtod_l+0x8fc>
 800b7b2:	f7ff fb43 	bl	800ae3c <sulp>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	ec51 0b18 	vmov	r0, r1, d8
 800b7be:	f7f4 fd73 	bl	80002a8 <__aeabi_dsub>
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	4682      	mov	sl, r0
 800b7c8:	468b      	mov	fp, r1
 800b7ca:	f7f5 f98d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d0c1      	beq.n	800b756 <_strtod_l+0x8de>
 800b7d2:	e611      	b.n	800b3f8 <_strtod_l+0x580>
 800b7d4:	fffffc02 	.word	0xfffffc02
 800b7d8:	7ff00000 	.word	0x7ff00000
 800b7dc:	39500000 	.word	0x39500000
 800b7e0:	000fffff 	.word	0x000fffff
 800b7e4:	7fefffff 	.word	0x7fefffff
 800b7e8:	0800eb18 	.word	0x0800eb18
 800b7ec:	4631      	mov	r1, r6
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	f002 f8d8 	bl	800d9a4 <__ratio>
 800b7f4:	ec59 8b10 	vmov	r8, r9, d0
 800b7f8:	ee10 0a10 	vmov	r0, s0
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b802:	4649      	mov	r1, r9
 800b804:	f7f5 f984 	bl	8000b10 <__aeabi_dcmple>
 800b808:	2800      	cmp	r0, #0
 800b80a:	d07a      	beq.n	800b902 <_strtod_l+0xa8a>
 800b80c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d04a      	beq.n	800b8a8 <_strtod_l+0xa30>
 800b812:	4b95      	ldr	r3, [pc, #596]	; (800ba68 <_strtod_l+0xbf0>)
 800b814:	2200      	movs	r2, #0
 800b816:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b81a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ba68 <_strtod_l+0xbf0>
 800b81e:	f04f 0800 	mov.w	r8, #0
 800b822:	4b92      	ldr	r3, [pc, #584]	; (800ba6c <_strtod_l+0xbf4>)
 800b824:	403b      	ands	r3, r7
 800b826:	930d      	str	r3, [sp, #52]	; 0x34
 800b828:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b82a:	4b91      	ldr	r3, [pc, #580]	; (800ba70 <_strtod_l+0xbf8>)
 800b82c:	429a      	cmp	r2, r3
 800b82e:	f040 80b0 	bne.w	800b992 <_strtod_l+0xb1a>
 800b832:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b836:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b83a:	ec4b ab10 	vmov	d0, sl, fp
 800b83e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b842:	f001 ffd7 	bl	800d7f4 <__ulp>
 800b846:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b84a:	ec53 2b10 	vmov	r2, r3, d0
 800b84e:	f7f4 fee3 	bl	8000618 <__aeabi_dmul>
 800b852:	4652      	mov	r2, sl
 800b854:	465b      	mov	r3, fp
 800b856:	f7f4 fd29 	bl	80002ac <__adddf3>
 800b85a:	460b      	mov	r3, r1
 800b85c:	4983      	ldr	r1, [pc, #524]	; (800ba6c <_strtod_l+0xbf4>)
 800b85e:	4a85      	ldr	r2, [pc, #532]	; (800ba74 <_strtod_l+0xbfc>)
 800b860:	4019      	ands	r1, r3
 800b862:	4291      	cmp	r1, r2
 800b864:	4682      	mov	sl, r0
 800b866:	d960      	bls.n	800b92a <_strtod_l+0xab2>
 800b868:	ee18 3a90 	vmov	r3, s17
 800b86c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b870:	4293      	cmp	r3, r2
 800b872:	d104      	bne.n	800b87e <_strtod_l+0xa06>
 800b874:	ee18 3a10 	vmov	r3, s16
 800b878:	3301      	adds	r3, #1
 800b87a:	f43f ad45 	beq.w	800b308 <_strtod_l+0x490>
 800b87e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ba80 <_strtod_l+0xc08>
 800b882:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b886:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b888:	4620      	mov	r0, r4
 800b88a:	f001 fc81 	bl	800d190 <_Bfree>
 800b88e:	9905      	ldr	r1, [sp, #20]
 800b890:	4620      	mov	r0, r4
 800b892:	f001 fc7d 	bl	800d190 <_Bfree>
 800b896:	4631      	mov	r1, r6
 800b898:	4620      	mov	r0, r4
 800b89a:	f001 fc79 	bl	800d190 <_Bfree>
 800b89e:	4629      	mov	r1, r5
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f001 fc75 	bl	800d190 <_Bfree>
 800b8a6:	e61a      	b.n	800b4de <_strtod_l+0x666>
 800b8a8:	f1ba 0f00 	cmp.w	sl, #0
 800b8ac:	d11b      	bne.n	800b8e6 <_strtod_l+0xa6e>
 800b8ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8b2:	b9f3      	cbnz	r3, 800b8f2 <_strtod_l+0xa7a>
 800b8b4:	4b6c      	ldr	r3, [pc, #432]	; (800ba68 <_strtod_l+0xbf0>)
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	4640      	mov	r0, r8
 800b8ba:	4649      	mov	r1, r9
 800b8bc:	f7f5 f91e 	bl	8000afc <__aeabi_dcmplt>
 800b8c0:	b9d0      	cbnz	r0, 800b8f8 <_strtod_l+0xa80>
 800b8c2:	4640      	mov	r0, r8
 800b8c4:	4649      	mov	r1, r9
 800b8c6:	4b6c      	ldr	r3, [pc, #432]	; (800ba78 <_strtod_l+0xc00>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	f7f4 fea5 	bl	8000618 <__aeabi_dmul>
 800b8ce:	4680      	mov	r8, r0
 800b8d0:	4689      	mov	r9, r1
 800b8d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b8d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b8da:	9315      	str	r3, [sp, #84]	; 0x54
 800b8dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b8e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b8e4:	e79d      	b.n	800b822 <_strtod_l+0x9aa>
 800b8e6:	f1ba 0f01 	cmp.w	sl, #1
 800b8ea:	d102      	bne.n	800b8f2 <_strtod_l+0xa7a>
 800b8ec:	2f00      	cmp	r7, #0
 800b8ee:	f43f ad83 	beq.w	800b3f8 <_strtod_l+0x580>
 800b8f2:	4b62      	ldr	r3, [pc, #392]	; (800ba7c <_strtod_l+0xc04>)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	e78e      	b.n	800b816 <_strtod_l+0x99e>
 800b8f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ba78 <_strtod_l+0xc00>
 800b8fc:	f04f 0800 	mov.w	r8, #0
 800b900:	e7e7      	b.n	800b8d2 <_strtod_l+0xa5a>
 800b902:	4b5d      	ldr	r3, [pc, #372]	; (800ba78 <_strtod_l+0xc00>)
 800b904:	4640      	mov	r0, r8
 800b906:	4649      	mov	r1, r9
 800b908:	2200      	movs	r2, #0
 800b90a:	f7f4 fe85 	bl	8000618 <__aeabi_dmul>
 800b90e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b910:	4680      	mov	r8, r0
 800b912:	4689      	mov	r9, r1
 800b914:	b933      	cbnz	r3, 800b924 <_strtod_l+0xaac>
 800b916:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b91a:	900e      	str	r0, [sp, #56]	; 0x38
 800b91c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b91e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b922:	e7dd      	b.n	800b8e0 <_strtod_l+0xa68>
 800b924:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b928:	e7f9      	b.n	800b91e <_strtod_l+0xaa6>
 800b92a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b92e:	9b04      	ldr	r3, [sp, #16]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d1a8      	bne.n	800b886 <_strtod_l+0xa0e>
 800b934:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b93a:	0d1b      	lsrs	r3, r3, #20
 800b93c:	051b      	lsls	r3, r3, #20
 800b93e:	429a      	cmp	r2, r3
 800b940:	d1a1      	bne.n	800b886 <_strtod_l+0xa0e>
 800b942:	4640      	mov	r0, r8
 800b944:	4649      	mov	r1, r9
 800b946:	f7f5 f9c7 	bl	8000cd8 <__aeabi_d2lz>
 800b94a:	f7f4 fe37 	bl	80005bc <__aeabi_l2d>
 800b94e:	4602      	mov	r2, r0
 800b950:	460b      	mov	r3, r1
 800b952:	4640      	mov	r0, r8
 800b954:	4649      	mov	r1, r9
 800b956:	f7f4 fca7 	bl	80002a8 <__aeabi_dsub>
 800b95a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b95c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b960:	ea43 030a 	orr.w	r3, r3, sl
 800b964:	4313      	orrs	r3, r2
 800b966:	4680      	mov	r8, r0
 800b968:	4689      	mov	r9, r1
 800b96a:	d055      	beq.n	800ba18 <_strtod_l+0xba0>
 800b96c:	a336      	add	r3, pc, #216	; (adr r3, 800ba48 <_strtod_l+0xbd0>)
 800b96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b972:	f7f5 f8c3 	bl	8000afc <__aeabi_dcmplt>
 800b976:	2800      	cmp	r0, #0
 800b978:	f47f acd0 	bne.w	800b31c <_strtod_l+0x4a4>
 800b97c:	a334      	add	r3, pc, #208	; (adr r3, 800ba50 <_strtod_l+0xbd8>)
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	4640      	mov	r0, r8
 800b984:	4649      	mov	r1, r9
 800b986:	f7f5 f8d7 	bl	8000b38 <__aeabi_dcmpgt>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	f43f af7b 	beq.w	800b886 <_strtod_l+0xa0e>
 800b990:	e4c4      	b.n	800b31c <_strtod_l+0x4a4>
 800b992:	9b04      	ldr	r3, [sp, #16]
 800b994:	b333      	cbz	r3, 800b9e4 <_strtod_l+0xb6c>
 800b996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b998:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b99c:	d822      	bhi.n	800b9e4 <_strtod_l+0xb6c>
 800b99e:	a32e      	add	r3, pc, #184	; (adr r3, 800ba58 <_strtod_l+0xbe0>)
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	4640      	mov	r0, r8
 800b9a6:	4649      	mov	r1, r9
 800b9a8:	f7f5 f8b2 	bl	8000b10 <__aeabi_dcmple>
 800b9ac:	b1a0      	cbz	r0, 800b9d8 <_strtod_l+0xb60>
 800b9ae:	4649      	mov	r1, r9
 800b9b0:	4640      	mov	r0, r8
 800b9b2:	f7f5 f909 	bl	8000bc8 <__aeabi_d2uiz>
 800b9b6:	2801      	cmp	r0, #1
 800b9b8:	bf38      	it	cc
 800b9ba:	2001      	movcc	r0, #1
 800b9bc:	f7f4 fdb2 	bl	8000524 <__aeabi_ui2d>
 800b9c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9c2:	4680      	mov	r8, r0
 800b9c4:	4689      	mov	r9, r1
 800b9c6:	bb23      	cbnz	r3, 800ba12 <_strtod_l+0xb9a>
 800b9c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9cc:	9010      	str	r0, [sp, #64]	; 0x40
 800b9ce:	9311      	str	r3, [sp, #68]	; 0x44
 800b9d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b9d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b9e0:	1a9b      	subs	r3, r3, r2
 800b9e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b9e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9e8:	eeb0 0a48 	vmov.f32	s0, s16
 800b9ec:	eef0 0a68 	vmov.f32	s1, s17
 800b9f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b9f4:	f001 fefe 	bl	800d7f4 <__ulp>
 800b9f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9fc:	ec53 2b10 	vmov	r2, r3, d0
 800ba00:	f7f4 fe0a 	bl	8000618 <__aeabi_dmul>
 800ba04:	ec53 2b18 	vmov	r2, r3, d8
 800ba08:	f7f4 fc50 	bl	80002ac <__adddf3>
 800ba0c:	4682      	mov	sl, r0
 800ba0e:	468b      	mov	fp, r1
 800ba10:	e78d      	b.n	800b92e <_strtod_l+0xab6>
 800ba12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ba16:	e7db      	b.n	800b9d0 <_strtod_l+0xb58>
 800ba18:	a311      	add	r3, pc, #68	; (adr r3, 800ba60 <_strtod_l+0xbe8>)
 800ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1e:	f7f5 f86d 	bl	8000afc <__aeabi_dcmplt>
 800ba22:	e7b2      	b.n	800b98a <_strtod_l+0xb12>
 800ba24:	2300      	movs	r3, #0
 800ba26:	930a      	str	r3, [sp, #40]	; 0x28
 800ba28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba2c:	6013      	str	r3, [r2, #0]
 800ba2e:	f7ff ba6b 	b.w	800af08 <_strtod_l+0x90>
 800ba32:	2a65      	cmp	r2, #101	; 0x65
 800ba34:	f43f ab5f 	beq.w	800b0f6 <_strtod_l+0x27e>
 800ba38:	2a45      	cmp	r2, #69	; 0x45
 800ba3a:	f43f ab5c 	beq.w	800b0f6 <_strtod_l+0x27e>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	f7ff bb94 	b.w	800b16c <_strtod_l+0x2f4>
 800ba44:	f3af 8000 	nop.w
 800ba48:	94a03595 	.word	0x94a03595
 800ba4c:	3fdfffff 	.word	0x3fdfffff
 800ba50:	35afe535 	.word	0x35afe535
 800ba54:	3fe00000 	.word	0x3fe00000
 800ba58:	ffc00000 	.word	0xffc00000
 800ba5c:	41dfffff 	.word	0x41dfffff
 800ba60:	94a03595 	.word	0x94a03595
 800ba64:	3fcfffff 	.word	0x3fcfffff
 800ba68:	3ff00000 	.word	0x3ff00000
 800ba6c:	7ff00000 	.word	0x7ff00000
 800ba70:	7fe00000 	.word	0x7fe00000
 800ba74:	7c9fffff 	.word	0x7c9fffff
 800ba78:	3fe00000 	.word	0x3fe00000
 800ba7c:	bff00000 	.word	0xbff00000
 800ba80:	7fefffff 	.word	0x7fefffff

0800ba84 <_strtod_r>:
 800ba84:	4b01      	ldr	r3, [pc, #4]	; (800ba8c <_strtod_r+0x8>)
 800ba86:	f7ff b9f7 	b.w	800ae78 <_strtod_l>
 800ba8a:	bf00      	nop
 800ba8c:	200001a4 	.word	0x200001a4

0800ba90 <strtod>:
 800ba90:	460a      	mov	r2, r1
 800ba92:	4601      	mov	r1, r0
 800ba94:	4802      	ldr	r0, [pc, #8]	; (800baa0 <strtod+0x10>)
 800ba96:	4b03      	ldr	r3, [pc, #12]	; (800baa4 <strtod+0x14>)
 800ba98:	6800      	ldr	r0, [r0, #0]
 800ba9a:	f7ff b9ed 	b.w	800ae78 <_strtod_l>
 800ba9e:	bf00      	nop
 800baa0:	2000013c 	.word	0x2000013c
 800baa4:	200001a4 	.word	0x200001a4

0800baa8 <strtok>:
 800baa8:	4b16      	ldr	r3, [pc, #88]	; (800bb04 <strtok+0x5c>)
 800baaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800baac:	681e      	ldr	r6, [r3, #0]
 800baae:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800bab0:	4605      	mov	r5, r0
 800bab2:	b9fc      	cbnz	r4, 800baf4 <strtok+0x4c>
 800bab4:	2050      	movs	r0, #80	; 0x50
 800bab6:	9101      	str	r1, [sp, #4]
 800bab8:	f7fe f9ce 	bl	8009e58 <malloc>
 800babc:	9901      	ldr	r1, [sp, #4]
 800babe:	65b0      	str	r0, [r6, #88]	; 0x58
 800bac0:	4602      	mov	r2, r0
 800bac2:	b920      	cbnz	r0, 800bace <strtok+0x26>
 800bac4:	4b10      	ldr	r3, [pc, #64]	; (800bb08 <strtok+0x60>)
 800bac6:	4811      	ldr	r0, [pc, #68]	; (800bb0c <strtok+0x64>)
 800bac8:	2157      	movs	r1, #87	; 0x57
 800baca:	f000 f8d7 	bl	800bc7c <__assert_func>
 800bace:	e9c0 4400 	strd	r4, r4, [r0]
 800bad2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bad6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bada:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800bade:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800bae2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800bae6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800baea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800baee:	6184      	str	r4, [r0, #24]
 800baf0:	7704      	strb	r4, [r0, #28]
 800baf2:	6244      	str	r4, [r0, #36]	; 0x24
 800baf4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800baf6:	2301      	movs	r3, #1
 800baf8:	4628      	mov	r0, r5
 800bafa:	b002      	add	sp, #8
 800bafc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb00:	f000 b806 	b.w	800bb10 <__strtok_r>
 800bb04:	2000013c 	.word	0x2000013c
 800bb08:	0800eb40 	.word	0x0800eb40
 800bb0c:	0800eb57 	.word	0x0800eb57

0800bb10 <__strtok_r>:
 800bb10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb12:	b908      	cbnz	r0, 800bb18 <__strtok_r+0x8>
 800bb14:	6810      	ldr	r0, [r2, #0]
 800bb16:	b188      	cbz	r0, 800bb3c <__strtok_r+0x2c>
 800bb18:	4604      	mov	r4, r0
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bb20:	460f      	mov	r7, r1
 800bb22:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bb26:	b91e      	cbnz	r6, 800bb30 <__strtok_r+0x20>
 800bb28:	b965      	cbnz	r5, 800bb44 <__strtok_r+0x34>
 800bb2a:	6015      	str	r5, [r2, #0]
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	e005      	b.n	800bb3c <__strtok_r+0x2c>
 800bb30:	42b5      	cmp	r5, r6
 800bb32:	d1f6      	bne.n	800bb22 <__strtok_r+0x12>
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1f0      	bne.n	800bb1a <__strtok_r+0xa>
 800bb38:	6014      	str	r4, [r2, #0]
 800bb3a:	7003      	strb	r3, [r0, #0]
 800bb3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb3e:	461c      	mov	r4, r3
 800bb40:	e00c      	b.n	800bb5c <__strtok_r+0x4c>
 800bb42:	b915      	cbnz	r5, 800bb4a <__strtok_r+0x3a>
 800bb44:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bb48:	460e      	mov	r6, r1
 800bb4a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bb4e:	42ab      	cmp	r3, r5
 800bb50:	d1f7      	bne.n	800bb42 <__strtok_r+0x32>
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d0f3      	beq.n	800bb3e <__strtok_r+0x2e>
 800bb56:	2300      	movs	r3, #0
 800bb58:	f804 3c01 	strb.w	r3, [r4, #-1]
 800bb5c:	6014      	str	r4, [r2, #0]
 800bb5e:	e7ed      	b.n	800bb3c <__strtok_r+0x2c>

0800bb60 <_strtol_l.constprop.0>:
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb66:	d001      	beq.n	800bb6c <_strtol_l.constprop.0+0xc>
 800bb68:	2b24      	cmp	r3, #36	; 0x24
 800bb6a:	d906      	bls.n	800bb7a <_strtol_l.constprop.0+0x1a>
 800bb6c:	f7fe f94a 	bl	8009e04 <__errno>
 800bb70:	2316      	movs	r3, #22
 800bb72:	6003      	str	r3, [r0, #0]
 800bb74:	2000      	movs	r0, #0
 800bb76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bc60 <_strtol_l.constprop.0+0x100>
 800bb7e:	460d      	mov	r5, r1
 800bb80:	462e      	mov	r6, r5
 800bb82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb86:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bb8a:	f017 0708 	ands.w	r7, r7, #8
 800bb8e:	d1f7      	bne.n	800bb80 <_strtol_l.constprop.0+0x20>
 800bb90:	2c2d      	cmp	r4, #45	; 0x2d
 800bb92:	d132      	bne.n	800bbfa <_strtol_l.constprop.0+0x9a>
 800bb94:	782c      	ldrb	r4, [r5, #0]
 800bb96:	2701      	movs	r7, #1
 800bb98:	1cb5      	adds	r5, r6, #2
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d05b      	beq.n	800bc56 <_strtol_l.constprop.0+0xf6>
 800bb9e:	2b10      	cmp	r3, #16
 800bba0:	d109      	bne.n	800bbb6 <_strtol_l.constprop.0+0x56>
 800bba2:	2c30      	cmp	r4, #48	; 0x30
 800bba4:	d107      	bne.n	800bbb6 <_strtol_l.constprop.0+0x56>
 800bba6:	782c      	ldrb	r4, [r5, #0]
 800bba8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bbac:	2c58      	cmp	r4, #88	; 0x58
 800bbae:	d14d      	bne.n	800bc4c <_strtol_l.constprop.0+0xec>
 800bbb0:	786c      	ldrb	r4, [r5, #1]
 800bbb2:	2310      	movs	r3, #16
 800bbb4:	3502      	adds	r5, #2
 800bbb6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bbba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bbbe:	f04f 0c00 	mov.w	ip, #0
 800bbc2:	fbb8 f9f3 	udiv	r9, r8, r3
 800bbc6:	4666      	mov	r6, ip
 800bbc8:	fb03 8a19 	mls	sl, r3, r9, r8
 800bbcc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bbd0:	f1be 0f09 	cmp.w	lr, #9
 800bbd4:	d816      	bhi.n	800bc04 <_strtol_l.constprop.0+0xa4>
 800bbd6:	4674      	mov	r4, lr
 800bbd8:	42a3      	cmp	r3, r4
 800bbda:	dd24      	ble.n	800bc26 <_strtol_l.constprop.0+0xc6>
 800bbdc:	f1bc 0f00 	cmp.w	ip, #0
 800bbe0:	db1e      	blt.n	800bc20 <_strtol_l.constprop.0+0xc0>
 800bbe2:	45b1      	cmp	r9, r6
 800bbe4:	d31c      	bcc.n	800bc20 <_strtol_l.constprop.0+0xc0>
 800bbe6:	d101      	bne.n	800bbec <_strtol_l.constprop.0+0x8c>
 800bbe8:	45a2      	cmp	sl, r4
 800bbea:	db19      	blt.n	800bc20 <_strtol_l.constprop.0+0xc0>
 800bbec:	fb06 4603 	mla	r6, r6, r3, r4
 800bbf0:	f04f 0c01 	mov.w	ip, #1
 800bbf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbf8:	e7e8      	b.n	800bbcc <_strtol_l.constprop.0+0x6c>
 800bbfa:	2c2b      	cmp	r4, #43	; 0x2b
 800bbfc:	bf04      	itt	eq
 800bbfe:	782c      	ldrbeq	r4, [r5, #0]
 800bc00:	1cb5      	addeq	r5, r6, #2
 800bc02:	e7ca      	b.n	800bb9a <_strtol_l.constprop.0+0x3a>
 800bc04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bc08:	f1be 0f19 	cmp.w	lr, #25
 800bc0c:	d801      	bhi.n	800bc12 <_strtol_l.constprop.0+0xb2>
 800bc0e:	3c37      	subs	r4, #55	; 0x37
 800bc10:	e7e2      	b.n	800bbd8 <_strtol_l.constprop.0+0x78>
 800bc12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bc16:	f1be 0f19 	cmp.w	lr, #25
 800bc1a:	d804      	bhi.n	800bc26 <_strtol_l.constprop.0+0xc6>
 800bc1c:	3c57      	subs	r4, #87	; 0x57
 800bc1e:	e7db      	b.n	800bbd8 <_strtol_l.constprop.0+0x78>
 800bc20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800bc24:	e7e6      	b.n	800bbf4 <_strtol_l.constprop.0+0x94>
 800bc26:	f1bc 0f00 	cmp.w	ip, #0
 800bc2a:	da05      	bge.n	800bc38 <_strtol_l.constprop.0+0xd8>
 800bc2c:	2322      	movs	r3, #34	; 0x22
 800bc2e:	6003      	str	r3, [r0, #0]
 800bc30:	4646      	mov	r6, r8
 800bc32:	b942      	cbnz	r2, 800bc46 <_strtol_l.constprop.0+0xe6>
 800bc34:	4630      	mov	r0, r6
 800bc36:	e79e      	b.n	800bb76 <_strtol_l.constprop.0+0x16>
 800bc38:	b107      	cbz	r7, 800bc3c <_strtol_l.constprop.0+0xdc>
 800bc3a:	4276      	negs	r6, r6
 800bc3c:	2a00      	cmp	r2, #0
 800bc3e:	d0f9      	beq.n	800bc34 <_strtol_l.constprop.0+0xd4>
 800bc40:	f1bc 0f00 	cmp.w	ip, #0
 800bc44:	d000      	beq.n	800bc48 <_strtol_l.constprop.0+0xe8>
 800bc46:	1e69      	subs	r1, r5, #1
 800bc48:	6011      	str	r1, [r2, #0]
 800bc4a:	e7f3      	b.n	800bc34 <_strtol_l.constprop.0+0xd4>
 800bc4c:	2430      	movs	r4, #48	; 0x30
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d1b1      	bne.n	800bbb6 <_strtol_l.constprop.0+0x56>
 800bc52:	2308      	movs	r3, #8
 800bc54:	e7af      	b.n	800bbb6 <_strtol_l.constprop.0+0x56>
 800bc56:	2c30      	cmp	r4, #48	; 0x30
 800bc58:	d0a5      	beq.n	800bba6 <_strtol_l.constprop.0+0x46>
 800bc5a:	230a      	movs	r3, #10
 800bc5c:	e7ab      	b.n	800bbb6 <_strtol_l.constprop.0+0x56>
 800bc5e:	bf00      	nop
 800bc60:	0800ebf1 	.word	0x0800ebf1

0800bc64 <_strtol_r>:
 800bc64:	f7ff bf7c 	b.w	800bb60 <_strtol_l.constprop.0>

0800bc68 <strtol>:
 800bc68:	4613      	mov	r3, r2
 800bc6a:	460a      	mov	r2, r1
 800bc6c:	4601      	mov	r1, r0
 800bc6e:	4802      	ldr	r0, [pc, #8]	; (800bc78 <strtol+0x10>)
 800bc70:	6800      	ldr	r0, [r0, #0]
 800bc72:	f7ff bf75 	b.w	800bb60 <_strtol_l.constprop.0>
 800bc76:	bf00      	nop
 800bc78:	2000013c 	.word	0x2000013c

0800bc7c <__assert_func>:
 800bc7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc7e:	4614      	mov	r4, r2
 800bc80:	461a      	mov	r2, r3
 800bc82:	4b09      	ldr	r3, [pc, #36]	; (800bca8 <__assert_func+0x2c>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4605      	mov	r5, r0
 800bc88:	68d8      	ldr	r0, [r3, #12]
 800bc8a:	b14c      	cbz	r4, 800bca0 <__assert_func+0x24>
 800bc8c:	4b07      	ldr	r3, [pc, #28]	; (800bcac <__assert_func+0x30>)
 800bc8e:	9100      	str	r1, [sp, #0]
 800bc90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc94:	4906      	ldr	r1, [pc, #24]	; (800bcb0 <__assert_func+0x34>)
 800bc96:	462b      	mov	r3, r5
 800bc98:	f000 fe88 	bl	800c9ac <fiprintf>
 800bc9c:	f002 fa9a 	bl	800e1d4 <abort>
 800bca0:	4b04      	ldr	r3, [pc, #16]	; (800bcb4 <__assert_func+0x38>)
 800bca2:	461c      	mov	r4, r3
 800bca4:	e7f3      	b.n	800bc8e <__assert_func+0x12>
 800bca6:	bf00      	nop
 800bca8:	2000013c 	.word	0x2000013c
 800bcac:	0800ebb4 	.word	0x0800ebb4
 800bcb0:	0800ebc1 	.word	0x0800ebc1
 800bcb4:	0800ebef 	.word	0x0800ebef

0800bcb8 <quorem>:
 800bcb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcbc:	6903      	ldr	r3, [r0, #16]
 800bcbe:	690c      	ldr	r4, [r1, #16]
 800bcc0:	42a3      	cmp	r3, r4
 800bcc2:	4607      	mov	r7, r0
 800bcc4:	f2c0 8081 	blt.w	800bdca <quorem+0x112>
 800bcc8:	3c01      	subs	r4, #1
 800bcca:	f101 0814 	add.w	r8, r1, #20
 800bcce:	f100 0514 	add.w	r5, r0, #20
 800bcd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcd6:	9301      	str	r3, [sp, #4]
 800bcd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bcdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bce0:	3301      	adds	r3, #1
 800bce2:	429a      	cmp	r2, r3
 800bce4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bce8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bcec:	fbb2 f6f3 	udiv	r6, r2, r3
 800bcf0:	d331      	bcc.n	800bd56 <quorem+0x9e>
 800bcf2:	f04f 0e00 	mov.w	lr, #0
 800bcf6:	4640      	mov	r0, r8
 800bcf8:	46ac      	mov	ip, r5
 800bcfa:	46f2      	mov	sl, lr
 800bcfc:	f850 2b04 	ldr.w	r2, [r0], #4
 800bd00:	b293      	uxth	r3, r2
 800bd02:	fb06 e303 	mla	r3, r6, r3, lr
 800bd06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	ebaa 0303 	sub.w	r3, sl, r3
 800bd10:	f8dc a000 	ldr.w	sl, [ip]
 800bd14:	0c12      	lsrs	r2, r2, #16
 800bd16:	fa13 f38a 	uxtah	r3, r3, sl
 800bd1a:	fb06 e202 	mla	r2, r6, r2, lr
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	9b00      	ldr	r3, [sp, #0]
 800bd22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bd26:	b292      	uxth	r2, r2
 800bd28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bd2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd30:	f8bd 3000 	ldrh.w	r3, [sp]
 800bd34:	4581      	cmp	r9, r0
 800bd36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd3a:	f84c 3b04 	str.w	r3, [ip], #4
 800bd3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bd42:	d2db      	bcs.n	800bcfc <quorem+0x44>
 800bd44:	f855 300b 	ldr.w	r3, [r5, fp]
 800bd48:	b92b      	cbnz	r3, 800bd56 <quorem+0x9e>
 800bd4a:	9b01      	ldr	r3, [sp, #4]
 800bd4c:	3b04      	subs	r3, #4
 800bd4e:	429d      	cmp	r5, r3
 800bd50:	461a      	mov	r2, r3
 800bd52:	d32e      	bcc.n	800bdb2 <quorem+0xfa>
 800bd54:	613c      	str	r4, [r7, #16]
 800bd56:	4638      	mov	r0, r7
 800bd58:	f001 fca6 	bl	800d6a8 <__mcmp>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	db24      	blt.n	800bdaa <quorem+0xf2>
 800bd60:	3601      	adds	r6, #1
 800bd62:	4628      	mov	r0, r5
 800bd64:	f04f 0c00 	mov.w	ip, #0
 800bd68:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd6c:	f8d0 e000 	ldr.w	lr, [r0]
 800bd70:	b293      	uxth	r3, r2
 800bd72:	ebac 0303 	sub.w	r3, ip, r3
 800bd76:	0c12      	lsrs	r2, r2, #16
 800bd78:	fa13 f38e 	uxtah	r3, r3, lr
 800bd7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd8a:	45c1      	cmp	r9, r8
 800bd8c:	f840 3b04 	str.w	r3, [r0], #4
 800bd90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd94:	d2e8      	bcs.n	800bd68 <quorem+0xb0>
 800bd96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd9e:	b922      	cbnz	r2, 800bdaa <quorem+0xf2>
 800bda0:	3b04      	subs	r3, #4
 800bda2:	429d      	cmp	r5, r3
 800bda4:	461a      	mov	r2, r3
 800bda6:	d30a      	bcc.n	800bdbe <quorem+0x106>
 800bda8:	613c      	str	r4, [r7, #16]
 800bdaa:	4630      	mov	r0, r6
 800bdac:	b003      	add	sp, #12
 800bdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb2:	6812      	ldr	r2, [r2, #0]
 800bdb4:	3b04      	subs	r3, #4
 800bdb6:	2a00      	cmp	r2, #0
 800bdb8:	d1cc      	bne.n	800bd54 <quorem+0x9c>
 800bdba:	3c01      	subs	r4, #1
 800bdbc:	e7c7      	b.n	800bd4e <quorem+0x96>
 800bdbe:	6812      	ldr	r2, [r2, #0]
 800bdc0:	3b04      	subs	r3, #4
 800bdc2:	2a00      	cmp	r2, #0
 800bdc4:	d1f0      	bne.n	800bda8 <quorem+0xf0>
 800bdc6:	3c01      	subs	r4, #1
 800bdc8:	e7eb      	b.n	800bda2 <quorem+0xea>
 800bdca:	2000      	movs	r0, #0
 800bdcc:	e7ee      	b.n	800bdac <quorem+0xf4>
	...

0800bdd0 <_dtoa_r>:
 800bdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd4:	ed2d 8b04 	vpush	{d8-d9}
 800bdd8:	ec57 6b10 	vmov	r6, r7, d0
 800bddc:	b093      	sub	sp, #76	; 0x4c
 800bdde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bde0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bde4:	9106      	str	r1, [sp, #24]
 800bde6:	ee10 aa10 	vmov	sl, s0
 800bdea:	4604      	mov	r4, r0
 800bdec:	9209      	str	r2, [sp, #36]	; 0x24
 800bdee:	930c      	str	r3, [sp, #48]	; 0x30
 800bdf0:	46bb      	mov	fp, r7
 800bdf2:	b975      	cbnz	r5, 800be12 <_dtoa_r+0x42>
 800bdf4:	2010      	movs	r0, #16
 800bdf6:	f7fe f82f 	bl	8009e58 <malloc>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	6260      	str	r0, [r4, #36]	; 0x24
 800bdfe:	b920      	cbnz	r0, 800be0a <_dtoa_r+0x3a>
 800be00:	4ba7      	ldr	r3, [pc, #668]	; (800c0a0 <_dtoa_r+0x2d0>)
 800be02:	21ea      	movs	r1, #234	; 0xea
 800be04:	48a7      	ldr	r0, [pc, #668]	; (800c0a4 <_dtoa_r+0x2d4>)
 800be06:	f7ff ff39 	bl	800bc7c <__assert_func>
 800be0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800be0e:	6005      	str	r5, [r0, #0]
 800be10:	60c5      	str	r5, [r0, #12]
 800be12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be14:	6819      	ldr	r1, [r3, #0]
 800be16:	b151      	cbz	r1, 800be2e <_dtoa_r+0x5e>
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	604a      	str	r2, [r1, #4]
 800be1c:	2301      	movs	r3, #1
 800be1e:	4093      	lsls	r3, r2
 800be20:	608b      	str	r3, [r1, #8]
 800be22:	4620      	mov	r0, r4
 800be24:	f001 f9b4 	bl	800d190 <_Bfree>
 800be28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be2a:	2200      	movs	r2, #0
 800be2c:	601a      	str	r2, [r3, #0]
 800be2e:	1e3b      	subs	r3, r7, #0
 800be30:	bfaa      	itet	ge
 800be32:	2300      	movge	r3, #0
 800be34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800be38:	f8c8 3000 	strge.w	r3, [r8]
 800be3c:	4b9a      	ldr	r3, [pc, #616]	; (800c0a8 <_dtoa_r+0x2d8>)
 800be3e:	bfbc      	itt	lt
 800be40:	2201      	movlt	r2, #1
 800be42:	f8c8 2000 	strlt.w	r2, [r8]
 800be46:	ea33 030b 	bics.w	r3, r3, fp
 800be4a:	d11b      	bne.n	800be84 <_dtoa_r+0xb4>
 800be4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be4e:	f242 730f 	movw	r3, #9999	; 0x270f
 800be52:	6013      	str	r3, [r2, #0]
 800be54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be58:	4333      	orrs	r3, r6
 800be5a:	f000 8592 	beq.w	800c982 <_dtoa_r+0xbb2>
 800be5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be60:	b963      	cbnz	r3, 800be7c <_dtoa_r+0xac>
 800be62:	4b92      	ldr	r3, [pc, #584]	; (800c0ac <_dtoa_r+0x2dc>)
 800be64:	e022      	b.n	800beac <_dtoa_r+0xdc>
 800be66:	4b92      	ldr	r3, [pc, #584]	; (800c0b0 <_dtoa_r+0x2e0>)
 800be68:	9301      	str	r3, [sp, #4]
 800be6a:	3308      	adds	r3, #8
 800be6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be6e:	6013      	str	r3, [r2, #0]
 800be70:	9801      	ldr	r0, [sp, #4]
 800be72:	b013      	add	sp, #76	; 0x4c
 800be74:	ecbd 8b04 	vpop	{d8-d9}
 800be78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be7c:	4b8b      	ldr	r3, [pc, #556]	; (800c0ac <_dtoa_r+0x2dc>)
 800be7e:	9301      	str	r3, [sp, #4]
 800be80:	3303      	adds	r3, #3
 800be82:	e7f3      	b.n	800be6c <_dtoa_r+0x9c>
 800be84:	2200      	movs	r2, #0
 800be86:	2300      	movs	r3, #0
 800be88:	4650      	mov	r0, sl
 800be8a:	4659      	mov	r1, fp
 800be8c:	f7f4 fe2c 	bl	8000ae8 <__aeabi_dcmpeq>
 800be90:	ec4b ab19 	vmov	d9, sl, fp
 800be94:	4680      	mov	r8, r0
 800be96:	b158      	cbz	r0, 800beb0 <_dtoa_r+0xe0>
 800be98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be9a:	2301      	movs	r3, #1
 800be9c:	6013      	str	r3, [r2, #0]
 800be9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f000 856b 	beq.w	800c97c <_dtoa_r+0xbac>
 800bea6:	4883      	ldr	r0, [pc, #524]	; (800c0b4 <_dtoa_r+0x2e4>)
 800bea8:	6018      	str	r0, [r3, #0]
 800beaa:	1e43      	subs	r3, r0, #1
 800beac:	9301      	str	r3, [sp, #4]
 800beae:	e7df      	b.n	800be70 <_dtoa_r+0xa0>
 800beb0:	ec4b ab10 	vmov	d0, sl, fp
 800beb4:	aa10      	add	r2, sp, #64	; 0x40
 800beb6:	a911      	add	r1, sp, #68	; 0x44
 800beb8:	4620      	mov	r0, r4
 800beba:	f001 fd17 	bl	800d8ec <__d2b>
 800bebe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bec2:	ee08 0a10 	vmov	s16, r0
 800bec6:	2d00      	cmp	r5, #0
 800bec8:	f000 8084 	beq.w	800bfd4 <_dtoa_r+0x204>
 800becc:	ee19 3a90 	vmov	r3, s19
 800bed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bed4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bed8:	4656      	mov	r6, sl
 800beda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bede:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bee2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bee6:	4b74      	ldr	r3, [pc, #464]	; (800c0b8 <_dtoa_r+0x2e8>)
 800bee8:	2200      	movs	r2, #0
 800beea:	4630      	mov	r0, r6
 800beec:	4639      	mov	r1, r7
 800beee:	f7f4 f9db 	bl	80002a8 <__aeabi_dsub>
 800bef2:	a365      	add	r3, pc, #404	; (adr r3, 800c088 <_dtoa_r+0x2b8>)
 800bef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef8:	f7f4 fb8e 	bl	8000618 <__aeabi_dmul>
 800befc:	a364      	add	r3, pc, #400	; (adr r3, 800c090 <_dtoa_r+0x2c0>)
 800befe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf02:	f7f4 f9d3 	bl	80002ac <__adddf3>
 800bf06:	4606      	mov	r6, r0
 800bf08:	4628      	mov	r0, r5
 800bf0a:	460f      	mov	r7, r1
 800bf0c:	f7f4 fb1a 	bl	8000544 <__aeabi_i2d>
 800bf10:	a361      	add	r3, pc, #388	; (adr r3, 800c098 <_dtoa_r+0x2c8>)
 800bf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf16:	f7f4 fb7f 	bl	8000618 <__aeabi_dmul>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	4630      	mov	r0, r6
 800bf20:	4639      	mov	r1, r7
 800bf22:	f7f4 f9c3 	bl	80002ac <__adddf3>
 800bf26:	4606      	mov	r6, r0
 800bf28:	460f      	mov	r7, r1
 800bf2a:	f7f4 fe25 	bl	8000b78 <__aeabi_d2iz>
 800bf2e:	2200      	movs	r2, #0
 800bf30:	9000      	str	r0, [sp, #0]
 800bf32:	2300      	movs	r3, #0
 800bf34:	4630      	mov	r0, r6
 800bf36:	4639      	mov	r1, r7
 800bf38:	f7f4 fde0 	bl	8000afc <__aeabi_dcmplt>
 800bf3c:	b150      	cbz	r0, 800bf54 <_dtoa_r+0x184>
 800bf3e:	9800      	ldr	r0, [sp, #0]
 800bf40:	f7f4 fb00 	bl	8000544 <__aeabi_i2d>
 800bf44:	4632      	mov	r2, r6
 800bf46:	463b      	mov	r3, r7
 800bf48:	f7f4 fdce 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf4c:	b910      	cbnz	r0, 800bf54 <_dtoa_r+0x184>
 800bf4e:	9b00      	ldr	r3, [sp, #0]
 800bf50:	3b01      	subs	r3, #1
 800bf52:	9300      	str	r3, [sp, #0]
 800bf54:	9b00      	ldr	r3, [sp, #0]
 800bf56:	2b16      	cmp	r3, #22
 800bf58:	d85a      	bhi.n	800c010 <_dtoa_r+0x240>
 800bf5a:	9a00      	ldr	r2, [sp, #0]
 800bf5c:	4b57      	ldr	r3, [pc, #348]	; (800c0bc <_dtoa_r+0x2ec>)
 800bf5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf66:	ec51 0b19 	vmov	r0, r1, d9
 800bf6a:	f7f4 fdc7 	bl	8000afc <__aeabi_dcmplt>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	d050      	beq.n	800c014 <_dtoa_r+0x244>
 800bf72:	9b00      	ldr	r3, [sp, #0]
 800bf74:	3b01      	subs	r3, #1
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	2300      	movs	r3, #0
 800bf7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf7e:	1b5d      	subs	r5, r3, r5
 800bf80:	1e6b      	subs	r3, r5, #1
 800bf82:	9305      	str	r3, [sp, #20]
 800bf84:	bf45      	ittet	mi
 800bf86:	f1c5 0301 	rsbmi	r3, r5, #1
 800bf8a:	9304      	strmi	r3, [sp, #16]
 800bf8c:	2300      	movpl	r3, #0
 800bf8e:	2300      	movmi	r3, #0
 800bf90:	bf4c      	ite	mi
 800bf92:	9305      	strmi	r3, [sp, #20]
 800bf94:	9304      	strpl	r3, [sp, #16]
 800bf96:	9b00      	ldr	r3, [sp, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	db3d      	blt.n	800c018 <_dtoa_r+0x248>
 800bf9c:	9b05      	ldr	r3, [sp, #20]
 800bf9e:	9a00      	ldr	r2, [sp, #0]
 800bfa0:	920a      	str	r2, [sp, #40]	; 0x28
 800bfa2:	4413      	add	r3, r2
 800bfa4:	9305      	str	r3, [sp, #20]
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	9307      	str	r3, [sp, #28]
 800bfaa:	9b06      	ldr	r3, [sp, #24]
 800bfac:	2b09      	cmp	r3, #9
 800bfae:	f200 8089 	bhi.w	800c0c4 <_dtoa_r+0x2f4>
 800bfb2:	2b05      	cmp	r3, #5
 800bfb4:	bfc4      	itt	gt
 800bfb6:	3b04      	subgt	r3, #4
 800bfb8:	9306      	strgt	r3, [sp, #24]
 800bfba:	9b06      	ldr	r3, [sp, #24]
 800bfbc:	f1a3 0302 	sub.w	r3, r3, #2
 800bfc0:	bfcc      	ite	gt
 800bfc2:	2500      	movgt	r5, #0
 800bfc4:	2501      	movle	r5, #1
 800bfc6:	2b03      	cmp	r3, #3
 800bfc8:	f200 8087 	bhi.w	800c0da <_dtoa_r+0x30a>
 800bfcc:	e8df f003 	tbb	[pc, r3]
 800bfd0:	59383a2d 	.word	0x59383a2d
 800bfd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bfd8:	441d      	add	r5, r3
 800bfda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bfde:	2b20      	cmp	r3, #32
 800bfe0:	bfc1      	itttt	gt
 800bfe2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bfe6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bfea:	fa0b f303 	lslgt.w	r3, fp, r3
 800bfee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bff2:	bfda      	itte	le
 800bff4:	f1c3 0320 	rsble	r3, r3, #32
 800bff8:	fa06 f003 	lslle.w	r0, r6, r3
 800bffc:	4318      	orrgt	r0, r3
 800bffe:	f7f4 fa91 	bl	8000524 <__aeabi_ui2d>
 800c002:	2301      	movs	r3, #1
 800c004:	4606      	mov	r6, r0
 800c006:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c00a:	3d01      	subs	r5, #1
 800c00c:	930e      	str	r3, [sp, #56]	; 0x38
 800c00e:	e76a      	b.n	800bee6 <_dtoa_r+0x116>
 800c010:	2301      	movs	r3, #1
 800c012:	e7b2      	b.n	800bf7a <_dtoa_r+0x1aa>
 800c014:	900b      	str	r0, [sp, #44]	; 0x2c
 800c016:	e7b1      	b.n	800bf7c <_dtoa_r+0x1ac>
 800c018:	9b04      	ldr	r3, [sp, #16]
 800c01a:	9a00      	ldr	r2, [sp, #0]
 800c01c:	1a9b      	subs	r3, r3, r2
 800c01e:	9304      	str	r3, [sp, #16]
 800c020:	4253      	negs	r3, r2
 800c022:	9307      	str	r3, [sp, #28]
 800c024:	2300      	movs	r3, #0
 800c026:	930a      	str	r3, [sp, #40]	; 0x28
 800c028:	e7bf      	b.n	800bfaa <_dtoa_r+0x1da>
 800c02a:	2300      	movs	r3, #0
 800c02c:	9308      	str	r3, [sp, #32]
 800c02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c030:	2b00      	cmp	r3, #0
 800c032:	dc55      	bgt.n	800c0e0 <_dtoa_r+0x310>
 800c034:	2301      	movs	r3, #1
 800c036:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c03a:	461a      	mov	r2, r3
 800c03c:	9209      	str	r2, [sp, #36]	; 0x24
 800c03e:	e00c      	b.n	800c05a <_dtoa_r+0x28a>
 800c040:	2301      	movs	r3, #1
 800c042:	e7f3      	b.n	800c02c <_dtoa_r+0x25c>
 800c044:	2300      	movs	r3, #0
 800c046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c048:	9308      	str	r3, [sp, #32]
 800c04a:	9b00      	ldr	r3, [sp, #0]
 800c04c:	4413      	add	r3, r2
 800c04e:	9302      	str	r3, [sp, #8]
 800c050:	3301      	adds	r3, #1
 800c052:	2b01      	cmp	r3, #1
 800c054:	9303      	str	r3, [sp, #12]
 800c056:	bfb8      	it	lt
 800c058:	2301      	movlt	r3, #1
 800c05a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c05c:	2200      	movs	r2, #0
 800c05e:	6042      	str	r2, [r0, #4]
 800c060:	2204      	movs	r2, #4
 800c062:	f102 0614 	add.w	r6, r2, #20
 800c066:	429e      	cmp	r6, r3
 800c068:	6841      	ldr	r1, [r0, #4]
 800c06a:	d93d      	bls.n	800c0e8 <_dtoa_r+0x318>
 800c06c:	4620      	mov	r0, r4
 800c06e:	f001 f84f 	bl	800d110 <_Balloc>
 800c072:	9001      	str	r0, [sp, #4]
 800c074:	2800      	cmp	r0, #0
 800c076:	d13b      	bne.n	800c0f0 <_dtoa_r+0x320>
 800c078:	4b11      	ldr	r3, [pc, #68]	; (800c0c0 <_dtoa_r+0x2f0>)
 800c07a:	4602      	mov	r2, r0
 800c07c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c080:	e6c0      	b.n	800be04 <_dtoa_r+0x34>
 800c082:	2301      	movs	r3, #1
 800c084:	e7df      	b.n	800c046 <_dtoa_r+0x276>
 800c086:	bf00      	nop
 800c088:	636f4361 	.word	0x636f4361
 800c08c:	3fd287a7 	.word	0x3fd287a7
 800c090:	8b60c8b3 	.word	0x8b60c8b3
 800c094:	3fc68a28 	.word	0x3fc68a28
 800c098:	509f79fb 	.word	0x509f79fb
 800c09c:	3fd34413 	.word	0x3fd34413
 800c0a0:	0800eb40 	.word	0x0800eb40
 800c0a4:	0800ecfe 	.word	0x0800ecfe
 800c0a8:	7ff00000 	.word	0x7ff00000
 800c0ac:	0800ecfa 	.word	0x0800ecfa
 800c0b0:	0800ecf1 	.word	0x0800ecf1
 800c0b4:	0800eac5 	.word	0x0800eac5
 800c0b8:	3ff80000 	.word	0x3ff80000
 800c0bc:	0800ee68 	.word	0x0800ee68
 800c0c0:	0800ed59 	.word	0x0800ed59
 800c0c4:	2501      	movs	r5, #1
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	9306      	str	r3, [sp, #24]
 800c0ca:	9508      	str	r5, [sp, #32]
 800c0cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	2312      	movs	r3, #18
 800c0d8:	e7b0      	b.n	800c03c <_dtoa_r+0x26c>
 800c0da:	2301      	movs	r3, #1
 800c0dc:	9308      	str	r3, [sp, #32]
 800c0de:	e7f5      	b.n	800c0cc <_dtoa_r+0x2fc>
 800c0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c0e6:	e7b8      	b.n	800c05a <_dtoa_r+0x28a>
 800c0e8:	3101      	adds	r1, #1
 800c0ea:	6041      	str	r1, [r0, #4]
 800c0ec:	0052      	lsls	r2, r2, #1
 800c0ee:	e7b8      	b.n	800c062 <_dtoa_r+0x292>
 800c0f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0f2:	9a01      	ldr	r2, [sp, #4]
 800c0f4:	601a      	str	r2, [r3, #0]
 800c0f6:	9b03      	ldr	r3, [sp, #12]
 800c0f8:	2b0e      	cmp	r3, #14
 800c0fa:	f200 809d 	bhi.w	800c238 <_dtoa_r+0x468>
 800c0fe:	2d00      	cmp	r5, #0
 800c100:	f000 809a 	beq.w	800c238 <_dtoa_r+0x468>
 800c104:	9b00      	ldr	r3, [sp, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	dd32      	ble.n	800c170 <_dtoa_r+0x3a0>
 800c10a:	4ab7      	ldr	r2, [pc, #732]	; (800c3e8 <_dtoa_r+0x618>)
 800c10c:	f003 030f 	and.w	r3, r3, #15
 800c110:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c114:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c118:	9b00      	ldr	r3, [sp, #0]
 800c11a:	05d8      	lsls	r0, r3, #23
 800c11c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c120:	d516      	bpl.n	800c150 <_dtoa_r+0x380>
 800c122:	4bb2      	ldr	r3, [pc, #712]	; (800c3ec <_dtoa_r+0x61c>)
 800c124:	ec51 0b19 	vmov	r0, r1, d9
 800c128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c12c:	f7f4 fb9e 	bl	800086c <__aeabi_ddiv>
 800c130:	f007 070f 	and.w	r7, r7, #15
 800c134:	4682      	mov	sl, r0
 800c136:	468b      	mov	fp, r1
 800c138:	2503      	movs	r5, #3
 800c13a:	4eac      	ldr	r6, [pc, #688]	; (800c3ec <_dtoa_r+0x61c>)
 800c13c:	b957      	cbnz	r7, 800c154 <_dtoa_r+0x384>
 800c13e:	4642      	mov	r2, r8
 800c140:	464b      	mov	r3, r9
 800c142:	4650      	mov	r0, sl
 800c144:	4659      	mov	r1, fp
 800c146:	f7f4 fb91 	bl	800086c <__aeabi_ddiv>
 800c14a:	4682      	mov	sl, r0
 800c14c:	468b      	mov	fp, r1
 800c14e:	e028      	b.n	800c1a2 <_dtoa_r+0x3d2>
 800c150:	2502      	movs	r5, #2
 800c152:	e7f2      	b.n	800c13a <_dtoa_r+0x36a>
 800c154:	07f9      	lsls	r1, r7, #31
 800c156:	d508      	bpl.n	800c16a <_dtoa_r+0x39a>
 800c158:	4640      	mov	r0, r8
 800c15a:	4649      	mov	r1, r9
 800c15c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c160:	f7f4 fa5a 	bl	8000618 <__aeabi_dmul>
 800c164:	3501      	adds	r5, #1
 800c166:	4680      	mov	r8, r0
 800c168:	4689      	mov	r9, r1
 800c16a:	107f      	asrs	r7, r7, #1
 800c16c:	3608      	adds	r6, #8
 800c16e:	e7e5      	b.n	800c13c <_dtoa_r+0x36c>
 800c170:	f000 809b 	beq.w	800c2aa <_dtoa_r+0x4da>
 800c174:	9b00      	ldr	r3, [sp, #0]
 800c176:	4f9d      	ldr	r7, [pc, #628]	; (800c3ec <_dtoa_r+0x61c>)
 800c178:	425e      	negs	r6, r3
 800c17a:	4b9b      	ldr	r3, [pc, #620]	; (800c3e8 <_dtoa_r+0x618>)
 800c17c:	f006 020f 	and.w	r2, r6, #15
 800c180:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c188:	ec51 0b19 	vmov	r0, r1, d9
 800c18c:	f7f4 fa44 	bl	8000618 <__aeabi_dmul>
 800c190:	1136      	asrs	r6, r6, #4
 800c192:	4682      	mov	sl, r0
 800c194:	468b      	mov	fp, r1
 800c196:	2300      	movs	r3, #0
 800c198:	2502      	movs	r5, #2
 800c19a:	2e00      	cmp	r6, #0
 800c19c:	d17a      	bne.n	800c294 <_dtoa_r+0x4c4>
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d1d3      	bne.n	800c14a <_dtoa_r+0x37a>
 800c1a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f000 8082 	beq.w	800c2ae <_dtoa_r+0x4de>
 800c1aa:	4b91      	ldr	r3, [pc, #580]	; (800c3f0 <_dtoa_r+0x620>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	4650      	mov	r0, sl
 800c1b0:	4659      	mov	r1, fp
 800c1b2:	f7f4 fca3 	bl	8000afc <__aeabi_dcmplt>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d079      	beq.n	800c2ae <_dtoa_r+0x4de>
 800c1ba:	9b03      	ldr	r3, [sp, #12]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d076      	beq.n	800c2ae <_dtoa_r+0x4de>
 800c1c0:	9b02      	ldr	r3, [sp, #8]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	dd36      	ble.n	800c234 <_dtoa_r+0x464>
 800c1c6:	9b00      	ldr	r3, [sp, #0]
 800c1c8:	4650      	mov	r0, sl
 800c1ca:	4659      	mov	r1, fp
 800c1cc:	1e5f      	subs	r7, r3, #1
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	4b88      	ldr	r3, [pc, #544]	; (800c3f4 <_dtoa_r+0x624>)
 800c1d2:	f7f4 fa21 	bl	8000618 <__aeabi_dmul>
 800c1d6:	9e02      	ldr	r6, [sp, #8]
 800c1d8:	4682      	mov	sl, r0
 800c1da:	468b      	mov	fp, r1
 800c1dc:	3501      	adds	r5, #1
 800c1de:	4628      	mov	r0, r5
 800c1e0:	f7f4 f9b0 	bl	8000544 <__aeabi_i2d>
 800c1e4:	4652      	mov	r2, sl
 800c1e6:	465b      	mov	r3, fp
 800c1e8:	f7f4 fa16 	bl	8000618 <__aeabi_dmul>
 800c1ec:	4b82      	ldr	r3, [pc, #520]	; (800c3f8 <_dtoa_r+0x628>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f7f4 f85c 	bl	80002ac <__adddf3>
 800c1f4:	46d0      	mov	r8, sl
 800c1f6:	46d9      	mov	r9, fp
 800c1f8:	4682      	mov	sl, r0
 800c1fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c1fe:	2e00      	cmp	r6, #0
 800c200:	d158      	bne.n	800c2b4 <_dtoa_r+0x4e4>
 800c202:	4b7e      	ldr	r3, [pc, #504]	; (800c3fc <_dtoa_r+0x62c>)
 800c204:	2200      	movs	r2, #0
 800c206:	4640      	mov	r0, r8
 800c208:	4649      	mov	r1, r9
 800c20a:	f7f4 f84d 	bl	80002a8 <__aeabi_dsub>
 800c20e:	4652      	mov	r2, sl
 800c210:	465b      	mov	r3, fp
 800c212:	4680      	mov	r8, r0
 800c214:	4689      	mov	r9, r1
 800c216:	f7f4 fc8f 	bl	8000b38 <__aeabi_dcmpgt>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	f040 8295 	bne.w	800c74a <_dtoa_r+0x97a>
 800c220:	4652      	mov	r2, sl
 800c222:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c226:	4640      	mov	r0, r8
 800c228:	4649      	mov	r1, r9
 800c22a:	f7f4 fc67 	bl	8000afc <__aeabi_dcmplt>
 800c22e:	2800      	cmp	r0, #0
 800c230:	f040 8289 	bne.w	800c746 <_dtoa_r+0x976>
 800c234:	ec5b ab19 	vmov	sl, fp, d9
 800c238:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f2c0 8148 	blt.w	800c4d0 <_dtoa_r+0x700>
 800c240:	9a00      	ldr	r2, [sp, #0]
 800c242:	2a0e      	cmp	r2, #14
 800c244:	f300 8144 	bgt.w	800c4d0 <_dtoa_r+0x700>
 800c248:	4b67      	ldr	r3, [pc, #412]	; (800c3e8 <_dtoa_r+0x618>)
 800c24a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c24e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c254:	2b00      	cmp	r3, #0
 800c256:	f280 80d5 	bge.w	800c404 <_dtoa_r+0x634>
 800c25a:	9b03      	ldr	r3, [sp, #12]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f300 80d1 	bgt.w	800c404 <_dtoa_r+0x634>
 800c262:	f040 826f 	bne.w	800c744 <_dtoa_r+0x974>
 800c266:	4b65      	ldr	r3, [pc, #404]	; (800c3fc <_dtoa_r+0x62c>)
 800c268:	2200      	movs	r2, #0
 800c26a:	4640      	mov	r0, r8
 800c26c:	4649      	mov	r1, r9
 800c26e:	f7f4 f9d3 	bl	8000618 <__aeabi_dmul>
 800c272:	4652      	mov	r2, sl
 800c274:	465b      	mov	r3, fp
 800c276:	f7f4 fc55 	bl	8000b24 <__aeabi_dcmpge>
 800c27a:	9e03      	ldr	r6, [sp, #12]
 800c27c:	4637      	mov	r7, r6
 800c27e:	2800      	cmp	r0, #0
 800c280:	f040 8245 	bne.w	800c70e <_dtoa_r+0x93e>
 800c284:	9d01      	ldr	r5, [sp, #4]
 800c286:	2331      	movs	r3, #49	; 0x31
 800c288:	f805 3b01 	strb.w	r3, [r5], #1
 800c28c:	9b00      	ldr	r3, [sp, #0]
 800c28e:	3301      	adds	r3, #1
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	e240      	b.n	800c716 <_dtoa_r+0x946>
 800c294:	07f2      	lsls	r2, r6, #31
 800c296:	d505      	bpl.n	800c2a4 <_dtoa_r+0x4d4>
 800c298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c29c:	f7f4 f9bc 	bl	8000618 <__aeabi_dmul>
 800c2a0:	3501      	adds	r5, #1
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	1076      	asrs	r6, r6, #1
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	e777      	b.n	800c19a <_dtoa_r+0x3ca>
 800c2aa:	2502      	movs	r5, #2
 800c2ac:	e779      	b.n	800c1a2 <_dtoa_r+0x3d2>
 800c2ae:	9f00      	ldr	r7, [sp, #0]
 800c2b0:	9e03      	ldr	r6, [sp, #12]
 800c2b2:	e794      	b.n	800c1de <_dtoa_r+0x40e>
 800c2b4:	9901      	ldr	r1, [sp, #4]
 800c2b6:	4b4c      	ldr	r3, [pc, #304]	; (800c3e8 <_dtoa_r+0x618>)
 800c2b8:	4431      	add	r1, r6
 800c2ba:	910d      	str	r1, [sp, #52]	; 0x34
 800c2bc:	9908      	ldr	r1, [sp, #32]
 800c2be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c2c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c2c6:	2900      	cmp	r1, #0
 800c2c8:	d043      	beq.n	800c352 <_dtoa_r+0x582>
 800c2ca:	494d      	ldr	r1, [pc, #308]	; (800c400 <_dtoa_r+0x630>)
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	f7f4 facd 	bl	800086c <__aeabi_ddiv>
 800c2d2:	4652      	mov	r2, sl
 800c2d4:	465b      	mov	r3, fp
 800c2d6:	f7f3 ffe7 	bl	80002a8 <__aeabi_dsub>
 800c2da:	9d01      	ldr	r5, [sp, #4]
 800c2dc:	4682      	mov	sl, r0
 800c2de:	468b      	mov	fp, r1
 800c2e0:	4649      	mov	r1, r9
 800c2e2:	4640      	mov	r0, r8
 800c2e4:	f7f4 fc48 	bl	8000b78 <__aeabi_d2iz>
 800c2e8:	4606      	mov	r6, r0
 800c2ea:	f7f4 f92b 	bl	8000544 <__aeabi_i2d>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	4649      	mov	r1, r9
 800c2f6:	f7f3 ffd7 	bl	80002a8 <__aeabi_dsub>
 800c2fa:	3630      	adds	r6, #48	; 0x30
 800c2fc:	f805 6b01 	strb.w	r6, [r5], #1
 800c300:	4652      	mov	r2, sl
 800c302:	465b      	mov	r3, fp
 800c304:	4680      	mov	r8, r0
 800c306:	4689      	mov	r9, r1
 800c308:	f7f4 fbf8 	bl	8000afc <__aeabi_dcmplt>
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d163      	bne.n	800c3d8 <_dtoa_r+0x608>
 800c310:	4642      	mov	r2, r8
 800c312:	464b      	mov	r3, r9
 800c314:	4936      	ldr	r1, [pc, #216]	; (800c3f0 <_dtoa_r+0x620>)
 800c316:	2000      	movs	r0, #0
 800c318:	f7f3 ffc6 	bl	80002a8 <__aeabi_dsub>
 800c31c:	4652      	mov	r2, sl
 800c31e:	465b      	mov	r3, fp
 800c320:	f7f4 fbec 	bl	8000afc <__aeabi_dcmplt>
 800c324:	2800      	cmp	r0, #0
 800c326:	f040 80b5 	bne.w	800c494 <_dtoa_r+0x6c4>
 800c32a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c32c:	429d      	cmp	r5, r3
 800c32e:	d081      	beq.n	800c234 <_dtoa_r+0x464>
 800c330:	4b30      	ldr	r3, [pc, #192]	; (800c3f4 <_dtoa_r+0x624>)
 800c332:	2200      	movs	r2, #0
 800c334:	4650      	mov	r0, sl
 800c336:	4659      	mov	r1, fp
 800c338:	f7f4 f96e 	bl	8000618 <__aeabi_dmul>
 800c33c:	4b2d      	ldr	r3, [pc, #180]	; (800c3f4 <_dtoa_r+0x624>)
 800c33e:	4682      	mov	sl, r0
 800c340:	468b      	mov	fp, r1
 800c342:	4640      	mov	r0, r8
 800c344:	4649      	mov	r1, r9
 800c346:	2200      	movs	r2, #0
 800c348:	f7f4 f966 	bl	8000618 <__aeabi_dmul>
 800c34c:	4680      	mov	r8, r0
 800c34e:	4689      	mov	r9, r1
 800c350:	e7c6      	b.n	800c2e0 <_dtoa_r+0x510>
 800c352:	4650      	mov	r0, sl
 800c354:	4659      	mov	r1, fp
 800c356:	f7f4 f95f 	bl	8000618 <__aeabi_dmul>
 800c35a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c35c:	9d01      	ldr	r5, [sp, #4]
 800c35e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c360:	4682      	mov	sl, r0
 800c362:	468b      	mov	fp, r1
 800c364:	4649      	mov	r1, r9
 800c366:	4640      	mov	r0, r8
 800c368:	f7f4 fc06 	bl	8000b78 <__aeabi_d2iz>
 800c36c:	4606      	mov	r6, r0
 800c36e:	f7f4 f8e9 	bl	8000544 <__aeabi_i2d>
 800c372:	3630      	adds	r6, #48	; 0x30
 800c374:	4602      	mov	r2, r0
 800c376:	460b      	mov	r3, r1
 800c378:	4640      	mov	r0, r8
 800c37a:	4649      	mov	r1, r9
 800c37c:	f7f3 ff94 	bl	80002a8 <__aeabi_dsub>
 800c380:	f805 6b01 	strb.w	r6, [r5], #1
 800c384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c386:	429d      	cmp	r5, r3
 800c388:	4680      	mov	r8, r0
 800c38a:	4689      	mov	r9, r1
 800c38c:	f04f 0200 	mov.w	r2, #0
 800c390:	d124      	bne.n	800c3dc <_dtoa_r+0x60c>
 800c392:	4b1b      	ldr	r3, [pc, #108]	; (800c400 <_dtoa_r+0x630>)
 800c394:	4650      	mov	r0, sl
 800c396:	4659      	mov	r1, fp
 800c398:	f7f3 ff88 	bl	80002ac <__adddf3>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4640      	mov	r0, r8
 800c3a2:	4649      	mov	r1, r9
 800c3a4:	f7f4 fbc8 	bl	8000b38 <__aeabi_dcmpgt>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	d173      	bne.n	800c494 <_dtoa_r+0x6c4>
 800c3ac:	4652      	mov	r2, sl
 800c3ae:	465b      	mov	r3, fp
 800c3b0:	4913      	ldr	r1, [pc, #76]	; (800c400 <_dtoa_r+0x630>)
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	f7f3 ff78 	bl	80002a8 <__aeabi_dsub>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	4640      	mov	r0, r8
 800c3be:	4649      	mov	r1, r9
 800c3c0:	f7f4 fb9c 	bl	8000afc <__aeabi_dcmplt>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	f43f af35 	beq.w	800c234 <_dtoa_r+0x464>
 800c3ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c3cc:	1e6b      	subs	r3, r5, #1
 800c3ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c3d4:	2b30      	cmp	r3, #48	; 0x30
 800c3d6:	d0f8      	beq.n	800c3ca <_dtoa_r+0x5fa>
 800c3d8:	9700      	str	r7, [sp, #0]
 800c3da:	e049      	b.n	800c470 <_dtoa_r+0x6a0>
 800c3dc:	4b05      	ldr	r3, [pc, #20]	; (800c3f4 <_dtoa_r+0x624>)
 800c3de:	f7f4 f91b 	bl	8000618 <__aeabi_dmul>
 800c3e2:	4680      	mov	r8, r0
 800c3e4:	4689      	mov	r9, r1
 800c3e6:	e7bd      	b.n	800c364 <_dtoa_r+0x594>
 800c3e8:	0800ee68 	.word	0x0800ee68
 800c3ec:	0800ee40 	.word	0x0800ee40
 800c3f0:	3ff00000 	.word	0x3ff00000
 800c3f4:	40240000 	.word	0x40240000
 800c3f8:	401c0000 	.word	0x401c0000
 800c3fc:	40140000 	.word	0x40140000
 800c400:	3fe00000 	.word	0x3fe00000
 800c404:	9d01      	ldr	r5, [sp, #4]
 800c406:	4656      	mov	r6, sl
 800c408:	465f      	mov	r7, fp
 800c40a:	4642      	mov	r2, r8
 800c40c:	464b      	mov	r3, r9
 800c40e:	4630      	mov	r0, r6
 800c410:	4639      	mov	r1, r7
 800c412:	f7f4 fa2b 	bl	800086c <__aeabi_ddiv>
 800c416:	f7f4 fbaf 	bl	8000b78 <__aeabi_d2iz>
 800c41a:	4682      	mov	sl, r0
 800c41c:	f7f4 f892 	bl	8000544 <__aeabi_i2d>
 800c420:	4642      	mov	r2, r8
 800c422:	464b      	mov	r3, r9
 800c424:	f7f4 f8f8 	bl	8000618 <__aeabi_dmul>
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	4630      	mov	r0, r6
 800c42e:	4639      	mov	r1, r7
 800c430:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c434:	f7f3 ff38 	bl	80002a8 <__aeabi_dsub>
 800c438:	f805 6b01 	strb.w	r6, [r5], #1
 800c43c:	9e01      	ldr	r6, [sp, #4]
 800c43e:	9f03      	ldr	r7, [sp, #12]
 800c440:	1bae      	subs	r6, r5, r6
 800c442:	42b7      	cmp	r7, r6
 800c444:	4602      	mov	r2, r0
 800c446:	460b      	mov	r3, r1
 800c448:	d135      	bne.n	800c4b6 <_dtoa_r+0x6e6>
 800c44a:	f7f3 ff2f 	bl	80002ac <__adddf3>
 800c44e:	4642      	mov	r2, r8
 800c450:	464b      	mov	r3, r9
 800c452:	4606      	mov	r6, r0
 800c454:	460f      	mov	r7, r1
 800c456:	f7f4 fb6f 	bl	8000b38 <__aeabi_dcmpgt>
 800c45a:	b9d0      	cbnz	r0, 800c492 <_dtoa_r+0x6c2>
 800c45c:	4642      	mov	r2, r8
 800c45e:	464b      	mov	r3, r9
 800c460:	4630      	mov	r0, r6
 800c462:	4639      	mov	r1, r7
 800c464:	f7f4 fb40 	bl	8000ae8 <__aeabi_dcmpeq>
 800c468:	b110      	cbz	r0, 800c470 <_dtoa_r+0x6a0>
 800c46a:	f01a 0f01 	tst.w	sl, #1
 800c46e:	d110      	bne.n	800c492 <_dtoa_r+0x6c2>
 800c470:	4620      	mov	r0, r4
 800c472:	ee18 1a10 	vmov	r1, s16
 800c476:	f000 fe8b 	bl	800d190 <_Bfree>
 800c47a:	2300      	movs	r3, #0
 800c47c:	9800      	ldr	r0, [sp, #0]
 800c47e:	702b      	strb	r3, [r5, #0]
 800c480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c482:	3001      	adds	r0, #1
 800c484:	6018      	str	r0, [r3, #0]
 800c486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f43f acf1 	beq.w	800be70 <_dtoa_r+0xa0>
 800c48e:	601d      	str	r5, [r3, #0]
 800c490:	e4ee      	b.n	800be70 <_dtoa_r+0xa0>
 800c492:	9f00      	ldr	r7, [sp, #0]
 800c494:	462b      	mov	r3, r5
 800c496:	461d      	mov	r5, r3
 800c498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c49c:	2a39      	cmp	r2, #57	; 0x39
 800c49e:	d106      	bne.n	800c4ae <_dtoa_r+0x6de>
 800c4a0:	9a01      	ldr	r2, [sp, #4]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d1f7      	bne.n	800c496 <_dtoa_r+0x6c6>
 800c4a6:	9901      	ldr	r1, [sp, #4]
 800c4a8:	2230      	movs	r2, #48	; 0x30
 800c4aa:	3701      	adds	r7, #1
 800c4ac:	700a      	strb	r2, [r1, #0]
 800c4ae:	781a      	ldrb	r2, [r3, #0]
 800c4b0:	3201      	adds	r2, #1
 800c4b2:	701a      	strb	r2, [r3, #0]
 800c4b4:	e790      	b.n	800c3d8 <_dtoa_r+0x608>
 800c4b6:	4ba6      	ldr	r3, [pc, #664]	; (800c750 <_dtoa_r+0x980>)
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f7f4 f8ad 	bl	8000618 <__aeabi_dmul>
 800c4be:	2200      	movs	r2, #0
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	460f      	mov	r7, r1
 800c4c6:	f7f4 fb0f 	bl	8000ae8 <__aeabi_dcmpeq>
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	d09d      	beq.n	800c40a <_dtoa_r+0x63a>
 800c4ce:	e7cf      	b.n	800c470 <_dtoa_r+0x6a0>
 800c4d0:	9a08      	ldr	r2, [sp, #32]
 800c4d2:	2a00      	cmp	r2, #0
 800c4d4:	f000 80d7 	beq.w	800c686 <_dtoa_r+0x8b6>
 800c4d8:	9a06      	ldr	r2, [sp, #24]
 800c4da:	2a01      	cmp	r2, #1
 800c4dc:	f300 80ba 	bgt.w	800c654 <_dtoa_r+0x884>
 800c4e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4e2:	2a00      	cmp	r2, #0
 800c4e4:	f000 80b2 	beq.w	800c64c <_dtoa_r+0x87c>
 800c4e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c4ec:	9e07      	ldr	r6, [sp, #28]
 800c4ee:	9d04      	ldr	r5, [sp, #16]
 800c4f0:	9a04      	ldr	r2, [sp, #16]
 800c4f2:	441a      	add	r2, r3
 800c4f4:	9204      	str	r2, [sp, #16]
 800c4f6:	9a05      	ldr	r2, [sp, #20]
 800c4f8:	2101      	movs	r1, #1
 800c4fa:	441a      	add	r2, r3
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	9205      	str	r2, [sp, #20]
 800c500:	f000 ff48 	bl	800d394 <__i2b>
 800c504:	4607      	mov	r7, r0
 800c506:	2d00      	cmp	r5, #0
 800c508:	dd0c      	ble.n	800c524 <_dtoa_r+0x754>
 800c50a:	9b05      	ldr	r3, [sp, #20]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	dd09      	ble.n	800c524 <_dtoa_r+0x754>
 800c510:	42ab      	cmp	r3, r5
 800c512:	9a04      	ldr	r2, [sp, #16]
 800c514:	bfa8      	it	ge
 800c516:	462b      	movge	r3, r5
 800c518:	1ad2      	subs	r2, r2, r3
 800c51a:	9204      	str	r2, [sp, #16]
 800c51c:	9a05      	ldr	r2, [sp, #20]
 800c51e:	1aed      	subs	r5, r5, r3
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	9305      	str	r3, [sp, #20]
 800c524:	9b07      	ldr	r3, [sp, #28]
 800c526:	b31b      	cbz	r3, 800c570 <_dtoa_r+0x7a0>
 800c528:	9b08      	ldr	r3, [sp, #32]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 80af 	beq.w	800c68e <_dtoa_r+0x8be>
 800c530:	2e00      	cmp	r6, #0
 800c532:	dd13      	ble.n	800c55c <_dtoa_r+0x78c>
 800c534:	4639      	mov	r1, r7
 800c536:	4632      	mov	r2, r6
 800c538:	4620      	mov	r0, r4
 800c53a:	f000 ffeb 	bl	800d514 <__pow5mult>
 800c53e:	ee18 2a10 	vmov	r2, s16
 800c542:	4601      	mov	r1, r0
 800c544:	4607      	mov	r7, r0
 800c546:	4620      	mov	r0, r4
 800c548:	f000 ff3a 	bl	800d3c0 <__multiply>
 800c54c:	ee18 1a10 	vmov	r1, s16
 800c550:	4680      	mov	r8, r0
 800c552:	4620      	mov	r0, r4
 800c554:	f000 fe1c 	bl	800d190 <_Bfree>
 800c558:	ee08 8a10 	vmov	s16, r8
 800c55c:	9b07      	ldr	r3, [sp, #28]
 800c55e:	1b9a      	subs	r2, r3, r6
 800c560:	d006      	beq.n	800c570 <_dtoa_r+0x7a0>
 800c562:	ee18 1a10 	vmov	r1, s16
 800c566:	4620      	mov	r0, r4
 800c568:	f000 ffd4 	bl	800d514 <__pow5mult>
 800c56c:	ee08 0a10 	vmov	s16, r0
 800c570:	2101      	movs	r1, #1
 800c572:	4620      	mov	r0, r4
 800c574:	f000 ff0e 	bl	800d394 <__i2b>
 800c578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	4606      	mov	r6, r0
 800c57e:	f340 8088 	ble.w	800c692 <_dtoa_r+0x8c2>
 800c582:	461a      	mov	r2, r3
 800c584:	4601      	mov	r1, r0
 800c586:	4620      	mov	r0, r4
 800c588:	f000 ffc4 	bl	800d514 <__pow5mult>
 800c58c:	9b06      	ldr	r3, [sp, #24]
 800c58e:	2b01      	cmp	r3, #1
 800c590:	4606      	mov	r6, r0
 800c592:	f340 8081 	ble.w	800c698 <_dtoa_r+0x8c8>
 800c596:	f04f 0800 	mov.w	r8, #0
 800c59a:	6933      	ldr	r3, [r6, #16]
 800c59c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c5a0:	6918      	ldr	r0, [r3, #16]
 800c5a2:	f000 fea7 	bl	800d2f4 <__hi0bits>
 800c5a6:	f1c0 0020 	rsb	r0, r0, #32
 800c5aa:	9b05      	ldr	r3, [sp, #20]
 800c5ac:	4418      	add	r0, r3
 800c5ae:	f010 001f 	ands.w	r0, r0, #31
 800c5b2:	f000 8092 	beq.w	800c6da <_dtoa_r+0x90a>
 800c5b6:	f1c0 0320 	rsb	r3, r0, #32
 800c5ba:	2b04      	cmp	r3, #4
 800c5bc:	f340 808a 	ble.w	800c6d4 <_dtoa_r+0x904>
 800c5c0:	f1c0 001c 	rsb	r0, r0, #28
 800c5c4:	9b04      	ldr	r3, [sp, #16]
 800c5c6:	4403      	add	r3, r0
 800c5c8:	9304      	str	r3, [sp, #16]
 800c5ca:	9b05      	ldr	r3, [sp, #20]
 800c5cc:	4403      	add	r3, r0
 800c5ce:	4405      	add	r5, r0
 800c5d0:	9305      	str	r3, [sp, #20]
 800c5d2:	9b04      	ldr	r3, [sp, #16]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	dd07      	ble.n	800c5e8 <_dtoa_r+0x818>
 800c5d8:	ee18 1a10 	vmov	r1, s16
 800c5dc:	461a      	mov	r2, r3
 800c5de:	4620      	mov	r0, r4
 800c5e0:	f000 fff2 	bl	800d5c8 <__lshift>
 800c5e4:	ee08 0a10 	vmov	s16, r0
 800c5e8:	9b05      	ldr	r3, [sp, #20]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	dd05      	ble.n	800c5fa <_dtoa_r+0x82a>
 800c5ee:	4631      	mov	r1, r6
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f000 ffe8 	bl	800d5c8 <__lshift>
 800c5f8:	4606      	mov	r6, r0
 800c5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d06e      	beq.n	800c6de <_dtoa_r+0x90e>
 800c600:	ee18 0a10 	vmov	r0, s16
 800c604:	4631      	mov	r1, r6
 800c606:	f001 f84f 	bl	800d6a8 <__mcmp>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	da67      	bge.n	800c6de <_dtoa_r+0x90e>
 800c60e:	9b00      	ldr	r3, [sp, #0]
 800c610:	3b01      	subs	r3, #1
 800c612:	ee18 1a10 	vmov	r1, s16
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	220a      	movs	r2, #10
 800c61a:	2300      	movs	r3, #0
 800c61c:	4620      	mov	r0, r4
 800c61e:	f000 fdd9 	bl	800d1d4 <__multadd>
 800c622:	9b08      	ldr	r3, [sp, #32]
 800c624:	ee08 0a10 	vmov	s16, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f000 81b1 	beq.w	800c990 <_dtoa_r+0xbc0>
 800c62e:	2300      	movs	r3, #0
 800c630:	4639      	mov	r1, r7
 800c632:	220a      	movs	r2, #10
 800c634:	4620      	mov	r0, r4
 800c636:	f000 fdcd 	bl	800d1d4 <__multadd>
 800c63a:	9b02      	ldr	r3, [sp, #8]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	4607      	mov	r7, r0
 800c640:	f300 808e 	bgt.w	800c760 <_dtoa_r+0x990>
 800c644:	9b06      	ldr	r3, [sp, #24]
 800c646:	2b02      	cmp	r3, #2
 800c648:	dc51      	bgt.n	800c6ee <_dtoa_r+0x91e>
 800c64a:	e089      	b.n	800c760 <_dtoa_r+0x990>
 800c64c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c64e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c652:	e74b      	b.n	800c4ec <_dtoa_r+0x71c>
 800c654:	9b03      	ldr	r3, [sp, #12]
 800c656:	1e5e      	subs	r6, r3, #1
 800c658:	9b07      	ldr	r3, [sp, #28]
 800c65a:	42b3      	cmp	r3, r6
 800c65c:	bfbf      	itttt	lt
 800c65e:	9b07      	ldrlt	r3, [sp, #28]
 800c660:	9607      	strlt	r6, [sp, #28]
 800c662:	1af2      	sublt	r2, r6, r3
 800c664:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c666:	bfb6      	itet	lt
 800c668:	189b      	addlt	r3, r3, r2
 800c66a:	1b9e      	subge	r6, r3, r6
 800c66c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c66e:	9b03      	ldr	r3, [sp, #12]
 800c670:	bfb8      	it	lt
 800c672:	2600      	movlt	r6, #0
 800c674:	2b00      	cmp	r3, #0
 800c676:	bfb7      	itett	lt
 800c678:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c67c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c680:	1a9d      	sublt	r5, r3, r2
 800c682:	2300      	movlt	r3, #0
 800c684:	e734      	b.n	800c4f0 <_dtoa_r+0x720>
 800c686:	9e07      	ldr	r6, [sp, #28]
 800c688:	9d04      	ldr	r5, [sp, #16]
 800c68a:	9f08      	ldr	r7, [sp, #32]
 800c68c:	e73b      	b.n	800c506 <_dtoa_r+0x736>
 800c68e:	9a07      	ldr	r2, [sp, #28]
 800c690:	e767      	b.n	800c562 <_dtoa_r+0x792>
 800c692:	9b06      	ldr	r3, [sp, #24]
 800c694:	2b01      	cmp	r3, #1
 800c696:	dc18      	bgt.n	800c6ca <_dtoa_r+0x8fa>
 800c698:	f1ba 0f00 	cmp.w	sl, #0
 800c69c:	d115      	bne.n	800c6ca <_dtoa_r+0x8fa>
 800c69e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6a2:	b993      	cbnz	r3, 800c6ca <_dtoa_r+0x8fa>
 800c6a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c6a8:	0d1b      	lsrs	r3, r3, #20
 800c6aa:	051b      	lsls	r3, r3, #20
 800c6ac:	b183      	cbz	r3, 800c6d0 <_dtoa_r+0x900>
 800c6ae:	9b04      	ldr	r3, [sp, #16]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	9304      	str	r3, [sp, #16]
 800c6b4:	9b05      	ldr	r3, [sp, #20]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	9305      	str	r3, [sp, #20]
 800c6ba:	f04f 0801 	mov.w	r8, #1
 800c6be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f47f af6a 	bne.w	800c59a <_dtoa_r+0x7ca>
 800c6c6:	2001      	movs	r0, #1
 800c6c8:	e76f      	b.n	800c5aa <_dtoa_r+0x7da>
 800c6ca:	f04f 0800 	mov.w	r8, #0
 800c6ce:	e7f6      	b.n	800c6be <_dtoa_r+0x8ee>
 800c6d0:	4698      	mov	r8, r3
 800c6d2:	e7f4      	b.n	800c6be <_dtoa_r+0x8ee>
 800c6d4:	f43f af7d 	beq.w	800c5d2 <_dtoa_r+0x802>
 800c6d8:	4618      	mov	r0, r3
 800c6da:	301c      	adds	r0, #28
 800c6dc:	e772      	b.n	800c5c4 <_dtoa_r+0x7f4>
 800c6de:	9b03      	ldr	r3, [sp, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	dc37      	bgt.n	800c754 <_dtoa_r+0x984>
 800c6e4:	9b06      	ldr	r3, [sp, #24]
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	dd34      	ble.n	800c754 <_dtoa_r+0x984>
 800c6ea:	9b03      	ldr	r3, [sp, #12]
 800c6ec:	9302      	str	r3, [sp, #8]
 800c6ee:	9b02      	ldr	r3, [sp, #8]
 800c6f0:	b96b      	cbnz	r3, 800c70e <_dtoa_r+0x93e>
 800c6f2:	4631      	mov	r1, r6
 800c6f4:	2205      	movs	r2, #5
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f000 fd6c 	bl	800d1d4 <__multadd>
 800c6fc:	4601      	mov	r1, r0
 800c6fe:	4606      	mov	r6, r0
 800c700:	ee18 0a10 	vmov	r0, s16
 800c704:	f000 ffd0 	bl	800d6a8 <__mcmp>
 800c708:	2800      	cmp	r0, #0
 800c70a:	f73f adbb 	bgt.w	800c284 <_dtoa_r+0x4b4>
 800c70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c710:	9d01      	ldr	r5, [sp, #4]
 800c712:	43db      	mvns	r3, r3
 800c714:	9300      	str	r3, [sp, #0]
 800c716:	f04f 0800 	mov.w	r8, #0
 800c71a:	4631      	mov	r1, r6
 800c71c:	4620      	mov	r0, r4
 800c71e:	f000 fd37 	bl	800d190 <_Bfree>
 800c722:	2f00      	cmp	r7, #0
 800c724:	f43f aea4 	beq.w	800c470 <_dtoa_r+0x6a0>
 800c728:	f1b8 0f00 	cmp.w	r8, #0
 800c72c:	d005      	beq.n	800c73a <_dtoa_r+0x96a>
 800c72e:	45b8      	cmp	r8, r7
 800c730:	d003      	beq.n	800c73a <_dtoa_r+0x96a>
 800c732:	4641      	mov	r1, r8
 800c734:	4620      	mov	r0, r4
 800c736:	f000 fd2b 	bl	800d190 <_Bfree>
 800c73a:	4639      	mov	r1, r7
 800c73c:	4620      	mov	r0, r4
 800c73e:	f000 fd27 	bl	800d190 <_Bfree>
 800c742:	e695      	b.n	800c470 <_dtoa_r+0x6a0>
 800c744:	2600      	movs	r6, #0
 800c746:	4637      	mov	r7, r6
 800c748:	e7e1      	b.n	800c70e <_dtoa_r+0x93e>
 800c74a:	9700      	str	r7, [sp, #0]
 800c74c:	4637      	mov	r7, r6
 800c74e:	e599      	b.n	800c284 <_dtoa_r+0x4b4>
 800c750:	40240000 	.word	0x40240000
 800c754:	9b08      	ldr	r3, [sp, #32]
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 80ca 	beq.w	800c8f0 <_dtoa_r+0xb20>
 800c75c:	9b03      	ldr	r3, [sp, #12]
 800c75e:	9302      	str	r3, [sp, #8]
 800c760:	2d00      	cmp	r5, #0
 800c762:	dd05      	ble.n	800c770 <_dtoa_r+0x9a0>
 800c764:	4639      	mov	r1, r7
 800c766:	462a      	mov	r2, r5
 800c768:	4620      	mov	r0, r4
 800c76a:	f000 ff2d 	bl	800d5c8 <__lshift>
 800c76e:	4607      	mov	r7, r0
 800c770:	f1b8 0f00 	cmp.w	r8, #0
 800c774:	d05b      	beq.n	800c82e <_dtoa_r+0xa5e>
 800c776:	6879      	ldr	r1, [r7, #4]
 800c778:	4620      	mov	r0, r4
 800c77a:	f000 fcc9 	bl	800d110 <_Balloc>
 800c77e:	4605      	mov	r5, r0
 800c780:	b928      	cbnz	r0, 800c78e <_dtoa_r+0x9be>
 800c782:	4b87      	ldr	r3, [pc, #540]	; (800c9a0 <_dtoa_r+0xbd0>)
 800c784:	4602      	mov	r2, r0
 800c786:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c78a:	f7ff bb3b 	b.w	800be04 <_dtoa_r+0x34>
 800c78e:	693a      	ldr	r2, [r7, #16]
 800c790:	3202      	adds	r2, #2
 800c792:	0092      	lsls	r2, r2, #2
 800c794:	f107 010c 	add.w	r1, r7, #12
 800c798:	300c      	adds	r0, #12
 800c79a:	f000 fc9f 	bl	800d0dc <memcpy>
 800c79e:	2201      	movs	r2, #1
 800c7a0:	4629      	mov	r1, r5
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f000 ff10 	bl	800d5c8 <__lshift>
 800c7a8:	9b01      	ldr	r3, [sp, #4]
 800c7aa:	f103 0901 	add.w	r9, r3, #1
 800c7ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c7b2:	4413      	add	r3, r2
 800c7b4:	9305      	str	r3, [sp, #20]
 800c7b6:	f00a 0301 	and.w	r3, sl, #1
 800c7ba:	46b8      	mov	r8, r7
 800c7bc:	9304      	str	r3, [sp, #16]
 800c7be:	4607      	mov	r7, r0
 800c7c0:	4631      	mov	r1, r6
 800c7c2:	ee18 0a10 	vmov	r0, s16
 800c7c6:	f7ff fa77 	bl	800bcb8 <quorem>
 800c7ca:	4641      	mov	r1, r8
 800c7cc:	9002      	str	r0, [sp, #8]
 800c7ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c7d2:	ee18 0a10 	vmov	r0, s16
 800c7d6:	f000 ff67 	bl	800d6a8 <__mcmp>
 800c7da:	463a      	mov	r2, r7
 800c7dc:	9003      	str	r0, [sp, #12]
 800c7de:	4631      	mov	r1, r6
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f000 ff7d 	bl	800d6e0 <__mdiff>
 800c7e6:	68c2      	ldr	r2, [r0, #12]
 800c7e8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800c7ec:	4605      	mov	r5, r0
 800c7ee:	bb02      	cbnz	r2, 800c832 <_dtoa_r+0xa62>
 800c7f0:	4601      	mov	r1, r0
 800c7f2:	ee18 0a10 	vmov	r0, s16
 800c7f6:	f000 ff57 	bl	800d6a8 <__mcmp>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	4620      	mov	r0, r4
 800c800:	9207      	str	r2, [sp, #28]
 800c802:	f000 fcc5 	bl	800d190 <_Bfree>
 800c806:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c80a:	ea43 0102 	orr.w	r1, r3, r2
 800c80e:	9b04      	ldr	r3, [sp, #16]
 800c810:	430b      	orrs	r3, r1
 800c812:	464d      	mov	r5, r9
 800c814:	d10f      	bne.n	800c836 <_dtoa_r+0xa66>
 800c816:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c81a:	d02a      	beq.n	800c872 <_dtoa_r+0xaa2>
 800c81c:	9b03      	ldr	r3, [sp, #12]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	dd02      	ble.n	800c828 <_dtoa_r+0xa58>
 800c822:	9b02      	ldr	r3, [sp, #8]
 800c824:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c828:	f88b a000 	strb.w	sl, [fp]
 800c82c:	e775      	b.n	800c71a <_dtoa_r+0x94a>
 800c82e:	4638      	mov	r0, r7
 800c830:	e7ba      	b.n	800c7a8 <_dtoa_r+0x9d8>
 800c832:	2201      	movs	r2, #1
 800c834:	e7e2      	b.n	800c7fc <_dtoa_r+0xa2c>
 800c836:	9b03      	ldr	r3, [sp, #12]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	db04      	blt.n	800c846 <_dtoa_r+0xa76>
 800c83c:	9906      	ldr	r1, [sp, #24]
 800c83e:	430b      	orrs	r3, r1
 800c840:	9904      	ldr	r1, [sp, #16]
 800c842:	430b      	orrs	r3, r1
 800c844:	d122      	bne.n	800c88c <_dtoa_r+0xabc>
 800c846:	2a00      	cmp	r2, #0
 800c848:	ddee      	ble.n	800c828 <_dtoa_r+0xa58>
 800c84a:	ee18 1a10 	vmov	r1, s16
 800c84e:	2201      	movs	r2, #1
 800c850:	4620      	mov	r0, r4
 800c852:	f000 feb9 	bl	800d5c8 <__lshift>
 800c856:	4631      	mov	r1, r6
 800c858:	ee08 0a10 	vmov	s16, r0
 800c85c:	f000 ff24 	bl	800d6a8 <__mcmp>
 800c860:	2800      	cmp	r0, #0
 800c862:	dc03      	bgt.n	800c86c <_dtoa_r+0xa9c>
 800c864:	d1e0      	bne.n	800c828 <_dtoa_r+0xa58>
 800c866:	f01a 0f01 	tst.w	sl, #1
 800c86a:	d0dd      	beq.n	800c828 <_dtoa_r+0xa58>
 800c86c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c870:	d1d7      	bne.n	800c822 <_dtoa_r+0xa52>
 800c872:	2339      	movs	r3, #57	; 0x39
 800c874:	f88b 3000 	strb.w	r3, [fp]
 800c878:	462b      	mov	r3, r5
 800c87a:	461d      	mov	r5, r3
 800c87c:	3b01      	subs	r3, #1
 800c87e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c882:	2a39      	cmp	r2, #57	; 0x39
 800c884:	d071      	beq.n	800c96a <_dtoa_r+0xb9a>
 800c886:	3201      	adds	r2, #1
 800c888:	701a      	strb	r2, [r3, #0]
 800c88a:	e746      	b.n	800c71a <_dtoa_r+0x94a>
 800c88c:	2a00      	cmp	r2, #0
 800c88e:	dd07      	ble.n	800c8a0 <_dtoa_r+0xad0>
 800c890:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c894:	d0ed      	beq.n	800c872 <_dtoa_r+0xaa2>
 800c896:	f10a 0301 	add.w	r3, sl, #1
 800c89a:	f88b 3000 	strb.w	r3, [fp]
 800c89e:	e73c      	b.n	800c71a <_dtoa_r+0x94a>
 800c8a0:	9b05      	ldr	r3, [sp, #20]
 800c8a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c8a6:	4599      	cmp	r9, r3
 800c8a8:	d047      	beq.n	800c93a <_dtoa_r+0xb6a>
 800c8aa:	ee18 1a10 	vmov	r1, s16
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	220a      	movs	r2, #10
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	f000 fc8e 	bl	800d1d4 <__multadd>
 800c8b8:	45b8      	cmp	r8, r7
 800c8ba:	ee08 0a10 	vmov	s16, r0
 800c8be:	f04f 0300 	mov.w	r3, #0
 800c8c2:	f04f 020a 	mov.w	r2, #10
 800c8c6:	4641      	mov	r1, r8
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	d106      	bne.n	800c8da <_dtoa_r+0xb0a>
 800c8cc:	f000 fc82 	bl	800d1d4 <__multadd>
 800c8d0:	4680      	mov	r8, r0
 800c8d2:	4607      	mov	r7, r0
 800c8d4:	f109 0901 	add.w	r9, r9, #1
 800c8d8:	e772      	b.n	800c7c0 <_dtoa_r+0x9f0>
 800c8da:	f000 fc7b 	bl	800d1d4 <__multadd>
 800c8de:	4639      	mov	r1, r7
 800c8e0:	4680      	mov	r8, r0
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	220a      	movs	r2, #10
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	f000 fc74 	bl	800d1d4 <__multadd>
 800c8ec:	4607      	mov	r7, r0
 800c8ee:	e7f1      	b.n	800c8d4 <_dtoa_r+0xb04>
 800c8f0:	9b03      	ldr	r3, [sp, #12]
 800c8f2:	9302      	str	r3, [sp, #8]
 800c8f4:	9d01      	ldr	r5, [sp, #4]
 800c8f6:	ee18 0a10 	vmov	r0, s16
 800c8fa:	4631      	mov	r1, r6
 800c8fc:	f7ff f9dc 	bl	800bcb8 <quorem>
 800c900:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c904:	9b01      	ldr	r3, [sp, #4]
 800c906:	f805 ab01 	strb.w	sl, [r5], #1
 800c90a:	1aea      	subs	r2, r5, r3
 800c90c:	9b02      	ldr	r3, [sp, #8]
 800c90e:	4293      	cmp	r3, r2
 800c910:	dd09      	ble.n	800c926 <_dtoa_r+0xb56>
 800c912:	ee18 1a10 	vmov	r1, s16
 800c916:	2300      	movs	r3, #0
 800c918:	220a      	movs	r2, #10
 800c91a:	4620      	mov	r0, r4
 800c91c:	f000 fc5a 	bl	800d1d4 <__multadd>
 800c920:	ee08 0a10 	vmov	s16, r0
 800c924:	e7e7      	b.n	800c8f6 <_dtoa_r+0xb26>
 800c926:	9b02      	ldr	r3, [sp, #8]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	bfc8      	it	gt
 800c92c:	461d      	movgt	r5, r3
 800c92e:	9b01      	ldr	r3, [sp, #4]
 800c930:	bfd8      	it	le
 800c932:	2501      	movle	r5, #1
 800c934:	441d      	add	r5, r3
 800c936:	f04f 0800 	mov.w	r8, #0
 800c93a:	ee18 1a10 	vmov	r1, s16
 800c93e:	2201      	movs	r2, #1
 800c940:	4620      	mov	r0, r4
 800c942:	f000 fe41 	bl	800d5c8 <__lshift>
 800c946:	4631      	mov	r1, r6
 800c948:	ee08 0a10 	vmov	s16, r0
 800c94c:	f000 feac 	bl	800d6a8 <__mcmp>
 800c950:	2800      	cmp	r0, #0
 800c952:	dc91      	bgt.n	800c878 <_dtoa_r+0xaa8>
 800c954:	d102      	bne.n	800c95c <_dtoa_r+0xb8c>
 800c956:	f01a 0f01 	tst.w	sl, #1
 800c95a:	d18d      	bne.n	800c878 <_dtoa_r+0xaa8>
 800c95c:	462b      	mov	r3, r5
 800c95e:	461d      	mov	r5, r3
 800c960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c964:	2a30      	cmp	r2, #48	; 0x30
 800c966:	d0fa      	beq.n	800c95e <_dtoa_r+0xb8e>
 800c968:	e6d7      	b.n	800c71a <_dtoa_r+0x94a>
 800c96a:	9a01      	ldr	r2, [sp, #4]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d184      	bne.n	800c87a <_dtoa_r+0xaaa>
 800c970:	9b00      	ldr	r3, [sp, #0]
 800c972:	3301      	adds	r3, #1
 800c974:	9300      	str	r3, [sp, #0]
 800c976:	2331      	movs	r3, #49	; 0x31
 800c978:	7013      	strb	r3, [r2, #0]
 800c97a:	e6ce      	b.n	800c71a <_dtoa_r+0x94a>
 800c97c:	4b09      	ldr	r3, [pc, #36]	; (800c9a4 <_dtoa_r+0xbd4>)
 800c97e:	f7ff ba95 	b.w	800beac <_dtoa_r+0xdc>
 800c982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c984:	2b00      	cmp	r3, #0
 800c986:	f47f aa6e 	bne.w	800be66 <_dtoa_r+0x96>
 800c98a:	4b07      	ldr	r3, [pc, #28]	; (800c9a8 <_dtoa_r+0xbd8>)
 800c98c:	f7ff ba8e 	b.w	800beac <_dtoa_r+0xdc>
 800c990:	9b02      	ldr	r3, [sp, #8]
 800c992:	2b00      	cmp	r3, #0
 800c994:	dcae      	bgt.n	800c8f4 <_dtoa_r+0xb24>
 800c996:	9b06      	ldr	r3, [sp, #24]
 800c998:	2b02      	cmp	r3, #2
 800c99a:	f73f aea8 	bgt.w	800c6ee <_dtoa_r+0x91e>
 800c99e:	e7a9      	b.n	800c8f4 <_dtoa_r+0xb24>
 800c9a0:	0800ed59 	.word	0x0800ed59
 800c9a4:	0800eac4 	.word	0x0800eac4
 800c9a8:	0800ecf1 	.word	0x0800ecf1

0800c9ac <fiprintf>:
 800c9ac:	b40e      	push	{r1, r2, r3}
 800c9ae:	b503      	push	{r0, r1, lr}
 800c9b0:	4601      	mov	r1, r0
 800c9b2:	ab03      	add	r3, sp, #12
 800c9b4:	4805      	ldr	r0, [pc, #20]	; (800c9cc <fiprintf+0x20>)
 800c9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9ba:	6800      	ldr	r0, [r0, #0]
 800c9bc:	9301      	str	r3, [sp, #4]
 800c9be:	f001 f9ed 	bl	800dd9c <_vfiprintf_r>
 800c9c2:	b002      	add	sp, #8
 800c9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9c8:	b003      	add	sp, #12
 800c9ca:	4770      	bx	lr
 800c9cc:	2000013c 	.word	0x2000013c

0800c9d0 <rshift>:
 800c9d0:	6903      	ldr	r3, [r0, #16]
 800c9d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c9d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9da:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c9de:	f100 0414 	add.w	r4, r0, #20
 800c9e2:	dd45      	ble.n	800ca70 <rshift+0xa0>
 800c9e4:	f011 011f 	ands.w	r1, r1, #31
 800c9e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c9ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c9f0:	d10c      	bne.n	800ca0c <rshift+0x3c>
 800c9f2:	f100 0710 	add.w	r7, r0, #16
 800c9f6:	4629      	mov	r1, r5
 800c9f8:	42b1      	cmp	r1, r6
 800c9fa:	d334      	bcc.n	800ca66 <rshift+0x96>
 800c9fc:	1a9b      	subs	r3, r3, r2
 800c9fe:	009b      	lsls	r3, r3, #2
 800ca00:	1eea      	subs	r2, r5, #3
 800ca02:	4296      	cmp	r6, r2
 800ca04:	bf38      	it	cc
 800ca06:	2300      	movcc	r3, #0
 800ca08:	4423      	add	r3, r4
 800ca0a:	e015      	b.n	800ca38 <rshift+0x68>
 800ca0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ca10:	f1c1 0820 	rsb	r8, r1, #32
 800ca14:	40cf      	lsrs	r7, r1
 800ca16:	f105 0e04 	add.w	lr, r5, #4
 800ca1a:	46a1      	mov	r9, r4
 800ca1c:	4576      	cmp	r6, lr
 800ca1e:	46f4      	mov	ip, lr
 800ca20:	d815      	bhi.n	800ca4e <rshift+0x7e>
 800ca22:	1a9a      	subs	r2, r3, r2
 800ca24:	0092      	lsls	r2, r2, #2
 800ca26:	3a04      	subs	r2, #4
 800ca28:	3501      	adds	r5, #1
 800ca2a:	42ae      	cmp	r6, r5
 800ca2c:	bf38      	it	cc
 800ca2e:	2200      	movcc	r2, #0
 800ca30:	18a3      	adds	r3, r4, r2
 800ca32:	50a7      	str	r7, [r4, r2]
 800ca34:	b107      	cbz	r7, 800ca38 <rshift+0x68>
 800ca36:	3304      	adds	r3, #4
 800ca38:	1b1a      	subs	r2, r3, r4
 800ca3a:	42a3      	cmp	r3, r4
 800ca3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca40:	bf08      	it	eq
 800ca42:	2300      	moveq	r3, #0
 800ca44:	6102      	str	r2, [r0, #16]
 800ca46:	bf08      	it	eq
 800ca48:	6143      	streq	r3, [r0, #20]
 800ca4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca4e:	f8dc c000 	ldr.w	ip, [ip]
 800ca52:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca56:	ea4c 0707 	orr.w	r7, ip, r7
 800ca5a:	f849 7b04 	str.w	r7, [r9], #4
 800ca5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca62:	40cf      	lsrs	r7, r1
 800ca64:	e7da      	b.n	800ca1c <rshift+0x4c>
 800ca66:	f851 cb04 	ldr.w	ip, [r1], #4
 800ca6a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ca6e:	e7c3      	b.n	800c9f8 <rshift+0x28>
 800ca70:	4623      	mov	r3, r4
 800ca72:	e7e1      	b.n	800ca38 <rshift+0x68>

0800ca74 <__hexdig_fun>:
 800ca74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ca78:	2b09      	cmp	r3, #9
 800ca7a:	d802      	bhi.n	800ca82 <__hexdig_fun+0xe>
 800ca7c:	3820      	subs	r0, #32
 800ca7e:	b2c0      	uxtb	r0, r0
 800ca80:	4770      	bx	lr
 800ca82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ca86:	2b05      	cmp	r3, #5
 800ca88:	d801      	bhi.n	800ca8e <__hexdig_fun+0x1a>
 800ca8a:	3847      	subs	r0, #71	; 0x47
 800ca8c:	e7f7      	b.n	800ca7e <__hexdig_fun+0xa>
 800ca8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ca92:	2b05      	cmp	r3, #5
 800ca94:	d801      	bhi.n	800ca9a <__hexdig_fun+0x26>
 800ca96:	3827      	subs	r0, #39	; 0x27
 800ca98:	e7f1      	b.n	800ca7e <__hexdig_fun+0xa>
 800ca9a:	2000      	movs	r0, #0
 800ca9c:	4770      	bx	lr
	...

0800caa0 <__gethex>:
 800caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	ed2d 8b02 	vpush	{d8}
 800caa8:	b089      	sub	sp, #36	; 0x24
 800caaa:	ee08 0a10 	vmov	s16, r0
 800caae:	9304      	str	r3, [sp, #16]
 800cab0:	4bb4      	ldr	r3, [pc, #720]	; (800cd84 <__gethex+0x2e4>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	9301      	str	r3, [sp, #4]
 800cab6:	4618      	mov	r0, r3
 800cab8:	468b      	mov	fp, r1
 800caba:	4690      	mov	r8, r2
 800cabc:	f7f3 fb92 	bl	80001e4 <strlen>
 800cac0:	9b01      	ldr	r3, [sp, #4]
 800cac2:	f8db 2000 	ldr.w	r2, [fp]
 800cac6:	4403      	add	r3, r0
 800cac8:	4682      	mov	sl, r0
 800caca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cace:	9305      	str	r3, [sp, #20]
 800cad0:	1c93      	adds	r3, r2, #2
 800cad2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cad6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cada:	32fe      	adds	r2, #254	; 0xfe
 800cadc:	18d1      	adds	r1, r2, r3
 800cade:	461f      	mov	r7, r3
 800cae0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cae4:	9100      	str	r1, [sp, #0]
 800cae6:	2830      	cmp	r0, #48	; 0x30
 800cae8:	d0f8      	beq.n	800cadc <__gethex+0x3c>
 800caea:	f7ff ffc3 	bl	800ca74 <__hexdig_fun>
 800caee:	4604      	mov	r4, r0
 800caf0:	2800      	cmp	r0, #0
 800caf2:	d13a      	bne.n	800cb6a <__gethex+0xca>
 800caf4:	9901      	ldr	r1, [sp, #4]
 800caf6:	4652      	mov	r2, sl
 800caf8:	4638      	mov	r0, r7
 800cafa:	f001 fa89 	bl	800e010 <strncmp>
 800cafe:	4605      	mov	r5, r0
 800cb00:	2800      	cmp	r0, #0
 800cb02:	d168      	bne.n	800cbd6 <__gethex+0x136>
 800cb04:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cb08:	eb07 060a 	add.w	r6, r7, sl
 800cb0c:	f7ff ffb2 	bl	800ca74 <__hexdig_fun>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d062      	beq.n	800cbda <__gethex+0x13a>
 800cb14:	4633      	mov	r3, r6
 800cb16:	7818      	ldrb	r0, [r3, #0]
 800cb18:	2830      	cmp	r0, #48	; 0x30
 800cb1a:	461f      	mov	r7, r3
 800cb1c:	f103 0301 	add.w	r3, r3, #1
 800cb20:	d0f9      	beq.n	800cb16 <__gethex+0x76>
 800cb22:	f7ff ffa7 	bl	800ca74 <__hexdig_fun>
 800cb26:	2301      	movs	r3, #1
 800cb28:	fab0 f480 	clz	r4, r0
 800cb2c:	0964      	lsrs	r4, r4, #5
 800cb2e:	4635      	mov	r5, r6
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	463a      	mov	r2, r7
 800cb34:	4616      	mov	r6, r2
 800cb36:	3201      	adds	r2, #1
 800cb38:	7830      	ldrb	r0, [r6, #0]
 800cb3a:	f7ff ff9b 	bl	800ca74 <__hexdig_fun>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d1f8      	bne.n	800cb34 <__gethex+0x94>
 800cb42:	9901      	ldr	r1, [sp, #4]
 800cb44:	4652      	mov	r2, sl
 800cb46:	4630      	mov	r0, r6
 800cb48:	f001 fa62 	bl	800e010 <strncmp>
 800cb4c:	b980      	cbnz	r0, 800cb70 <__gethex+0xd0>
 800cb4e:	b94d      	cbnz	r5, 800cb64 <__gethex+0xc4>
 800cb50:	eb06 050a 	add.w	r5, r6, sl
 800cb54:	462a      	mov	r2, r5
 800cb56:	4616      	mov	r6, r2
 800cb58:	3201      	adds	r2, #1
 800cb5a:	7830      	ldrb	r0, [r6, #0]
 800cb5c:	f7ff ff8a 	bl	800ca74 <__hexdig_fun>
 800cb60:	2800      	cmp	r0, #0
 800cb62:	d1f8      	bne.n	800cb56 <__gethex+0xb6>
 800cb64:	1bad      	subs	r5, r5, r6
 800cb66:	00ad      	lsls	r5, r5, #2
 800cb68:	e004      	b.n	800cb74 <__gethex+0xd4>
 800cb6a:	2400      	movs	r4, #0
 800cb6c:	4625      	mov	r5, r4
 800cb6e:	e7e0      	b.n	800cb32 <__gethex+0x92>
 800cb70:	2d00      	cmp	r5, #0
 800cb72:	d1f7      	bne.n	800cb64 <__gethex+0xc4>
 800cb74:	7833      	ldrb	r3, [r6, #0]
 800cb76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cb7a:	2b50      	cmp	r3, #80	; 0x50
 800cb7c:	d13b      	bne.n	800cbf6 <__gethex+0x156>
 800cb7e:	7873      	ldrb	r3, [r6, #1]
 800cb80:	2b2b      	cmp	r3, #43	; 0x2b
 800cb82:	d02c      	beq.n	800cbde <__gethex+0x13e>
 800cb84:	2b2d      	cmp	r3, #45	; 0x2d
 800cb86:	d02e      	beq.n	800cbe6 <__gethex+0x146>
 800cb88:	1c71      	adds	r1, r6, #1
 800cb8a:	f04f 0900 	mov.w	r9, #0
 800cb8e:	7808      	ldrb	r0, [r1, #0]
 800cb90:	f7ff ff70 	bl	800ca74 <__hexdig_fun>
 800cb94:	1e43      	subs	r3, r0, #1
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	2b18      	cmp	r3, #24
 800cb9a:	d82c      	bhi.n	800cbf6 <__gethex+0x156>
 800cb9c:	f1a0 0210 	sub.w	r2, r0, #16
 800cba0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cba4:	f7ff ff66 	bl	800ca74 <__hexdig_fun>
 800cba8:	1e43      	subs	r3, r0, #1
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	2b18      	cmp	r3, #24
 800cbae:	d91d      	bls.n	800cbec <__gethex+0x14c>
 800cbb0:	f1b9 0f00 	cmp.w	r9, #0
 800cbb4:	d000      	beq.n	800cbb8 <__gethex+0x118>
 800cbb6:	4252      	negs	r2, r2
 800cbb8:	4415      	add	r5, r2
 800cbba:	f8cb 1000 	str.w	r1, [fp]
 800cbbe:	b1e4      	cbz	r4, 800cbfa <__gethex+0x15a>
 800cbc0:	9b00      	ldr	r3, [sp, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	bf14      	ite	ne
 800cbc6:	2700      	movne	r7, #0
 800cbc8:	2706      	moveq	r7, #6
 800cbca:	4638      	mov	r0, r7
 800cbcc:	b009      	add	sp, #36	; 0x24
 800cbce:	ecbd 8b02 	vpop	{d8}
 800cbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd6:	463e      	mov	r6, r7
 800cbd8:	4625      	mov	r5, r4
 800cbda:	2401      	movs	r4, #1
 800cbdc:	e7ca      	b.n	800cb74 <__gethex+0xd4>
 800cbde:	f04f 0900 	mov.w	r9, #0
 800cbe2:	1cb1      	adds	r1, r6, #2
 800cbe4:	e7d3      	b.n	800cb8e <__gethex+0xee>
 800cbe6:	f04f 0901 	mov.w	r9, #1
 800cbea:	e7fa      	b.n	800cbe2 <__gethex+0x142>
 800cbec:	230a      	movs	r3, #10
 800cbee:	fb03 0202 	mla	r2, r3, r2, r0
 800cbf2:	3a10      	subs	r2, #16
 800cbf4:	e7d4      	b.n	800cba0 <__gethex+0x100>
 800cbf6:	4631      	mov	r1, r6
 800cbf8:	e7df      	b.n	800cbba <__gethex+0x11a>
 800cbfa:	1bf3      	subs	r3, r6, r7
 800cbfc:	3b01      	subs	r3, #1
 800cbfe:	4621      	mov	r1, r4
 800cc00:	2b07      	cmp	r3, #7
 800cc02:	dc0b      	bgt.n	800cc1c <__gethex+0x17c>
 800cc04:	ee18 0a10 	vmov	r0, s16
 800cc08:	f000 fa82 	bl	800d110 <_Balloc>
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	b940      	cbnz	r0, 800cc22 <__gethex+0x182>
 800cc10:	4b5d      	ldr	r3, [pc, #372]	; (800cd88 <__gethex+0x2e8>)
 800cc12:	4602      	mov	r2, r0
 800cc14:	21de      	movs	r1, #222	; 0xde
 800cc16:	485d      	ldr	r0, [pc, #372]	; (800cd8c <__gethex+0x2ec>)
 800cc18:	f7ff f830 	bl	800bc7c <__assert_func>
 800cc1c:	3101      	adds	r1, #1
 800cc1e:	105b      	asrs	r3, r3, #1
 800cc20:	e7ee      	b.n	800cc00 <__gethex+0x160>
 800cc22:	f100 0914 	add.w	r9, r0, #20
 800cc26:	f04f 0b00 	mov.w	fp, #0
 800cc2a:	f1ca 0301 	rsb	r3, sl, #1
 800cc2e:	f8cd 9008 	str.w	r9, [sp, #8]
 800cc32:	f8cd b000 	str.w	fp, [sp]
 800cc36:	9306      	str	r3, [sp, #24]
 800cc38:	42b7      	cmp	r7, r6
 800cc3a:	d340      	bcc.n	800ccbe <__gethex+0x21e>
 800cc3c:	9802      	ldr	r0, [sp, #8]
 800cc3e:	9b00      	ldr	r3, [sp, #0]
 800cc40:	f840 3b04 	str.w	r3, [r0], #4
 800cc44:	eba0 0009 	sub.w	r0, r0, r9
 800cc48:	1080      	asrs	r0, r0, #2
 800cc4a:	0146      	lsls	r6, r0, #5
 800cc4c:	6120      	str	r0, [r4, #16]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f000 fb50 	bl	800d2f4 <__hi0bits>
 800cc54:	1a30      	subs	r0, r6, r0
 800cc56:	f8d8 6000 	ldr.w	r6, [r8]
 800cc5a:	42b0      	cmp	r0, r6
 800cc5c:	dd63      	ble.n	800cd26 <__gethex+0x286>
 800cc5e:	1b87      	subs	r7, r0, r6
 800cc60:	4639      	mov	r1, r7
 800cc62:	4620      	mov	r0, r4
 800cc64:	f000 fef4 	bl	800da50 <__any_on>
 800cc68:	4682      	mov	sl, r0
 800cc6a:	b1a8      	cbz	r0, 800cc98 <__gethex+0x1f8>
 800cc6c:	1e7b      	subs	r3, r7, #1
 800cc6e:	1159      	asrs	r1, r3, #5
 800cc70:	f003 021f 	and.w	r2, r3, #31
 800cc74:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cc78:	f04f 0a01 	mov.w	sl, #1
 800cc7c:	fa0a f202 	lsl.w	r2, sl, r2
 800cc80:	420a      	tst	r2, r1
 800cc82:	d009      	beq.n	800cc98 <__gethex+0x1f8>
 800cc84:	4553      	cmp	r3, sl
 800cc86:	dd05      	ble.n	800cc94 <__gethex+0x1f4>
 800cc88:	1eb9      	subs	r1, r7, #2
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	f000 fee0 	bl	800da50 <__any_on>
 800cc90:	2800      	cmp	r0, #0
 800cc92:	d145      	bne.n	800cd20 <__gethex+0x280>
 800cc94:	f04f 0a02 	mov.w	sl, #2
 800cc98:	4639      	mov	r1, r7
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	f7ff fe98 	bl	800c9d0 <rshift>
 800cca0:	443d      	add	r5, r7
 800cca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cca6:	42ab      	cmp	r3, r5
 800cca8:	da4c      	bge.n	800cd44 <__gethex+0x2a4>
 800ccaa:	ee18 0a10 	vmov	r0, s16
 800ccae:	4621      	mov	r1, r4
 800ccb0:	f000 fa6e 	bl	800d190 <_Bfree>
 800ccb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	6013      	str	r3, [r2, #0]
 800ccba:	27a3      	movs	r7, #163	; 0xa3
 800ccbc:	e785      	b.n	800cbca <__gethex+0x12a>
 800ccbe:	1e73      	subs	r3, r6, #1
 800ccc0:	9a05      	ldr	r2, [sp, #20]
 800ccc2:	9303      	str	r3, [sp, #12]
 800ccc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d019      	beq.n	800cd00 <__gethex+0x260>
 800cccc:	f1bb 0f20 	cmp.w	fp, #32
 800ccd0:	d107      	bne.n	800cce2 <__gethex+0x242>
 800ccd2:	9b02      	ldr	r3, [sp, #8]
 800ccd4:	9a00      	ldr	r2, [sp, #0]
 800ccd6:	f843 2b04 	str.w	r2, [r3], #4
 800ccda:	9302      	str	r3, [sp, #8]
 800ccdc:	2300      	movs	r3, #0
 800ccde:	9300      	str	r3, [sp, #0]
 800cce0:	469b      	mov	fp, r3
 800cce2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cce6:	f7ff fec5 	bl	800ca74 <__hexdig_fun>
 800ccea:	9b00      	ldr	r3, [sp, #0]
 800ccec:	f000 000f 	and.w	r0, r0, #15
 800ccf0:	fa00 f00b 	lsl.w	r0, r0, fp
 800ccf4:	4303      	orrs	r3, r0
 800ccf6:	9300      	str	r3, [sp, #0]
 800ccf8:	f10b 0b04 	add.w	fp, fp, #4
 800ccfc:	9b03      	ldr	r3, [sp, #12]
 800ccfe:	e00d      	b.n	800cd1c <__gethex+0x27c>
 800cd00:	9b03      	ldr	r3, [sp, #12]
 800cd02:	9a06      	ldr	r2, [sp, #24]
 800cd04:	4413      	add	r3, r2
 800cd06:	42bb      	cmp	r3, r7
 800cd08:	d3e0      	bcc.n	800cccc <__gethex+0x22c>
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	9901      	ldr	r1, [sp, #4]
 800cd0e:	9307      	str	r3, [sp, #28]
 800cd10:	4652      	mov	r2, sl
 800cd12:	f001 f97d 	bl	800e010 <strncmp>
 800cd16:	9b07      	ldr	r3, [sp, #28]
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d1d7      	bne.n	800cccc <__gethex+0x22c>
 800cd1c:	461e      	mov	r6, r3
 800cd1e:	e78b      	b.n	800cc38 <__gethex+0x198>
 800cd20:	f04f 0a03 	mov.w	sl, #3
 800cd24:	e7b8      	b.n	800cc98 <__gethex+0x1f8>
 800cd26:	da0a      	bge.n	800cd3e <__gethex+0x29e>
 800cd28:	1a37      	subs	r7, r6, r0
 800cd2a:	4621      	mov	r1, r4
 800cd2c:	ee18 0a10 	vmov	r0, s16
 800cd30:	463a      	mov	r2, r7
 800cd32:	f000 fc49 	bl	800d5c8 <__lshift>
 800cd36:	1bed      	subs	r5, r5, r7
 800cd38:	4604      	mov	r4, r0
 800cd3a:	f100 0914 	add.w	r9, r0, #20
 800cd3e:	f04f 0a00 	mov.w	sl, #0
 800cd42:	e7ae      	b.n	800cca2 <__gethex+0x202>
 800cd44:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cd48:	42a8      	cmp	r0, r5
 800cd4a:	dd72      	ble.n	800ce32 <__gethex+0x392>
 800cd4c:	1b45      	subs	r5, r0, r5
 800cd4e:	42ae      	cmp	r6, r5
 800cd50:	dc36      	bgt.n	800cdc0 <__gethex+0x320>
 800cd52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d02a      	beq.n	800cdb0 <__gethex+0x310>
 800cd5a:	2b03      	cmp	r3, #3
 800cd5c:	d02c      	beq.n	800cdb8 <__gethex+0x318>
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d11c      	bne.n	800cd9c <__gethex+0x2fc>
 800cd62:	42ae      	cmp	r6, r5
 800cd64:	d11a      	bne.n	800cd9c <__gethex+0x2fc>
 800cd66:	2e01      	cmp	r6, #1
 800cd68:	d112      	bne.n	800cd90 <__gethex+0x2f0>
 800cd6a:	9a04      	ldr	r2, [sp, #16]
 800cd6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cd70:	6013      	str	r3, [r2, #0]
 800cd72:	2301      	movs	r3, #1
 800cd74:	6123      	str	r3, [r4, #16]
 800cd76:	f8c9 3000 	str.w	r3, [r9]
 800cd7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd7c:	2762      	movs	r7, #98	; 0x62
 800cd7e:	601c      	str	r4, [r3, #0]
 800cd80:	e723      	b.n	800cbca <__gethex+0x12a>
 800cd82:	bf00      	nop
 800cd84:	0800edd0 	.word	0x0800edd0
 800cd88:	0800ed59 	.word	0x0800ed59
 800cd8c:	0800ed6a 	.word	0x0800ed6a
 800cd90:	1e71      	subs	r1, r6, #1
 800cd92:	4620      	mov	r0, r4
 800cd94:	f000 fe5c 	bl	800da50 <__any_on>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	d1e6      	bne.n	800cd6a <__gethex+0x2ca>
 800cd9c:	ee18 0a10 	vmov	r0, s16
 800cda0:	4621      	mov	r1, r4
 800cda2:	f000 f9f5 	bl	800d190 <_Bfree>
 800cda6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cda8:	2300      	movs	r3, #0
 800cdaa:	6013      	str	r3, [r2, #0]
 800cdac:	2750      	movs	r7, #80	; 0x50
 800cdae:	e70c      	b.n	800cbca <__gethex+0x12a>
 800cdb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d1f2      	bne.n	800cd9c <__gethex+0x2fc>
 800cdb6:	e7d8      	b.n	800cd6a <__gethex+0x2ca>
 800cdb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1d5      	bne.n	800cd6a <__gethex+0x2ca>
 800cdbe:	e7ed      	b.n	800cd9c <__gethex+0x2fc>
 800cdc0:	1e6f      	subs	r7, r5, #1
 800cdc2:	f1ba 0f00 	cmp.w	sl, #0
 800cdc6:	d131      	bne.n	800ce2c <__gethex+0x38c>
 800cdc8:	b127      	cbz	r7, 800cdd4 <__gethex+0x334>
 800cdca:	4639      	mov	r1, r7
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f000 fe3f 	bl	800da50 <__any_on>
 800cdd2:	4682      	mov	sl, r0
 800cdd4:	117b      	asrs	r3, r7, #5
 800cdd6:	2101      	movs	r1, #1
 800cdd8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cddc:	f007 071f 	and.w	r7, r7, #31
 800cde0:	fa01 f707 	lsl.w	r7, r1, r7
 800cde4:	421f      	tst	r7, r3
 800cde6:	4629      	mov	r1, r5
 800cde8:	4620      	mov	r0, r4
 800cdea:	bf18      	it	ne
 800cdec:	f04a 0a02 	orrne.w	sl, sl, #2
 800cdf0:	1b76      	subs	r6, r6, r5
 800cdf2:	f7ff fded 	bl	800c9d0 <rshift>
 800cdf6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cdfa:	2702      	movs	r7, #2
 800cdfc:	f1ba 0f00 	cmp.w	sl, #0
 800ce00:	d048      	beq.n	800ce94 <__gethex+0x3f4>
 800ce02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce06:	2b02      	cmp	r3, #2
 800ce08:	d015      	beq.n	800ce36 <__gethex+0x396>
 800ce0a:	2b03      	cmp	r3, #3
 800ce0c:	d017      	beq.n	800ce3e <__gethex+0x39e>
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d109      	bne.n	800ce26 <__gethex+0x386>
 800ce12:	f01a 0f02 	tst.w	sl, #2
 800ce16:	d006      	beq.n	800ce26 <__gethex+0x386>
 800ce18:	f8d9 0000 	ldr.w	r0, [r9]
 800ce1c:	ea4a 0a00 	orr.w	sl, sl, r0
 800ce20:	f01a 0f01 	tst.w	sl, #1
 800ce24:	d10e      	bne.n	800ce44 <__gethex+0x3a4>
 800ce26:	f047 0710 	orr.w	r7, r7, #16
 800ce2a:	e033      	b.n	800ce94 <__gethex+0x3f4>
 800ce2c:	f04f 0a01 	mov.w	sl, #1
 800ce30:	e7d0      	b.n	800cdd4 <__gethex+0x334>
 800ce32:	2701      	movs	r7, #1
 800ce34:	e7e2      	b.n	800cdfc <__gethex+0x35c>
 800ce36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce38:	f1c3 0301 	rsb	r3, r3, #1
 800ce3c:	9315      	str	r3, [sp, #84]	; 0x54
 800ce3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d0f0      	beq.n	800ce26 <__gethex+0x386>
 800ce44:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ce48:	f104 0314 	add.w	r3, r4, #20
 800ce4c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ce50:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ce54:	f04f 0c00 	mov.w	ip, #0
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce5e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800ce62:	d01c      	beq.n	800ce9e <__gethex+0x3fe>
 800ce64:	3201      	adds	r2, #1
 800ce66:	6002      	str	r2, [r0, #0]
 800ce68:	2f02      	cmp	r7, #2
 800ce6a:	f104 0314 	add.w	r3, r4, #20
 800ce6e:	d13f      	bne.n	800cef0 <__gethex+0x450>
 800ce70:	f8d8 2000 	ldr.w	r2, [r8]
 800ce74:	3a01      	subs	r2, #1
 800ce76:	42b2      	cmp	r2, r6
 800ce78:	d10a      	bne.n	800ce90 <__gethex+0x3f0>
 800ce7a:	1171      	asrs	r1, r6, #5
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce82:	f006 061f 	and.w	r6, r6, #31
 800ce86:	fa02 f606 	lsl.w	r6, r2, r6
 800ce8a:	421e      	tst	r6, r3
 800ce8c:	bf18      	it	ne
 800ce8e:	4617      	movne	r7, r2
 800ce90:	f047 0720 	orr.w	r7, r7, #32
 800ce94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce96:	601c      	str	r4, [r3, #0]
 800ce98:	9b04      	ldr	r3, [sp, #16]
 800ce9a:	601d      	str	r5, [r3, #0]
 800ce9c:	e695      	b.n	800cbca <__gethex+0x12a>
 800ce9e:	4299      	cmp	r1, r3
 800cea0:	f843 cc04 	str.w	ip, [r3, #-4]
 800cea4:	d8d8      	bhi.n	800ce58 <__gethex+0x3b8>
 800cea6:	68a3      	ldr	r3, [r4, #8]
 800cea8:	459b      	cmp	fp, r3
 800ceaa:	db19      	blt.n	800cee0 <__gethex+0x440>
 800ceac:	6861      	ldr	r1, [r4, #4]
 800ceae:	ee18 0a10 	vmov	r0, s16
 800ceb2:	3101      	adds	r1, #1
 800ceb4:	f000 f92c 	bl	800d110 <_Balloc>
 800ceb8:	4681      	mov	r9, r0
 800ceba:	b918      	cbnz	r0, 800cec4 <__gethex+0x424>
 800cebc:	4b1a      	ldr	r3, [pc, #104]	; (800cf28 <__gethex+0x488>)
 800cebe:	4602      	mov	r2, r0
 800cec0:	2184      	movs	r1, #132	; 0x84
 800cec2:	e6a8      	b.n	800cc16 <__gethex+0x176>
 800cec4:	6922      	ldr	r2, [r4, #16]
 800cec6:	3202      	adds	r2, #2
 800cec8:	f104 010c 	add.w	r1, r4, #12
 800cecc:	0092      	lsls	r2, r2, #2
 800cece:	300c      	adds	r0, #12
 800ced0:	f000 f904 	bl	800d0dc <memcpy>
 800ced4:	4621      	mov	r1, r4
 800ced6:	ee18 0a10 	vmov	r0, s16
 800ceda:	f000 f959 	bl	800d190 <_Bfree>
 800cede:	464c      	mov	r4, r9
 800cee0:	6923      	ldr	r3, [r4, #16]
 800cee2:	1c5a      	adds	r2, r3, #1
 800cee4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cee8:	6122      	str	r2, [r4, #16]
 800ceea:	2201      	movs	r2, #1
 800ceec:	615a      	str	r2, [r3, #20]
 800ceee:	e7bb      	b.n	800ce68 <__gethex+0x3c8>
 800cef0:	6922      	ldr	r2, [r4, #16]
 800cef2:	455a      	cmp	r2, fp
 800cef4:	dd0b      	ble.n	800cf0e <__gethex+0x46e>
 800cef6:	2101      	movs	r1, #1
 800cef8:	4620      	mov	r0, r4
 800cefa:	f7ff fd69 	bl	800c9d0 <rshift>
 800cefe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf02:	3501      	adds	r5, #1
 800cf04:	42ab      	cmp	r3, r5
 800cf06:	f6ff aed0 	blt.w	800ccaa <__gethex+0x20a>
 800cf0a:	2701      	movs	r7, #1
 800cf0c:	e7c0      	b.n	800ce90 <__gethex+0x3f0>
 800cf0e:	f016 061f 	ands.w	r6, r6, #31
 800cf12:	d0fa      	beq.n	800cf0a <__gethex+0x46a>
 800cf14:	4453      	add	r3, sl
 800cf16:	f1c6 0620 	rsb	r6, r6, #32
 800cf1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cf1e:	f000 f9e9 	bl	800d2f4 <__hi0bits>
 800cf22:	42b0      	cmp	r0, r6
 800cf24:	dbe7      	blt.n	800cef6 <__gethex+0x456>
 800cf26:	e7f0      	b.n	800cf0a <__gethex+0x46a>
 800cf28:	0800ed59 	.word	0x0800ed59

0800cf2c <L_shift>:
 800cf2c:	f1c2 0208 	rsb	r2, r2, #8
 800cf30:	0092      	lsls	r2, r2, #2
 800cf32:	b570      	push	{r4, r5, r6, lr}
 800cf34:	f1c2 0620 	rsb	r6, r2, #32
 800cf38:	6843      	ldr	r3, [r0, #4]
 800cf3a:	6804      	ldr	r4, [r0, #0]
 800cf3c:	fa03 f506 	lsl.w	r5, r3, r6
 800cf40:	432c      	orrs	r4, r5
 800cf42:	40d3      	lsrs	r3, r2
 800cf44:	6004      	str	r4, [r0, #0]
 800cf46:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf4a:	4288      	cmp	r0, r1
 800cf4c:	d3f4      	bcc.n	800cf38 <L_shift+0xc>
 800cf4e:	bd70      	pop	{r4, r5, r6, pc}

0800cf50 <__match>:
 800cf50:	b530      	push	{r4, r5, lr}
 800cf52:	6803      	ldr	r3, [r0, #0]
 800cf54:	3301      	adds	r3, #1
 800cf56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf5a:	b914      	cbnz	r4, 800cf62 <__match+0x12>
 800cf5c:	6003      	str	r3, [r0, #0]
 800cf5e:	2001      	movs	r0, #1
 800cf60:	bd30      	pop	{r4, r5, pc}
 800cf62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cf6a:	2d19      	cmp	r5, #25
 800cf6c:	bf98      	it	ls
 800cf6e:	3220      	addls	r2, #32
 800cf70:	42a2      	cmp	r2, r4
 800cf72:	d0f0      	beq.n	800cf56 <__match+0x6>
 800cf74:	2000      	movs	r0, #0
 800cf76:	e7f3      	b.n	800cf60 <__match+0x10>

0800cf78 <__hexnan>:
 800cf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf7c:	680b      	ldr	r3, [r1, #0]
 800cf7e:	115e      	asrs	r6, r3, #5
 800cf80:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf84:	f013 031f 	ands.w	r3, r3, #31
 800cf88:	b087      	sub	sp, #28
 800cf8a:	bf18      	it	ne
 800cf8c:	3604      	addne	r6, #4
 800cf8e:	2500      	movs	r5, #0
 800cf90:	1f37      	subs	r7, r6, #4
 800cf92:	4690      	mov	r8, r2
 800cf94:	6802      	ldr	r2, [r0, #0]
 800cf96:	9301      	str	r3, [sp, #4]
 800cf98:	4682      	mov	sl, r0
 800cf9a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cf9e:	46b9      	mov	r9, r7
 800cfa0:	463c      	mov	r4, r7
 800cfa2:	9502      	str	r5, [sp, #8]
 800cfa4:	46ab      	mov	fp, r5
 800cfa6:	7851      	ldrb	r1, [r2, #1]
 800cfa8:	1c53      	adds	r3, r2, #1
 800cfaa:	9303      	str	r3, [sp, #12]
 800cfac:	b341      	cbz	r1, 800d000 <__hexnan+0x88>
 800cfae:	4608      	mov	r0, r1
 800cfb0:	9205      	str	r2, [sp, #20]
 800cfb2:	9104      	str	r1, [sp, #16]
 800cfb4:	f7ff fd5e 	bl	800ca74 <__hexdig_fun>
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d14f      	bne.n	800d05c <__hexnan+0xe4>
 800cfbc:	9904      	ldr	r1, [sp, #16]
 800cfbe:	9a05      	ldr	r2, [sp, #20]
 800cfc0:	2920      	cmp	r1, #32
 800cfc2:	d818      	bhi.n	800cff6 <__hexnan+0x7e>
 800cfc4:	9b02      	ldr	r3, [sp, #8]
 800cfc6:	459b      	cmp	fp, r3
 800cfc8:	dd13      	ble.n	800cff2 <__hexnan+0x7a>
 800cfca:	454c      	cmp	r4, r9
 800cfcc:	d206      	bcs.n	800cfdc <__hexnan+0x64>
 800cfce:	2d07      	cmp	r5, #7
 800cfd0:	dc04      	bgt.n	800cfdc <__hexnan+0x64>
 800cfd2:	462a      	mov	r2, r5
 800cfd4:	4649      	mov	r1, r9
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f7ff ffa8 	bl	800cf2c <L_shift>
 800cfdc:	4544      	cmp	r4, r8
 800cfde:	d950      	bls.n	800d082 <__hexnan+0x10a>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	f1a4 0904 	sub.w	r9, r4, #4
 800cfe6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfea:	f8cd b008 	str.w	fp, [sp, #8]
 800cfee:	464c      	mov	r4, r9
 800cff0:	461d      	mov	r5, r3
 800cff2:	9a03      	ldr	r2, [sp, #12]
 800cff4:	e7d7      	b.n	800cfa6 <__hexnan+0x2e>
 800cff6:	2929      	cmp	r1, #41	; 0x29
 800cff8:	d156      	bne.n	800d0a8 <__hexnan+0x130>
 800cffa:	3202      	adds	r2, #2
 800cffc:	f8ca 2000 	str.w	r2, [sl]
 800d000:	f1bb 0f00 	cmp.w	fp, #0
 800d004:	d050      	beq.n	800d0a8 <__hexnan+0x130>
 800d006:	454c      	cmp	r4, r9
 800d008:	d206      	bcs.n	800d018 <__hexnan+0xa0>
 800d00a:	2d07      	cmp	r5, #7
 800d00c:	dc04      	bgt.n	800d018 <__hexnan+0xa0>
 800d00e:	462a      	mov	r2, r5
 800d010:	4649      	mov	r1, r9
 800d012:	4620      	mov	r0, r4
 800d014:	f7ff ff8a 	bl	800cf2c <L_shift>
 800d018:	4544      	cmp	r4, r8
 800d01a:	d934      	bls.n	800d086 <__hexnan+0x10e>
 800d01c:	f1a8 0204 	sub.w	r2, r8, #4
 800d020:	4623      	mov	r3, r4
 800d022:	f853 1b04 	ldr.w	r1, [r3], #4
 800d026:	f842 1f04 	str.w	r1, [r2, #4]!
 800d02a:	429f      	cmp	r7, r3
 800d02c:	d2f9      	bcs.n	800d022 <__hexnan+0xaa>
 800d02e:	1b3b      	subs	r3, r7, r4
 800d030:	f023 0303 	bic.w	r3, r3, #3
 800d034:	3304      	adds	r3, #4
 800d036:	3401      	adds	r4, #1
 800d038:	3e03      	subs	r6, #3
 800d03a:	42b4      	cmp	r4, r6
 800d03c:	bf88      	it	hi
 800d03e:	2304      	movhi	r3, #4
 800d040:	4443      	add	r3, r8
 800d042:	2200      	movs	r2, #0
 800d044:	f843 2b04 	str.w	r2, [r3], #4
 800d048:	429f      	cmp	r7, r3
 800d04a:	d2fb      	bcs.n	800d044 <__hexnan+0xcc>
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	b91b      	cbnz	r3, 800d058 <__hexnan+0xe0>
 800d050:	4547      	cmp	r7, r8
 800d052:	d127      	bne.n	800d0a4 <__hexnan+0x12c>
 800d054:	2301      	movs	r3, #1
 800d056:	603b      	str	r3, [r7, #0]
 800d058:	2005      	movs	r0, #5
 800d05a:	e026      	b.n	800d0aa <__hexnan+0x132>
 800d05c:	3501      	adds	r5, #1
 800d05e:	2d08      	cmp	r5, #8
 800d060:	f10b 0b01 	add.w	fp, fp, #1
 800d064:	dd06      	ble.n	800d074 <__hexnan+0xfc>
 800d066:	4544      	cmp	r4, r8
 800d068:	d9c3      	bls.n	800cff2 <__hexnan+0x7a>
 800d06a:	2300      	movs	r3, #0
 800d06c:	f844 3c04 	str.w	r3, [r4, #-4]
 800d070:	2501      	movs	r5, #1
 800d072:	3c04      	subs	r4, #4
 800d074:	6822      	ldr	r2, [r4, #0]
 800d076:	f000 000f 	and.w	r0, r0, #15
 800d07a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d07e:	6022      	str	r2, [r4, #0]
 800d080:	e7b7      	b.n	800cff2 <__hexnan+0x7a>
 800d082:	2508      	movs	r5, #8
 800d084:	e7b5      	b.n	800cff2 <__hexnan+0x7a>
 800d086:	9b01      	ldr	r3, [sp, #4]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d0df      	beq.n	800d04c <__hexnan+0xd4>
 800d08c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d090:	f1c3 0320 	rsb	r3, r3, #32
 800d094:	fa22 f303 	lsr.w	r3, r2, r3
 800d098:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d09c:	401a      	ands	r2, r3
 800d09e:	f846 2c04 	str.w	r2, [r6, #-4]
 800d0a2:	e7d3      	b.n	800d04c <__hexnan+0xd4>
 800d0a4:	3f04      	subs	r7, #4
 800d0a6:	e7d1      	b.n	800d04c <__hexnan+0xd4>
 800d0a8:	2004      	movs	r0, #4
 800d0aa:	b007      	add	sp, #28
 800d0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d0b0 <_localeconv_r>:
 800d0b0:	4800      	ldr	r0, [pc, #0]	; (800d0b4 <_localeconv_r+0x4>)
 800d0b2:	4770      	bx	lr
 800d0b4:	20000294 	.word	0x20000294

0800d0b8 <__ascii_mbtowc>:
 800d0b8:	b082      	sub	sp, #8
 800d0ba:	b901      	cbnz	r1, 800d0be <__ascii_mbtowc+0x6>
 800d0bc:	a901      	add	r1, sp, #4
 800d0be:	b142      	cbz	r2, 800d0d2 <__ascii_mbtowc+0x1a>
 800d0c0:	b14b      	cbz	r3, 800d0d6 <__ascii_mbtowc+0x1e>
 800d0c2:	7813      	ldrb	r3, [r2, #0]
 800d0c4:	600b      	str	r3, [r1, #0]
 800d0c6:	7812      	ldrb	r2, [r2, #0]
 800d0c8:	1e10      	subs	r0, r2, #0
 800d0ca:	bf18      	it	ne
 800d0cc:	2001      	movne	r0, #1
 800d0ce:	b002      	add	sp, #8
 800d0d0:	4770      	bx	lr
 800d0d2:	4610      	mov	r0, r2
 800d0d4:	e7fb      	b.n	800d0ce <__ascii_mbtowc+0x16>
 800d0d6:	f06f 0001 	mvn.w	r0, #1
 800d0da:	e7f8      	b.n	800d0ce <__ascii_mbtowc+0x16>

0800d0dc <memcpy>:
 800d0dc:	440a      	add	r2, r1
 800d0de:	4291      	cmp	r1, r2
 800d0e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d0e4:	d100      	bne.n	800d0e8 <memcpy+0xc>
 800d0e6:	4770      	bx	lr
 800d0e8:	b510      	push	{r4, lr}
 800d0ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0f2:	4291      	cmp	r1, r2
 800d0f4:	d1f9      	bne.n	800d0ea <memcpy+0xe>
 800d0f6:	bd10      	pop	{r4, pc}

0800d0f8 <__malloc_lock>:
 800d0f8:	4801      	ldr	r0, [pc, #4]	; (800d100 <__malloc_lock+0x8>)
 800d0fa:	f001 ba2b 	b.w	800e554 <__retarget_lock_acquire_recursive>
 800d0fe:	bf00      	nop
 800d100:	20002080 	.word	0x20002080

0800d104 <__malloc_unlock>:
 800d104:	4801      	ldr	r0, [pc, #4]	; (800d10c <__malloc_unlock+0x8>)
 800d106:	f001 ba26 	b.w	800e556 <__retarget_lock_release_recursive>
 800d10a:	bf00      	nop
 800d10c:	20002080 	.word	0x20002080

0800d110 <_Balloc>:
 800d110:	b570      	push	{r4, r5, r6, lr}
 800d112:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d114:	4604      	mov	r4, r0
 800d116:	460d      	mov	r5, r1
 800d118:	b976      	cbnz	r6, 800d138 <_Balloc+0x28>
 800d11a:	2010      	movs	r0, #16
 800d11c:	f7fc fe9c 	bl	8009e58 <malloc>
 800d120:	4602      	mov	r2, r0
 800d122:	6260      	str	r0, [r4, #36]	; 0x24
 800d124:	b920      	cbnz	r0, 800d130 <_Balloc+0x20>
 800d126:	4b18      	ldr	r3, [pc, #96]	; (800d188 <_Balloc+0x78>)
 800d128:	4818      	ldr	r0, [pc, #96]	; (800d18c <_Balloc+0x7c>)
 800d12a:	2166      	movs	r1, #102	; 0x66
 800d12c:	f7fe fda6 	bl	800bc7c <__assert_func>
 800d130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d134:	6006      	str	r6, [r0, #0]
 800d136:	60c6      	str	r6, [r0, #12]
 800d138:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d13a:	68f3      	ldr	r3, [r6, #12]
 800d13c:	b183      	cbz	r3, 800d160 <_Balloc+0x50>
 800d13e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d146:	b9b8      	cbnz	r0, 800d178 <_Balloc+0x68>
 800d148:	2101      	movs	r1, #1
 800d14a:	fa01 f605 	lsl.w	r6, r1, r5
 800d14e:	1d72      	adds	r2, r6, #5
 800d150:	0092      	lsls	r2, r2, #2
 800d152:	4620      	mov	r0, r4
 800d154:	f7fc fe98 	bl	8009e88 <_calloc_r>
 800d158:	b160      	cbz	r0, 800d174 <_Balloc+0x64>
 800d15a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d15e:	e00e      	b.n	800d17e <_Balloc+0x6e>
 800d160:	2221      	movs	r2, #33	; 0x21
 800d162:	2104      	movs	r1, #4
 800d164:	4620      	mov	r0, r4
 800d166:	f7fc fe8f 	bl	8009e88 <_calloc_r>
 800d16a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d16c:	60f0      	str	r0, [r6, #12]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1e4      	bne.n	800d13e <_Balloc+0x2e>
 800d174:	2000      	movs	r0, #0
 800d176:	bd70      	pop	{r4, r5, r6, pc}
 800d178:	6802      	ldr	r2, [r0, #0]
 800d17a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d17e:	2300      	movs	r3, #0
 800d180:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d184:	e7f7      	b.n	800d176 <_Balloc+0x66>
 800d186:	bf00      	nop
 800d188:	0800eb40 	.word	0x0800eb40
 800d18c:	0800ede4 	.word	0x0800ede4

0800d190 <_Bfree>:
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d194:	4605      	mov	r5, r0
 800d196:	460c      	mov	r4, r1
 800d198:	b976      	cbnz	r6, 800d1b8 <_Bfree+0x28>
 800d19a:	2010      	movs	r0, #16
 800d19c:	f7fc fe5c 	bl	8009e58 <malloc>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	6268      	str	r0, [r5, #36]	; 0x24
 800d1a4:	b920      	cbnz	r0, 800d1b0 <_Bfree+0x20>
 800d1a6:	4b09      	ldr	r3, [pc, #36]	; (800d1cc <_Bfree+0x3c>)
 800d1a8:	4809      	ldr	r0, [pc, #36]	; (800d1d0 <_Bfree+0x40>)
 800d1aa:	218a      	movs	r1, #138	; 0x8a
 800d1ac:	f7fe fd66 	bl	800bc7c <__assert_func>
 800d1b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1b4:	6006      	str	r6, [r0, #0]
 800d1b6:	60c6      	str	r6, [r0, #12]
 800d1b8:	b13c      	cbz	r4, 800d1ca <_Bfree+0x3a>
 800d1ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d1bc:	6862      	ldr	r2, [r4, #4]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1c4:	6021      	str	r1, [r4, #0]
 800d1c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1ca:	bd70      	pop	{r4, r5, r6, pc}
 800d1cc:	0800eb40 	.word	0x0800eb40
 800d1d0:	0800ede4 	.word	0x0800ede4

0800d1d4 <__multadd>:
 800d1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d8:	690d      	ldr	r5, [r1, #16]
 800d1da:	4607      	mov	r7, r0
 800d1dc:	460c      	mov	r4, r1
 800d1de:	461e      	mov	r6, r3
 800d1e0:	f101 0c14 	add.w	ip, r1, #20
 800d1e4:	2000      	movs	r0, #0
 800d1e6:	f8dc 3000 	ldr.w	r3, [ip]
 800d1ea:	b299      	uxth	r1, r3
 800d1ec:	fb02 6101 	mla	r1, r2, r1, r6
 800d1f0:	0c1e      	lsrs	r6, r3, #16
 800d1f2:	0c0b      	lsrs	r3, r1, #16
 800d1f4:	fb02 3306 	mla	r3, r2, r6, r3
 800d1f8:	b289      	uxth	r1, r1
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d200:	4285      	cmp	r5, r0
 800d202:	f84c 1b04 	str.w	r1, [ip], #4
 800d206:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d20a:	dcec      	bgt.n	800d1e6 <__multadd+0x12>
 800d20c:	b30e      	cbz	r6, 800d252 <__multadd+0x7e>
 800d20e:	68a3      	ldr	r3, [r4, #8]
 800d210:	42ab      	cmp	r3, r5
 800d212:	dc19      	bgt.n	800d248 <__multadd+0x74>
 800d214:	6861      	ldr	r1, [r4, #4]
 800d216:	4638      	mov	r0, r7
 800d218:	3101      	adds	r1, #1
 800d21a:	f7ff ff79 	bl	800d110 <_Balloc>
 800d21e:	4680      	mov	r8, r0
 800d220:	b928      	cbnz	r0, 800d22e <__multadd+0x5a>
 800d222:	4602      	mov	r2, r0
 800d224:	4b0c      	ldr	r3, [pc, #48]	; (800d258 <__multadd+0x84>)
 800d226:	480d      	ldr	r0, [pc, #52]	; (800d25c <__multadd+0x88>)
 800d228:	21b5      	movs	r1, #181	; 0xb5
 800d22a:	f7fe fd27 	bl	800bc7c <__assert_func>
 800d22e:	6922      	ldr	r2, [r4, #16]
 800d230:	3202      	adds	r2, #2
 800d232:	f104 010c 	add.w	r1, r4, #12
 800d236:	0092      	lsls	r2, r2, #2
 800d238:	300c      	adds	r0, #12
 800d23a:	f7ff ff4f 	bl	800d0dc <memcpy>
 800d23e:	4621      	mov	r1, r4
 800d240:	4638      	mov	r0, r7
 800d242:	f7ff ffa5 	bl	800d190 <_Bfree>
 800d246:	4644      	mov	r4, r8
 800d248:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d24c:	3501      	adds	r5, #1
 800d24e:	615e      	str	r6, [r3, #20]
 800d250:	6125      	str	r5, [r4, #16]
 800d252:	4620      	mov	r0, r4
 800d254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d258:	0800ed59 	.word	0x0800ed59
 800d25c:	0800ede4 	.word	0x0800ede4

0800d260 <__s2b>:
 800d260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d264:	460c      	mov	r4, r1
 800d266:	4615      	mov	r5, r2
 800d268:	461f      	mov	r7, r3
 800d26a:	2209      	movs	r2, #9
 800d26c:	3308      	adds	r3, #8
 800d26e:	4606      	mov	r6, r0
 800d270:	fb93 f3f2 	sdiv	r3, r3, r2
 800d274:	2100      	movs	r1, #0
 800d276:	2201      	movs	r2, #1
 800d278:	429a      	cmp	r2, r3
 800d27a:	db09      	blt.n	800d290 <__s2b+0x30>
 800d27c:	4630      	mov	r0, r6
 800d27e:	f7ff ff47 	bl	800d110 <_Balloc>
 800d282:	b940      	cbnz	r0, 800d296 <__s2b+0x36>
 800d284:	4602      	mov	r2, r0
 800d286:	4b19      	ldr	r3, [pc, #100]	; (800d2ec <__s2b+0x8c>)
 800d288:	4819      	ldr	r0, [pc, #100]	; (800d2f0 <__s2b+0x90>)
 800d28a:	21ce      	movs	r1, #206	; 0xce
 800d28c:	f7fe fcf6 	bl	800bc7c <__assert_func>
 800d290:	0052      	lsls	r2, r2, #1
 800d292:	3101      	adds	r1, #1
 800d294:	e7f0      	b.n	800d278 <__s2b+0x18>
 800d296:	9b08      	ldr	r3, [sp, #32]
 800d298:	6143      	str	r3, [r0, #20]
 800d29a:	2d09      	cmp	r5, #9
 800d29c:	f04f 0301 	mov.w	r3, #1
 800d2a0:	6103      	str	r3, [r0, #16]
 800d2a2:	dd16      	ble.n	800d2d2 <__s2b+0x72>
 800d2a4:	f104 0909 	add.w	r9, r4, #9
 800d2a8:	46c8      	mov	r8, r9
 800d2aa:	442c      	add	r4, r5
 800d2ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d2b0:	4601      	mov	r1, r0
 800d2b2:	3b30      	subs	r3, #48	; 0x30
 800d2b4:	220a      	movs	r2, #10
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	f7ff ff8c 	bl	800d1d4 <__multadd>
 800d2bc:	45a0      	cmp	r8, r4
 800d2be:	d1f5      	bne.n	800d2ac <__s2b+0x4c>
 800d2c0:	f1a5 0408 	sub.w	r4, r5, #8
 800d2c4:	444c      	add	r4, r9
 800d2c6:	1b2d      	subs	r5, r5, r4
 800d2c8:	1963      	adds	r3, r4, r5
 800d2ca:	42bb      	cmp	r3, r7
 800d2cc:	db04      	blt.n	800d2d8 <__s2b+0x78>
 800d2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2d2:	340a      	adds	r4, #10
 800d2d4:	2509      	movs	r5, #9
 800d2d6:	e7f6      	b.n	800d2c6 <__s2b+0x66>
 800d2d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d2dc:	4601      	mov	r1, r0
 800d2de:	3b30      	subs	r3, #48	; 0x30
 800d2e0:	220a      	movs	r2, #10
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	f7ff ff76 	bl	800d1d4 <__multadd>
 800d2e8:	e7ee      	b.n	800d2c8 <__s2b+0x68>
 800d2ea:	bf00      	nop
 800d2ec:	0800ed59 	.word	0x0800ed59
 800d2f0:	0800ede4 	.word	0x0800ede4

0800d2f4 <__hi0bits>:
 800d2f4:	0c03      	lsrs	r3, r0, #16
 800d2f6:	041b      	lsls	r3, r3, #16
 800d2f8:	b9d3      	cbnz	r3, 800d330 <__hi0bits+0x3c>
 800d2fa:	0400      	lsls	r0, r0, #16
 800d2fc:	2310      	movs	r3, #16
 800d2fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d302:	bf04      	itt	eq
 800d304:	0200      	lsleq	r0, r0, #8
 800d306:	3308      	addeq	r3, #8
 800d308:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d30c:	bf04      	itt	eq
 800d30e:	0100      	lsleq	r0, r0, #4
 800d310:	3304      	addeq	r3, #4
 800d312:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d316:	bf04      	itt	eq
 800d318:	0080      	lsleq	r0, r0, #2
 800d31a:	3302      	addeq	r3, #2
 800d31c:	2800      	cmp	r0, #0
 800d31e:	db05      	blt.n	800d32c <__hi0bits+0x38>
 800d320:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d324:	f103 0301 	add.w	r3, r3, #1
 800d328:	bf08      	it	eq
 800d32a:	2320      	moveq	r3, #32
 800d32c:	4618      	mov	r0, r3
 800d32e:	4770      	bx	lr
 800d330:	2300      	movs	r3, #0
 800d332:	e7e4      	b.n	800d2fe <__hi0bits+0xa>

0800d334 <__lo0bits>:
 800d334:	6803      	ldr	r3, [r0, #0]
 800d336:	f013 0207 	ands.w	r2, r3, #7
 800d33a:	4601      	mov	r1, r0
 800d33c:	d00b      	beq.n	800d356 <__lo0bits+0x22>
 800d33e:	07da      	lsls	r2, r3, #31
 800d340:	d423      	bmi.n	800d38a <__lo0bits+0x56>
 800d342:	0798      	lsls	r0, r3, #30
 800d344:	bf49      	itett	mi
 800d346:	085b      	lsrmi	r3, r3, #1
 800d348:	089b      	lsrpl	r3, r3, #2
 800d34a:	2001      	movmi	r0, #1
 800d34c:	600b      	strmi	r3, [r1, #0]
 800d34e:	bf5c      	itt	pl
 800d350:	600b      	strpl	r3, [r1, #0]
 800d352:	2002      	movpl	r0, #2
 800d354:	4770      	bx	lr
 800d356:	b298      	uxth	r0, r3
 800d358:	b9a8      	cbnz	r0, 800d386 <__lo0bits+0x52>
 800d35a:	0c1b      	lsrs	r3, r3, #16
 800d35c:	2010      	movs	r0, #16
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	b90a      	cbnz	r2, 800d366 <__lo0bits+0x32>
 800d362:	3008      	adds	r0, #8
 800d364:	0a1b      	lsrs	r3, r3, #8
 800d366:	071a      	lsls	r2, r3, #28
 800d368:	bf04      	itt	eq
 800d36a:	091b      	lsreq	r3, r3, #4
 800d36c:	3004      	addeq	r0, #4
 800d36e:	079a      	lsls	r2, r3, #30
 800d370:	bf04      	itt	eq
 800d372:	089b      	lsreq	r3, r3, #2
 800d374:	3002      	addeq	r0, #2
 800d376:	07da      	lsls	r2, r3, #31
 800d378:	d403      	bmi.n	800d382 <__lo0bits+0x4e>
 800d37a:	085b      	lsrs	r3, r3, #1
 800d37c:	f100 0001 	add.w	r0, r0, #1
 800d380:	d005      	beq.n	800d38e <__lo0bits+0x5a>
 800d382:	600b      	str	r3, [r1, #0]
 800d384:	4770      	bx	lr
 800d386:	4610      	mov	r0, r2
 800d388:	e7e9      	b.n	800d35e <__lo0bits+0x2a>
 800d38a:	2000      	movs	r0, #0
 800d38c:	4770      	bx	lr
 800d38e:	2020      	movs	r0, #32
 800d390:	4770      	bx	lr
	...

0800d394 <__i2b>:
 800d394:	b510      	push	{r4, lr}
 800d396:	460c      	mov	r4, r1
 800d398:	2101      	movs	r1, #1
 800d39a:	f7ff feb9 	bl	800d110 <_Balloc>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	b928      	cbnz	r0, 800d3ae <__i2b+0x1a>
 800d3a2:	4b05      	ldr	r3, [pc, #20]	; (800d3b8 <__i2b+0x24>)
 800d3a4:	4805      	ldr	r0, [pc, #20]	; (800d3bc <__i2b+0x28>)
 800d3a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d3aa:	f7fe fc67 	bl	800bc7c <__assert_func>
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	6144      	str	r4, [r0, #20]
 800d3b2:	6103      	str	r3, [r0, #16]
 800d3b4:	bd10      	pop	{r4, pc}
 800d3b6:	bf00      	nop
 800d3b8:	0800ed59 	.word	0x0800ed59
 800d3bc:	0800ede4 	.word	0x0800ede4

0800d3c0 <__multiply>:
 800d3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c4:	4691      	mov	r9, r2
 800d3c6:	690a      	ldr	r2, [r1, #16]
 800d3c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	bfb8      	it	lt
 800d3d0:	460b      	movlt	r3, r1
 800d3d2:	460c      	mov	r4, r1
 800d3d4:	bfbc      	itt	lt
 800d3d6:	464c      	movlt	r4, r9
 800d3d8:	4699      	movlt	r9, r3
 800d3da:	6927      	ldr	r7, [r4, #16]
 800d3dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d3e0:	68a3      	ldr	r3, [r4, #8]
 800d3e2:	6861      	ldr	r1, [r4, #4]
 800d3e4:	eb07 060a 	add.w	r6, r7, sl
 800d3e8:	42b3      	cmp	r3, r6
 800d3ea:	b085      	sub	sp, #20
 800d3ec:	bfb8      	it	lt
 800d3ee:	3101      	addlt	r1, #1
 800d3f0:	f7ff fe8e 	bl	800d110 <_Balloc>
 800d3f4:	b930      	cbnz	r0, 800d404 <__multiply+0x44>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	4b44      	ldr	r3, [pc, #272]	; (800d50c <__multiply+0x14c>)
 800d3fa:	4845      	ldr	r0, [pc, #276]	; (800d510 <__multiply+0x150>)
 800d3fc:	f240 115d 	movw	r1, #349	; 0x15d
 800d400:	f7fe fc3c 	bl	800bc7c <__assert_func>
 800d404:	f100 0514 	add.w	r5, r0, #20
 800d408:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d40c:	462b      	mov	r3, r5
 800d40e:	2200      	movs	r2, #0
 800d410:	4543      	cmp	r3, r8
 800d412:	d321      	bcc.n	800d458 <__multiply+0x98>
 800d414:	f104 0314 	add.w	r3, r4, #20
 800d418:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d41c:	f109 0314 	add.w	r3, r9, #20
 800d420:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d424:	9202      	str	r2, [sp, #8]
 800d426:	1b3a      	subs	r2, r7, r4
 800d428:	3a15      	subs	r2, #21
 800d42a:	f022 0203 	bic.w	r2, r2, #3
 800d42e:	3204      	adds	r2, #4
 800d430:	f104 0115 	add.w	r1, r4, #21
 800d434:	428f      	cmp	r7, r1
 800d436:	bf38      	it	cc
 800d438:	2204      	movcc	r2, #4
 800d43a:	9201      	str	r2, [sp, #4]
 800d43c:	9a02      	ldr	r2, [sp, #8]
 800d43e:	9303      	str	r3, [sp, #12]
 800d440:	429a      	cmp	r2, r3
 800d442:	d80c      	bhi.n	800d45e <__multiply+0x9e>
 800d444:	2e00      	cmp	r6, #0
 800d446:	dd03      	ble.n	800d450 <__multiply+0x90>
 800d448:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d05a      	beq.n	800d506 <__multiply+0x146>
 800d450:	6106      	str	r6, [r0, #16]
 800d452:	b005      	add	sp, #20
 800d454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d458:	f843 2b04 	str.w	r2, [r3], #4
 800d45c:	e7d8      	b.n	800d410 <__multiply+0x50>
 800d45e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d462:	f1ba 0f00 	cmp.w	sl, #0
 800d466:	d024      	beq.n	800d4b2 <__multiply+0xf2>
 800d468:	f104 0e14 	add.w	lr, r4, #20
 800d46c:	46a9      	mov	r9, r5
 800d46e:	f04f 0c00 	mov.w	ip, #0
 800d472:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d476:	f8d9 1000 	ldr.w	r1, [r9]
 800d47a:	fa1f fb82 	uxth.w	fp, r2
 800d47e:	b289      	uxth	r1, r1
 800d480:	fb0a 110b 	mla	r1, sl, fp, r1
 800d484:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d488:	f8d9 2000 	ldr.w	r2, [r9]
 800d48c:	4461      	add	r1, ip
 800d48e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d492:	fb0a c20b 	mla	r2, sl, fp, ip
 800d496:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d49a:	b289      	uxth	r1, r1
 800d49c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d4a0:	4577      	cmp	r7, lr
 800d4a2:	f849 1b04 	str.w	r1, [r9], #4
 800d4a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d4aa:	d8e2      	bhi.n	800d472 <__multiply+0xb2>
 800d4ac:	9a01      	ldr	r2, [sp, #4]
 800d4ae:	f845 c002 	str.w	ip, [r5, r2]
 800d4b2:	9a03      	ldr	r2, [sp, #12]
 800d4b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d4b8:	3304      	adds	r3, #4
 800d4ba:	f1b9 0f00 	cmp.w	r9, #0
 800d4be:	d020      	beq.n	800d502 <__multiply+0x142>
 800d4c0:	6829      	ldr	r1, [r5, #0]
 800d4c2:	f104 0c14 	add.w	ip, r4, #20
 800d4c6:	46ae      	mov	lr, r5
 800d4c8:	f04f 0a00 	mov.w	sl, #0
 800d4cc:	f8bc b000 	ldrh.w	fp, [ip]
 800d4d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d4d4:	fb09 220b 	mla	r2, r9, fp, r2
 800d4d8:	4492      	add	sl, r2
 800d4da:	b289      	uxth	r1, r1
 800d4dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d4e0:	f84e 1b04 	str.w	r1, [lr], #4
 800d4e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d4e8:	f8be 1000 	ldrh.w	r1, [lr]
 800d4ec:	0c12      	lsrs	r2, r2, #16
 800d4ee:	fb09 1102 	mla	r1, r9, r2, r1
 800d4f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d4f6:	4567      	cmp	r7, ip
 800d4f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d4fc:	d8e6      	bhi.n	800d4cc <__multiply+0x10c>
 800d4fe:	9a01      	ldr	r2, [sp, #4]
 800d500:	50a9      	str	r1, [r5, r2]
 800d502:	3504      	adds	r5, #4
 800d504:	e79a      	b.n	800d43c <__multiply+0x7c>
 800d506:	3e01      	subs	r6, #1
 800d508:	e79c      	b.n	800d444 <__multiply+0x84>
 800d50a:	bf00      	nop
 800d50c:	0800ed59 	.word	0x0800ed59
 800d510:	0800ede4 	.word	0x0800ede4

0800d514 <__pow5mult>:
 800d514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d518:	4615      	mov	r5, r2
 800d51a:	f012 0203 	ands.w	r2, r2, #3
 800d51e:	4606      	mov	r6, r0
 800d520:	460f      	mov	r7, r1
 800d522:	d007      	beq.n	800d534 <__pow5mult+0x20>
 800d524:	4c25      	ldr	r4, [pc, #148]	; (800d5bc <__pow5mult+0xa8>)
 800d526:	3a01      	subs	r2, #1
 800d528:	2300      	movs	r3, #0
 800d52a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d52e:	f7ff fe51 	bl	800d1d4 <__multadd>
 800d532:	4607      	mov	r7, r0
 800d534:	10ad      	asrs	r5, r5, #2
 800d536:	d03d      	beq.n	800d5b4 <__pow5mult+0xa0>
 800d538:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d53a:	b97c      	cbnz	r4, 800d55c <__pow5mult+0x48>
 800d53c:	2010      	movs	r0, #16
 800d53e:	f7fc fc8b 	bl	8009e58 <malloc>
 800d542:	4602      	mov	r2, r0
 800d544:	6270      	str	r0, [r6, #36]	; 0x24
 800d546:	b928      	cbnz	r0, 800d554 <__pow5mult+0x40>
 800d548:	4b1d      	ldr	r3, [pc, #116]	; (800d5c0 <__pow5mult+0xac>)
 800d54a:	481e      	ldr	r0, [pc, #120]	; (800d5c4 <__pow5mult+0xb0>)
 800d54c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d550:	f7fe fb94 	bl	800bc7c <__assert_func>
 800d554:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d558:	6004      	str	r4, [r0, #0]
 800d55a:	60c4      	str	r4, [r0, #12]
 800d55c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d560:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d564:	b94c      	cbnz	r4, 800d57a <__pow5mult+0x66>
 800d566:	f240 2171 	movw	r1, #625	; 0x271
 800d56a:	4630      	mov	r0, r6
 800d56c:	f7ff ff12 	bl	800d394 <__i2b>
 800d570:	2300      	movs	r3, #0
 800d572:	f8c8 0008 	str.w	r0, [r8, #8]
 800d576:	4604      	mov	r4, r0
 800d578:	6003      	str	r3, [r0, #0]
 800d57a:	f04f 0900 	mov.w	r9, #0
 800d57e:	07eb      	lsls	r3, r5, #31
 800d580:	d50a      	bpl.n	800d598 <__pow5mult+0x84>
 800d582:	4639      	mov	r1, r7
 800d584:	4622      	mov	r2, r4
 800d586:	4630      	mov	r0, r6
 800d588:	f7ff ff1a 	bl	800d3c0 <__multiply>
 800d58c:	4639      	mov	r1, r7
 800d58e:	4680      	mov	r8, r0
 800d590:	4630      	mov	r0, r6
 800d592:	f7ff fdfd 	bl	800d190 <_Bfree>
 800d596:	4647      	mov	r7, r8
 800d598:	106d      	asrs	r5, r5, #1
 800d59a:	d00b      	beq.n	800d5b4 <__pow5mult+0xa0>
 800d59c:	6820      	ldr	r0, [r4, #0]
 800d59e:	b938      	cbnz	r0, 800d5b0 <__pow5mult+0x9c>
 800d5a0:	4622      	mov	r2, r4
 800d5a2:	4621      	mov	r1, r4
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	f7ff ff0b 	bl	800d3c0 <__multiply>
 800d5aa:	6020      	str	r0, [r4, #0]
 800d5ac:	f8c0 9000 	str.w	r9, [r0]
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	e7e4      	b.n	800d57e <__pow5mult+0x6a>
 800d5b4:	4638      	mov	r0, r7
 800d5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ba:	bf00      	nop
 800d5bc:	0800ef30 	.word	0x0800ef30
 800d5c0:	0800eb40 	.word	0x0800eb40
 800d5c4:	0800ede4 	.word	0x0800ede4

0800d5c8 <__lshift>:
 800d5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5cc:	460c      	mov	r4, r1
 800d5ce:	6849      	ldr	r1, [r1, #4]
 800d5d0:	6923      	ldr	r3, [r4, #16]
 800d5d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5d6:	68a3      	ldr	r3, [r4, #8]
 800d5d8:	4607      	mov	r7, r0
 800d5da:	4691      	mov	r9, r2
 800d5dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5e0:	f108 0601 	add.w	r6, r8, #1
 800d5e4:	42b3      	cmp	r3, r6
 800d5e6:	db0b      	blt.n	800d600 <__lshift+0x38>
 800d5e8:	4638      	mov	r0, r7
 800d5ea:	f7ff fd91 	bl	800d110 <_Balloc>
 800d5ee:	4605      	mov	r5, r0
 800d5f0:	b948      	cbnz	r0, 800d606 <__lshift+0x3e>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	4b2a      	ldr	r3, [pc, #168]	; (800d6a0 <__lshift+0xd8>)
 800d5f6:	482b      	ldr	r0, [pc, #172]	; (800d6a4 <__lshift+0xdc>)
 800d5f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d5fc:	f7fe fb3e 	bl	800bc7c <__assert_func>
 800d600:	3101      	adds	r1, #1
 800d602:	005b      	lsls	r3, r3, #1
 800d604:	e7ee      	b.n	800d5e4 <__lshift+0x1c>
 800d606:	2300      	movs	r3, #0
 800d608:	f100 0114 	add.w	r1, r0, #20
 800d60c:	f100 0210 	add.w	r2, r0, #16
 800d610:	4618      	mov	r0, r3
 800d612:	4553      	cmp	r3, sl
 800d614:	db37      	blt.n	800d686 <__lshift+0xbe>
 800d616:	6920      	ldr	r0, [r4, #16]
 800d618:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d61c:	f104 0314 	add.w	r3, r4, #20
 800d620:	f019 091f 	ands.w	r9, r9, #31
 800d624:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d628:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d62c:	d02f      	beq.n	800d68e <__lshift+0xc6>
 800d62e:	f1c9 0e20 	rsb	lr, r9, #32
 800d632:	468a      	mov	sl, r1
 800d634:	f04f 0c00 	mov.w	ip, #0
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	fa02 f209 	lsl.w	r2, r2, r9
 800d63e:	ea42 020c 	orr.w	r2, r2, ip
 800d642:	f84a 2b04 	str.w	r2, [sl], #4
 800d646:	f853 2b04 	ldr.w	r2, [r3], #4
 800d64a:	4298      	cmp	r0, r3
 800d64c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d650:	d8f2      	bhi.n	800d638 <__lshift+0x70>
 800d652:	1b03      	subs	r3, r0, r4
 800d654:	3b15      	subs	r3, #21
 800d656:	f023 0303 	bic.w	r3, r3, #3
 800d65a:	3304      	adds	r3, #4
 800d65c:	f104 0215 	add.w	r2, r4, #21
 800d660:	4290      	cmp	r0, r2
 800d662:	bf38      	it	cc
 800d664:	2304      	movcc	r3, #4
 800d666:	f841 c003 	str.w	ip, [r1, r3]
 800d66a:	f1bc 0f00 	cmp.w	ip, #0
 800d66e:	d001      	beq.n	800d674 <__lshift+0xac>
 800d670:	f108 0602 	add.w	r6, r8, #2
 800d674:	3e01      	subs	r6, #1
 800d676:	4638      	mov	r0, r7
 800d678:	612e      	str	r6, [r5, #16]
 800d67a:	4621      	mov	r1, r4
 800d67c:	f7ff fd88 	bl	800d190 <_Bfree>
 800d680:	4628      	mov	r0, r5
 800d682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d686:	f842 0f04 	str.w	r0, [r2, #4]!
 800d68a:	3301      	adds	r3, #1
 800d68c:	e7c1      	b.n	800d612 <__lshift+0x4a>
 800d68e:	3904      	subs	r1, #4
 800d690:	f853 2b04 	ldr.w	r2, [r3], #4
 800d694:	f841 2f04 	str.w	r2, [r1, #4]!
 800d698:	4298      	cmp	r0, r3
 800d69a:	d8f9      	bhi.n	800d690 <__lshift+0xc8>
 800d69c:	e7ea      	b.n	800d674 <__lshift+0xac>
 800d69e:	bf00      	nop
 800d6a0:	0800ed59 	.word	0x0800ed59
 800d6a4:	0800ede4 	.word	0x0800ede4

0800d6a8 <__mcmp>:
 800d6a8:	b530      	push	{r4, r5, lr}
 800d6aa:	6902      	ldr	r2, [r0, #16]
 800d6ac:	690c      	ldr	r4, [r1, #16]
 800d6ae:	1b12      	subs	r2, r2, r4
 800d6b0:	d10e      	bne.n	800d6d0 <__mcmp+0x28>
 800d6b2:	f100 0314 	add.w	r3, r0, #20
 800d6b6:	3114      	adds	r1, #20
 800d6b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d6bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d6c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d6c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d6c8:	42a5      	cmp	r5, r4
 800d6ca:	d003      	beq.n	800d6d4 <__mcmp+0x2c>
 800d6cc:	d305      	bcc.n	800d6da <__mcmp+0x32>
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	4610      	mov	r0, r2
 800d6d2:	bd30      	pop	{r4, r5, pc}
 800d6d4:	4283      	cmp	r3, r0
 800d6d6:	d3f3      	bcc.n	800d6c0 <__mcmp+0x18>
 800d6d8:	e7fa      	b.n	800d6d0 <__mcmp+0x28>
 800d6da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6de:	e7f7      	b.n	800d6d0 <__mcmp+0x28>

0800d6e0 <__mdiff>:
 800d6e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e4:	460c      	mov	r4, r1
 800d6e6:	4606      	mov	r6, r0
 800d6e8:	4611      	mov	r1, r2
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	4690      	mov	r8, r2
 800d6ee:	f7ff ffdb 	bl	800d6a8 <__mcmp>
 800d6f2:	1e05      	subs	r5, r0, #0
 800d6f4:	d110      	bne.n	800d718 <__mdiff+0x38>
 800d6f6:	4629      	mov	r1, r5
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	f7ff fd09 	bl	800d110 <_Balloc>
 800d6fe:	b930      	cbnz	r0, 800d70e <__mdiff+0x2e>
 800d700:	4b3a      	ldr	r3, [pc, #232]	; (800d7ec <__mdiff+0x10c>)
 800d702:	4602      	mov	r2, r0
 800d704:	f240 2132 	movw	r1, #562	; 0x232
 800d708:	4839      	ldr	r0, [pc, #228]	; (800d7f0 <__mdiff+0x110>)
 800d70a:	f7fe fab7 	bl	800bc7c <__assert_func>
 800d70e:	2301      	movs	r3, #1
 800d710:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d718:	bfa4      	itt	ge
 800d71a:	4643      	movge	r3, r8
 800d71c:	46a0      	movge	r8, r4
 800d71e:	4630      	mov	r0, r6
 800d720:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d724:	bfa6      	itte	ge
 800d726:	461c      	movge	r4, r3
 800d728:	2500      	movge	r5, #0
 800d72a:	2501      	movlt	r5, #1
 800d72c:	f7ff fcf0 	bl	800d110 <_Balloc>
 800d730:	b920      	cbnz	r0, 800d73c <__mdiff+0x5c>
 800d732:	4b2e      	ldr	r3, [pc, #184]	; (800d7ec <__mdiff+0x10c>)
 800d734:	4602      	mov	r2, r0
 800d736:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d73a:	e7e5      	b.n	800d708 <__mdiff+0x28>
 800d73c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d740:	6926      	ldr	r6, [r4, #16]
 800d742:	60c5      	str	r5, [r0, #12]
 800d744:	f104 0914 	add.w	r9, r4, #20
 800d748:	f108 0514 	add.w	r5, r8, #20
 800d74c:	f100 0e14 	add.w	lr, r0, #20
 800d750:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d754:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d758:	f108 0210 	add.w	r2, r8, #16
 800d75c:	46f2      	mov	sl, lr
 800d75e:	2100      	movs	r1, #0
 800d760:	f859 3b04 	ldr.w	r3, [r9], #4
 800d764:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d768:	fa1f f883 	uxth.w	r8, r3
 800d76c:	fa11 f18b 	uxtah	r1, r1, fp
 800d770:	0c1b      	lsrs	r3, r3, #16
 800d772:	eba1 0808 	sub.w	r8, r1, r8
 800d776:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d77a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d77e:	fa1f f888 	uxth.w	r8, r8
 800d782:	1419      	asrs	r1, r3, #16
 800d784:	454e      	cmp	r6, r9
 800d786:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d78a:	f84a 3b04 	str.w	r3, [sl], #4
 800d78e:	d8e7      	bhi.n	800d760 <__mdiff+0x80>
 800d790:	1b33      	subs	r3, r6, r4
 800d792:	3b15      	subs	r3, #21
 800d794:	f023 0303 	bic.w	r3, r3, #3
 800d798:	3304      	adds	r3, #4
 800d79a:	3415      	adds	r4, #21
 800d79c:	42a6      	cmp	r6, r4
 800d79e:	bf38      	it	cc
 800d7a0:	2304      	movcc	r3, #4
 800d7a2:	441d      	add	r5, r3
 800d7a4:	4473      	add	r3, lr
 800d7a6:	469e      	mov	lr, r3
 800d7a8:	462e      	mov	r6, r5
 800d7aa:	4566      	cmp	r6, ip
 800d7ac:	d30e      	bcc.n	800d7cc <__mdiff+0xec>
 800d7ae:	f10c 0203 	add.w	r2, ip, #3
 800d7b2:	1b52      	subs	r2, r2, r5
 800d7b4:	f022 0203 	bic.w	r2, r2, #3
 800d7b8:	3d03      	subs	r5, #3
 800d7ba:	45ac      	cmp	ip, r5
 800d7bc:	bf38      	it	cc
 800d7be:	2200      	movcc	r2, #0
 800d7c0:	441a      	add	r2, r3
 800d7c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d7c6:	b17b      	cbz	r3, 800d7e8 <__mdiff+0x108>
 800d7c8:	6107      	str	r7, [r0, #16]
 800d7ca:	e7a3      	b.n	800d714 <__mdiff+0x34>
 800d7cc:	f856 8b04 	ldr.w	r8, [r6], #4
 800d7d0:	fa11 f288 	uxtah	r2, r1, r8
 800d7d4:	1414      	asrs	r4, r2, #16
 800d7d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d7da:	b292      	uxth	r2, r2
 800d7dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d7e0:	f84e 2b04 	str.w	r2, [lr], #4
 800d7e4:	1421      	asrs	r1, r4, #16
 800d7e6:	e7e0      	b.n	800d7aa <__mdiff+0xca>
 800d7e8:	3f01      	subs	r7, #1
 800d7ea:	e7ea      	b.n	800d7c2 <__mdiff+0xe2>
 800d7ec:	0800ed59 	.word	0x0800ed59
 800d7f0:	0800ede4 	.word	0x0800ede4

0800d7f4 <__ulp>:
 800d7f4:	b082      	sub	sp, #8
 800d7f6:	ed8d 0b00 	vstr	d0, [sp]
 800d7fa:	9b01      	ldr	r3, [sp, #4]
 800d7fc:	4912      	ldr	r1, [pc, #72]	; (800d848 <__ulp+0x54>)
 800d7fe:	4019      	ands	r1, r3
 800d800:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d804:	2900      	cmp	r1, #0
 800d806:	dd05      	ble.n	800d814 <__ulp+0x20>
 800d808:	2200      	movs	r2, #0
 800d80a:	460b      	mov	r3, r1
 800d80c:	ec43 2b10 	vmov	d0, r2, r3
 800d810:	b002      	add	sp, #8
 800d812:	4770      	bx	lr
 800d814:	4249      	negs	r1, r1
 800d816:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d81a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d81e:	f04f 0200 	mov.w	r2, #0
 800d822:	f04f 0300 	mov.w	r3, #0
 800d826:	da04      	bge.n	800d832 <__ulp+0x3e>
 800d828:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d82c:	fa41 f300 	asr.w	r3, r1, r0
 800d830:	e7ec      	b.n	800d80c <__ulp+0x18>
 800d832:	f1a0 0114 	sub.w	r1, r0, #20
 800d836:	291e      	cmp	r1, #30
 800d838:	bfda      	itte	le
 800d83a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d83e:	fa20 f101 	lsrle.w	r1, r0, r1
 800d842:	2101      	movgt	r1, #1
 800d844:	460a      	mov	r2, r1
 800d846:	e7e1      	b.n	800d80c <__ulp+0x18>
 800d848:	7ff00000 	.word	0x7ff00000

0800d84c <__b2d>:
 800d84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84e:	6905      	ldr	r5, [r0, #16]
 800d850:	f100 0714 	add.w	r7, r0, #20
 800d854:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d858:	1f2e      	subs	r6, r5, #4
 800d85a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d85e:	4620      	mov	r0, r4
 800d860:	f7ff fd48 	bl	800d2f4 <__hi0bits>
 800d864:	f1c0 0320 	rsb	r3, r0, #32
 800d868:	280a      	cmp	r0, #10
 800d86a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d8e8 <__b2d+0x9c>
 800d86e:	600b      	str	r3, [r1, #0]
 800d870:	dc14      	bgt.n	800d89c <__b2d+0x50>
 800d872:	f1c0 0e0b 	rsb	lr, r0, #11
 800d876:	fa24 f10e 	lsr.w	r1, r4, lr
 800d87a:	42b7      	cmp	r7, r6
 800d87c:	ea41 030c 	orr.w	r3, r1, ip
 800d880:	bf34      	ite	cc
 800d882:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d886:	2100      	movcs	r1, #0
 800d888:	3015      	adds	r0, #21
 800d88a:	fa04 f000 	lsl.w	r0, r4, r0
 800d88e:	fa21 f10e 	lsr.w	r1, r1, lr
 800d892:	ea40 0201 	orr.w	r2, r0, r1
 800d896:	ec43 2b10 	vmov	d0, r2, r3
 800d89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d89c:	42b7      	cmp	r7, r6
 800d89e:	bf3a      	itte	cc
 800d8a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d8a4:	f1a5 0608 	subcc.w	r6, r5, #8
 800d8a8:	2100      	movcs	r1, #0
 800d8aa:	380b      	subs	r0, #11
 800d8ac:	d017      	beq.n	800d8de <__b2d+0x92>
 800d8ae:	f1c0 0c20 	rsb	ip, r0, #32
 800d8b2:	fa04 f500 	lsl.w	r5, r4, r0
 800d8b6:	42be      	cmp	r6, r7
 800d8b8:	fa21 f40c 	lsr.w	r4, r1, ip
 800d8bc:	ea45 0504 	orr.w	r5, r5, r4
 800d8c0:	bf8c      	ite	hi
 800d8c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d8c6:	2400      	movls	r4, #0
 800d8c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d8cc:	fa01 f000 	lsl.w	r0, r1, r0
 800d8d0:	fa24 f40c 	lsr.w	r4, r4, ip
 800d8d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d8d8:	ea40 0204 	orr.w	r2, r0, r4
 800d8dc:	e7db      	b.n	800d896 <__b2d+0x4a>
 800d8de:	ea44 030c 	orr.w	r3, r4, ip
 800d8e2:	460a      	mov	r2, r1
 800d8e4:	e7d7      	b.n	800d896 <__b2d+0x4a>
 800d8e6:	bf00      	nop
 800d8e8:	3ff00000 	.word	0x3ff00000

0800d8ec <__d2b>:
 800d8ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8f0:	4689      	mov	r9, r1
 800d8f2:	2101      	movs	r1, #1
 800d8f4:	ec57 6b10 	vmov	r6, r7, d0
 800d8f8:	4690      	mov	r8, r2
 800d8fa:	f7ff fc09 	bl	800d110 <_Balloc>
 800d8fe:	4604      	mov	r4, r0
 800d900:	b930      	cbnz	r0, 800d910 <__d2b+0x24>
 800d902:	4602      	mov	r2, r0
 800d904:	4b25      	ldr	r3, [pc, #148]	; (800d99c <__d2b+0xb0>)
 800d906:	4826      	ldr	r0, [pc, #152]	; (800d9a0 <__d2b+0xb4>)
 800d908:	f240 310a 	movw	r1, #778	; 0x30a
 800d90c:	f7fe f9b6 	bl	800bc7c <__assert_func>
 800d910:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d914:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d918:	bb35      	cbnz	r5, 800d968 <__d2b+0x7c>
 800d91a:	2e00      	cmp	r6, #0
 800d91c:	9301      	str	r3, [sp, #4]
 800d91e:	d028      	beq.n	800d972 <__d2b+0x86>
 800d920:	4668      	mov	r0, sp
 800d922:	9600      	str	r6, [sp, #0]
 800d924:	f7ff fd06 	bl	800d334 <__lo0bits>
 800d928:	9900      	ldr	r1, [sp, #0]
 800d92a:	b300      	cbz	r0, 800d96e <__d2b+0x82>
 800d92c:	9a01      	ldr	r2, [sp, #4]
 800d92e:	f1c0 0320 	rsb	r3, r0, #32
 800d932:	fa02 f303 	lsl.w	r3, r2, r3
 800d936:	430b      	orrs	r3, r1
 800d938:	40c2      	lsrs	r2, r0
 800d93a:	6163      	str	r3, [r4, #20]
 800d93c:	9201      	str	r2, [sp, #4]
 800d93e:	9b01      	ldr	r3, [sp, #4]
 800d940:	61a3      	str	r3, [r4, #24]
 800d942:	2b00      	cmp	r3, #0
 800d944:	bf14      	ite	ne
 800d946:	2202      	movne	r2, #2
 800d948:	2201      	moveq	r2, #1
 800d94a:	6122      	str	r2, [r4, #16]
 800d94c:	b1d5      	cbz	r5, 800d984 <__d2b+0x98>
 800d94e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d952:	4405      	add	r5, r0
 800d954:	f8c9 5000 	str.w	r5, [r9]
 800d958:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d95c:	f8c8 0000 	str.w	r0, [r8]
 800d960:	4620      	mov	r0, r4
 800d962:	b003      	add	sp, #12
 800d964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d96c:	e7d5      	b.n	800d91a <__d2b+0x2e>
 800d96e:	6161      	str	r1, [r4, #20]
 800d970:	e7e5      	b.n	800d93e <__d2b+0x52>
 800d972:	a801      	add	r0, sp, #4
 800d974:	f7ff fcde 	bl	800d334 <__lo0bits>
 800d978:	9b01      	ldr	r3, [sp, #4]
 800d97a:	6163      	str	r3, [r4, #20]
 800d97c:	2201      	movs	r2, #1
 800d97e:	6122      	str	r2, [r4, #16]
 800d980:	3020      	adds	r0, #32
 800d982:	e7e3      	b.n	800d94c <__d2b+0x60>
 800d984:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d988:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d98c:	f8c9 0000 	str.w	r0, [r9]
 800d990:	6918      	ldr	r0, [r3, #16]
 800d992:	f7ff fcaf 	bl	800d2f4 <__hi0bits>
 800d996:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d99a:	e7df      	b.n	800d95c <__d2b+0x70>
 800d99c:	0800ed59 	.word	0x0800ed59
 800d9a0:	0800ede4 	.word	0x0800ede4

0800d9a4 <__ratio>:
 800d9a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a8:	4688      	mov	r8, r1
 800d9aa:	4669      	mov	r1, sp
 800d9ac:	4681      	mov	r9, r0
 800d9ae:	f7ff ff4d 	bl	800d84c <__b2d>
 800d9b2:	a901      	add	r1, sp, #4
 800d9b4:	4640      	mov	r0, r8
 800d9b6:	ec55 4b10 	vmov	r4, r5, d0
 800d9ba:	f7ff ff47 	bl	800d84c <__b2d>
 800d9be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d9c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d9c6:	eba3 0c02 	sub.w	ip, r3, r2
 800d9ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d9ce:	1a9b      	subs	r3, r3, r2
 800d9d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d9d4:	ec51 0b10 	vmov	r0, r1, d0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	bfd6      	itet	le
 800d9dc:	460a      	movle	r2, r1
 800d9de:	462a      	movgt	r2, r5
 800d9e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d9e4:	468b      	mov	fp, r1
 800d9e6:	462f      	mov	r7, r5
 800d9e8:	bfd4      	ite	le
 800d9ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d9ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	ee10 2a10 	vmov	r2, s0
 800d9f8:	465b      	mov	r3, fp
 800d9fa:	4639      	mov	r1, r7
 800d9fc:	f7f2 ff36 	bl	800086c <__aeabi_ddiv>
 800da00:	ec41 0b10 	vmov	d0, r0, r1
 800da04:	b003      	add	sp, #12
 800da06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da0a <__copybits>:
 800da0a:	3901      	subs	r1, #1
 800da0c:	b570      	push	{r4, r5, r6, lr}
 800da0e:	1149      	asrs	r1, r1, #5
 800da10:	6914      	ldr	r4, [r2, #16]
 800da12:	3101      	adds	r1, #1
 800da14:	f102 0314 	add.w	r3, r2, #20
 800da18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800da1c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800da20:	1f05      	subs	r5, r0, #4
 800da22:	42a3      	cmp	r3, r4
 800da24:	d30c      	bcc.n	800da40 <__copybits+0x36>
 800da26:	1aa3      	subs	r3, r4, r2
 800da28:	3b11      	subs	r3, #17
 800da2a:	f023 0303 	bic.w	r3, r3, #3
 800da2e:	3211      	adds	r2, #17
 800da30:	42a2      	cmp	r2, r4
 800da32:	bf88      	it	hi
 800da34:	2300      	movhi	r3, #0
 800da36:	4418      	add	r0, r3
 800da38:	2300      	movs	r3, #0
 800da3a:	4288      	cmp	r0, r1
 800da3c:	d305      	bcc.n	800da4a <__copybits+0x40>
 800da3e:	bd70      	pop	{r4, r5, r6, pc}
 800da40:	f853 6b04 	ldr.w	r6, [r3], #4
 800da44:	f845 6f04 	str.w	r6, [r5, #4]!
 800da48:	e7eb      	b.n	800da22 <__copybits+0x18>
 800da4a:	f840 3b04 	str.w	r3, [r0], #4
 800da4e:	e7f4      	b.n	800da3a <__copybits+0x30>

0800da50 <__any_on>:
 800da50:	f100 0214 	add.w	r2, r0, #20
 800da54:	6900      	ldr	r0, [r0, #16]
 800da56:	114b      	asrs	r3, r1, #5
 800da58:	4298      	cmp	r0, r3
 800da5a:	b510      	push	{r4, lr}
 800da5c:	db11      	blt.n	800da82 <__any_on+0x32>
 800da5e:	dd0a      	ble.n	800da76 <__any_on+0x26>
 800da60:	f011 011f 	ands.w	r1, r1, #31
 800da64:	d007      	beq.n	800da76 <__any_on+0x26>
 800da66:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800da6a:	fa24 f001 	lsr.w	r0, r4, r1
 800da6e:	fa00 f101 	lsl.w	r1, r0, r1
 800da72:	428c      	cmp	r4, r1
 800da74:	d10b      	bne.n	800da8e <__any_on+0x3e>
 800da76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d803      	bhi.n	800da86 <__any_on+0x36>
 800da7e:	2000      	movs	r0, #0
 800da80:	bd10      	pop	{r4, pc}
 800da82:	4603      	mov	r3, r0
 800da84:	e7f7      	b.n	800da76 <__any_on+0x26>
 800da86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da8a:	2900      	cmp	r1, #0
 800da8c:	d0f5      	beq.n	800da7a <__any_on+0x2a>
 800da8e:	2001      	movs	r0, #1
 800da90:	e7f6      	b.n	800da80 <__any_on+0x30>

0800da92 <__ssputs_r>:
 800da92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da96:	688e      	ldr	r6, [r1, #8]
 800da98:	429e      	cmp	r6, r3
 800da9a:	4682      	mov	sl, r0
 800da9c:	460c      	mov	r4, r1
 800da9e:	4690      	mov	r8, r2
 800daa0:	461f      	mov	r7, r3
 800daa2:	d838      	bhi.n	800db16 <__ssputs_r+0x84>
 800daa4:	898a      	ldrh	r2, [r1, #12]
 800daa6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800daaa:	d032      	beq.n	800db12 <__ssputs_r+0x80>
 800daac:	6825      	ldr	r5, [r4, #0]
 800daae:	6909      	ldr	r1, [r1, #16]
 800dab0:	eba5 0901 	sub.w	r9, r5, r1
 800dab4:	6965      	ldr	r5, [r4, #20]
 800dab6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800daba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dabe:	3301      	adds	r3, #1
 800dac0:	444b      	add	r3, r9
 800dac2:	106d      	asrs	r5, r5, #1
 800dac4:	429d      	cmp	r5, r3
 800dac6:	bf38      	it	cc
 800dac8:	461d      	movcc	r5, r3
 800daca:	0553      	lsls	r3, r2, #21
 800dacc:	d531      	bpl.n	800db32 <__ssputs_r+0xa0>
 800dace:	4629      	mov	r1, r5
 800dad0:	f7fc fa5c 	bl	8009f8c <_malloc_r>
 800dad4:	4606      	mov	r6, r0
 800dad6:	b950      	cbnz	r0, 800daee <__ssputs_r+0x5c>
 800dad8:	230c      	movs	r3, #12
 800dada:	f8ca 3000 	str.w	r3, [sl]
 800dade:	89a3      	ldrh	r3, [r4, #12]
 800dae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dae4:	81a3      	strh	r3, [r4, #12]
 800dae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800daea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daee:	6921      	ldr	r1, [r4, #16]
 800daf0:	464a      	mov	r2, r9
 800daf2:	f7ff faf3 	bl	800d0dc <memcpy>
 800daf6:	89a3      	ldrh	r3, [r4, #12]
 800daf8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dafc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db00:	81a3      	strh	r3, [r4, #12]
 800db02:	6126      	str	r6, [r4, #16]
 800db04:	6165      	str	r5, [r4, #20]
 800db06:	444e      	add	r6, r9
 800db08:	eba5 0509 	sub.w	r5, r5, r9
 800db0c:	6026      	str	r6, [r4, #0]
 800db0e:	60a5      	str	r5, [r4, #8]
 800db10:	463e      	mov	r6, r7
 800db12:	42be      	cmp	r6, r7
 800db14:	d900      	bls.n	800db18 <__ssputs_r+0x86>
 800db16:	463e      	mov	r6, r7
 800db18:	6820      	ldr	r0, [r4, #0]
 800db1a:	4632      	mov	r2, r6
 800db1c:	4641      	mov	r1, r8
 800db1e:	f000 fd81 	bl	800e624 <memmove>
 800db22:	68a3      	ldr	r3, [r4, #8]
 800db24:	1b9b      	subs	r3, r3, r6
 800db26:	60a3      	str	r3, [r4, #8]
 800db28:	6823      	ldr	r3, [r4, #0]
 800db2a:	4433      	add	r3, r6
 800db2c:	6023      	str	r3, [r4, #0]
 800db2e:	2000      	movs	r0, #0
 800db30:	e7db      	b.n	800daea <__ssputs_r+0x58>
 800db32:	462a      	mov	r2, r5
 800db34:	f000 fd90 	bl	800e658 <_realloc_r>
 800db38:	4606      	mov	r6, r0
 800db3a:	2800      	cmp	r0, #0
 800db3c:	d1e1      	bne.n	800db02 <__ssputs_r+0x70>
 800db3e:	6921      	ldr	r1, [r4, #16]
 800db40:	4650      	mov	r0, sl
 800db42:	f7fc f9b7 	bl	8009eb4 <_free_r>
 800db46:	e7c7      	b.n	800dad8 <__ssputs_r+0x46>

0800db48 <_svfiprintf_r>:
 800db48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db4c:	4698      	mov	r8, r3
 800db4e:	898b      	ldrh	r3, [r1, #12]
 800db50:	061b      	lsls	r3, r3, #24
 800db52:	b09d      	sub	sp, #116	; 0x74
 800db54:	4607      	mov	r7, r0
 800db56:	460d      	mov	r5, r1
 800db58:	4614      	mov	r4, r2
 800db5a:	d50e      	bpl.n	800db7a <_svfiprintf_r+0x32>
 800db5c:	690b      	ldr	r3, [r1, #16]
 800db5e:	b963      	cbnz	r3, 800db7a <_svfiprintf_r+0x32>
 800db60:	2140      	movs	r1, #64	; 0x40
 800db62:	f7fc fa13 	bl	8009f8c <_malloc_r>
 800db66:	6028      	str	r0, [r5, #0]
 800db68:	6128      	str	r0, [r5, #16]
 800db6a:	b920      	cbnz	r0, 800db76 <_svfiprintf_r+0x2e>
 800db6c:	230c      	movs	r3, #12
 800db6e:	603b      	str	r3, [r7, #0]
 800db70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db74:	e0d1      	b.n	800dd1a <_svfiprintf_r+0x1d2>
 800db76:	2340      	movs	r3, #64	; 0x40
 800db78:	616b      	str	r3, [r5, #20]
 800db7a:	2300      	movs	r3, #0
 800db7c:	9309      	str	r3, [sp, #36]	; 0x24
 800db7e:	2320      	movs	r3, #32
 800db80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db84:	f8cd 800c 	str.w	r8, [sp, #12]
 800db88:	2330      	movs	r3, #48	; 0x30
 800db8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd34 <_svfiprintf_r+0x1ec>
 800db8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db92:	f04f 0901 	mov.w	r9, #1
 800db96:	4623      	mov	r3, r4
 800db98:	469a      	mov	sl, r3
 800db9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db9e:	b10a      	cbz	r2, 800dba4 <_svfiprintf_r+0x5c>
 800dba0:	2a25      	cmp	r2, #37	; 0x25
 800dba2:	d1f9      	bne.n	800db98 <_svfiprintf_r+0x50>
 800dba4:	ebba 0b04 	subs.w	fp, sl, r4
 800dba8:	d00b      	beq.n	800dbc2 <_svfiprintf_r+0x7a>
 800dbaa:	465b      	mov	r3, fp
 800dbac:	4622      	mov	r2, r4
 800dbae:	4629      	mov	r1, r5
 800dbb0:	4638      	mov	r0, r7
 800dbb2:	f7ff ff6e 	bl	800da92 <__ssputs_r>
 800dbb6:	3001      	adds	r0, #1
 800dbb8:	f000 80aa 	beq.w	800dd10 <_svfiprintf_r+0x1c8>
 800dbbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbbe:	445a      	add	r2, fp
 800dbc0:	9209      	str	r2, [sp, #36]	; 0x24
 800dbc2:	f89a 3000 	ldrb.w	r3, [sl]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	f000 80a2 	beq.w	800dd10 <_svfiprintf_r+0x1c8>
 800dbcc:	2300      	movs	r3, #0
 800dbce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dbd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbd6:	f10a 0a01 	add.w	sl, sl, #1
 800dbda:	9304      	str	r3, [sp, #16]
 800dbdc:	9307      	str	r3, [sp, #28]
 800dbde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbe2:	931a      	str	r3, [sp, #104]	; 0x68
 800dbe4:	4654      	mov	r4, sl
 800dbe6:	2205      	movs	r2, #5
 800dbe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbec:	4851      	ldr	r0, [pc, #324]	; (800dd34 <_svfiprintf_r+0x1ec>)
 800dbee:	f7f2 fb07 	bl	8000200 <memchr>
 800dbf2:	9a04      	ldr	r2, [sp, #16]
 800dbf4:	b9d8      	cbnz	r0, 800dc2e <_svfiprintf_r+0xe6>
 800dbf6:	06d0      	lsls	r0, r2, #27
 800dbf8:	bf44      	itt	mi
 800dbfa:	2320      	movmi	r3, #32
 800dbfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc00:	0711      	lsls	r1, r2, #28
 800dc02:	bf44      	itt	mi
 800dc04:	232b      	movmi	r3, #43	; 0x2b
 800dc06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc0a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc0e:	2b2a      	cmp	r3, #42	; 0x2a
 800dc10:	d015      	beq.n	800dc3e <_svfiprintf_r+0xf6>
 800dc12:	9a07      	ldr	r2, [sp, #28]
 800dc14:	4654      	mov	r4, sl
 800dc16:	2000      	movs	r0, #0
 800dc18:	f04f 0c0a 	mov.w	ip, #10
 800dc1c:	4621      	mov	r1, r4
 800dc1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc22:	3b30      	subs	r3, #48	; 0x30
 800dc24:	2b09      	cmp	r3, #9
 800dc26:	d94e      	bls.n	800dcc6 <_svfiprintf_r+0x17e>
 800dc28:	b1b0      	cbz	r0, 800dc58 <_svfiprintf_r+0x110>
 800dc2a:	9207      	str	r2, [sp, #28]
 800dc2c:	e014      	b.n	800dc58 <_svfiprintf_r+0x110>
 800dc2e:	eba0 0308 	sub.w	r3, r0, r8
 800dc32:	fa09 f303 	lsl.w	r3, r9, r3
 800dc36:	4313      	orrs	r3, r2
 800dc38:	9304      	str	r3, [sp, #16]
 800dc3a:	46a2      	mov	sl, r4
 800dc3c:	e7d2      	b.n	800dbe4 <_svfiprintf_r+0x9c>
 800dc3e:	9b03      	ldr	r3, [sp, #12]
 800dc40:	1d19      	adds	r1, r3, #4
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	9103      	str	r1, [sp, #12]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	bfbb      	ittet	lt
 800dc4a:	425b      	neglt	r3, r3
 800dc4c:	f042 0202 	orrlt.w	r2, r2, #2
 800dc50:	9307      	strge	r3, [sp, #28]
 800dc52:	9307      	strlt	r3, [sp, #28]
 800dc54:	bfb8      	it	lt
 800dc56:	9204      	strlt	r2, [sp, #16]
 800dc58:	7823      	ldrb	r3, [r4, #0]
 800dc5a:	2b2e      	cmp	r3, #46	; 0x2e
 800dc5c:	d10c      	bne.n	800dc78 <_svfiprintf_r+0x130>
 800dc5e:	7863      	ldrb	r3, [r4, #1]
 800dc60:	2b2a      	cmp	r3, #42	; 0x2a
 800dc62:	d135      	bne.n	800dcd0 <_svfiprintf_r+0x188>
 800dc64:	9b03      	ldr	r3, [sp, #12]
 800dc66:	1d1a      	adds	r2, r3, #4
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	9203      	str	r2, [sp, #12]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	bfb8      	it	lt
 800dc70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dc74:	3402      	adds	r4, #2
 800dc76:	9305      	str	r3, [sp, #20]
 800dc78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dd44 <_svfiprintf_r+0x1fc>
 800dc7c:	7821      	ldrb	r1, [r4, #0]
 800dc7e:	2203      	movs	r2, #3
 800dc80:	4650      	mov	r0, sl
 800dc82:	f7f2 fabd 	bl	8000200 <memchr>
 800dc86:	b140      	cbz	r0, 800dc9a <_svfiprintf_r+0x152>
 800dc88:	2340      	movs	r3, #64	; 0x40
 800dc8a:	eba0 000a 	sub.w	r0, r0, sl
 800dc8e:	fa03 f000 	lsl.w	r0, r3, r0
 800dc92:	9b04      	ldr	r3, [sp, #16]
 800dc94:	4303      	orrs	r3, r0
 800dc96:	3401      	adds	r4, #1
 800dc98:	9304      	str	r3, [sp, #16]
 800dc9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc9e:	4826      	ldr	r0, [pc, #152]	; (800dd38 <_svfiprintf_r+0x1f0>)
 800dca0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dca4:	2206      	movs	r2, #6
 800dca6:	f7f2 faab 	bl	8000200 <memchr>
 800dcaa:	2800      	cmp	r0, #0
 800dcac:	d038      	beq.n	800dd20 <_svfiprintf_r+0x1d8>
 800dcae:	4b23      	ldr	r3, [pc, #140]	; (800dd3c <_svfiprintf_r+0x1f4>)
 800dcb0:	bb1b      	cbnz	r3, 800dcfa <_svfiprintf_r+0x1b2>
 800dcb2:	9b03      	ldr	r3, [sp, #12]
 800dcb4:	3307      	adds	r3, #7
 800dcb6:	f023 0307 	bic.w	r3, r3, #7
 800dcba:	3308      	adds	r3, #8
 800dcbc:	9303      	str	r3, [sp, #12]
 800dcbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcc0:	4433      	add	r3, r6
 800dcc2:	9309      	str	r3, [sp, #36]	; 0x24
 800dcc4:	e767      	b.n	800db96 <_svfiprintf_r+0x4e>
 800dcc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcca:	460c      	mov	r4, r1
 800dccc:	2001      	movs	r0, #1
 800dcce:	e7a5      	b.n	800dc1c <_svfiprintf_r+0xd4>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	3401      	adds	r4, #1
 800dcd4:	9305      	str	r3, [sp, #20]
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	f04f 0c0a 	mov.w	ip, #10
 800dcdc:	4620      	mov	r0, r4
 800dcde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dce2:	3a30      	subs	r2, #48	; 0x30
 800dce4:	2a09      	cmp	r2, #9
 800dce6:	d903      	bls.n	800dcf0 <_svfiprintf_r+0x1a8>
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d0c5      	beq.n	800dc78 <_svfiprintf_r+0x130>
 800dcec:	9105      	str	r1, [sp, #20]
 800dcee:	e7c3      	b.n	800dc78 <_svfiprintf_r+0x130>
 800dcf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcf4:	4604      	mov	r4, r0
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e7f0      	b.n	800dcdc <_svfiprintf_r+0x194>
 800dcfa:	ab03      	add	r3, sp, #12
 800dcfc:	9300      	str	r3, [sp, #0]
 800dcfe:	462a      	mov	r2, r5
 800dd00:	4b0f      	ldr	r3, [pc, #60]	; (800dd40 <_svfiprintf_r+0x1f8>)
 800dd02:	a904      	add	r1, sp, #16
 800dd04:	4638      	mov	r0, r7
 800dd06:	f7fc fa55 	bl	800a1b4 <_printf_float>
 800dd0a:	1c42      	adds	r2, r0, #1
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	d1d6      	bne.n	800dcbe <_svfiprintf_r+0x176>
 800dd10:	89ab      	ldrh	r3, [r5, #12]
 800dd12:	065b      	lsls	r3, r3, #25
 800dd14:	f53f af2c 	bmi.w	800db70 <_svfiprintf_r+0x28>
 800dd18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd1a:	b01d      	add	sp, #116	; 0x74
 800dd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd20:	ab03      	add	r3, sp, #12
 800dd22:	9300      	str	r3, [sp, #0]
 800dd24:	462a      	mov	r2, r5
 800dd26:	4b06      	ldr	r3, [pc, #24]	; (800dd40 <_svfiprintf_r+0x1f8>)
 800dd28:	a904      	add	r1, sp, #16
 800dd2a:	4638      	mov	r0, r7
 800dd2c:	f7fc fce6 	bl	800a6fc <_printf_i>
 800dd30:	e7eb      	b.n	800dd0a <_svfiprintf_r+0x1c2>
 800dd32:	bf00      	nop
 800dd34:	0800ef3c 	.word	0x0800ef3c
 800dd38:	0800ef46 	.word	0x0800ef46
 800dd3c:	0800a1b5 	.word	0x0800a1b5
 800dd40:	0800da93 	.word	0x0800da93
 800dd44:	0800ef42 	.word	0x0800ef42

0800dd48 <__sfputc_r>:
 800dd48:	6893      	ldr	r3, [r2, #8]
 800dd4a:	3b01      	subs	r3, #1
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	b410      	push	{r4}
 800dd50:	6093      	str	r3, [r2, #8]
 800dd52:	da08      	bge.n	800dd66 <__sfputc_r+0x1e>
 800dd54:	6994      	ldr	r4, [r2, #24]
 800dd56:	42a3      	cmp	r3, r4
 800dd58:	db01      	blt.n	800dd5e <__sfputc_r+0x16>
 800dd5a:	290a      	cmp	r1, #10
 800dd5c:	d103      	bne.n	800dd66 <__sfputc_r+0x1e>
 800dd5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd62:	f000 b969 	b.w	800e038 <__swbuf_r>
 800dd66:	6813      	ldr	r3, [r2, #0]
 800dd68:	1c58      	adds	r0, r3, #1
 800dd6a:	6010      	str	r0, [r2, #0]
 800dd6c:	7019      	strb	r1, [r3, #0]
 800dd6e:	4608      	mov	r0, r1
 800dd70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd74:	4770      	bx	lr

0800dd76 <__sfputs_r>:
 800dd76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd78:	4606      	mov	r6, r0
 800dd7a:	460f      	mov	r7, r1
 800dd7c:	4614      	mov	r4, r2
 800dd7e:	18d5      	adds	r5, r2, r3
 800dd80:	42ac      	cmp	r4, r5
 800dd82:	d101      	bne.n	800dd88 <__sfputs_r+0x12>
 800dd84:	2000      	movs	r0, #0
 800dd86:	e007      	b.n	800dd98 <__sfputs_r+0x22>
 800dd88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd8c:	463a      	mov	r2, r7
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f7ff ffda 	bl	800dd48 <__sfputc_r>
 800dd94:	1c43      	adds	r3, r0, #1
 800dd96:	d1f3      	bne.n	800dd80 <__sfputs_r+0xa>
 800dd98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd9c <_vfiprintf_r>:
 800dd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda0:	460d      	mov	r5, r1
 800dda2:	b09d      	sub	sp, #116	; 0x74
 800dda4:	4614      	mov	r4, r2
 800dda6:	4698      	mov	r8, r3
 800dda8:	4606      	mov	r6, r0
 800ddaa:	b118      	cbz	r0, 800ddb4 <_vfiprintf_r+0x18>
 800ddac:	6983      	ldr	r3, [r0, #24]
 800ddae:	b90b      	cbnz	r3, 800ddb4 <_vfiprintf_r+0x18>
 800ddb0:	f000 fb32 	bl	800e418 <__sinit>
 800ddb4:	4b89      	ldr	r3, [pc, #548]	; (800dfdc <_vfiprintf_r+0x240>)
 800ddb6:	429d      	cmp	r5, r3
 800ddb8:	d11b      	bne.n	800ddf2 <_vfiprintf_r+0x56>
 800ddba:	6875      	ldr	r5, [r6, #4]
 800ddbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddbe:	07d9      	lsls	r1, r3, #31
 800ddc0:	d405      	bmi.n	800ddce <_vfiprintf_r+0x32>
 800ddc2:	89ab      	ldrh	r3, [r5, #12]
 800ddc4:	059a      	lsls	r2, r3, #22
 800ddc6:	d402      	bmi.n	800ddce <_vfiprintf_r+0x32>
 800ddc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddca:	f000 fbc3 	bl	800e554 <__retarget_lock_acquire_recursive>
 800ddce:	89ab      	ldrh	r3, [r5, #12]
 800ddd0:	071b      	lsls	r3, r3, #28
 800ddd2:	d501      	bpl.n	800ddd8 <_vfiprintf_r+0x3c>
 800ddd4:	692b      	ldr	r3, [r5, #16]
 800ddd6:	b9eb      	cbnz	r3, 800de14 <_vfiprintf_r+0x78>
 800ddd8:	4629      	mov	r1, r5
 800ddda:	4630      	mov	r0, r6
 800dddc:	f000 f98c 	bl	800e0f8 <__swsetup_r>
 800dde0:	b1c0      	cbz	r0, 800de14 <_vfiprintf_r+0x78>
 800dde2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dde4:	07dc      	lsls	r4, r3, #31
 800dde6:	d50e      	bpl.n	800de06 <_vfiprintf_r+0x6a>
 800dde8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddec:	b01d      	add	sp, #116	; 0x74
 800ddee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddf2:	4b7b      	ldr	r3, [pc, #492]	; (800dfe0 <_vfiprintf_r+0x244>)
 800ddf4:	429d      	cmp	r5, r3
 800ddf6:	d101      	bne.n	800ddfc <_vfiprintf_r+0x60>
 800ddf8:	68b5      	ldr	r5, [r6, #8]
 800ddfa:	e7df      	b.n	800ddbc <_vfiprintf_r+0x20>
 800ddfc:	4b79      	ldr	r3, [pc, #484]	; (800dfe4 <_vfiprintf_r+0x248>)
 800ddfe:	429d      	cmp	r5, r3
 800de00:	bf08      	it	eq
 800de02:	68f5      	ldreq	r5, [r6, #12]
 800de04:	e7da      	b.n	800ddbc <_vfiprintf_r+0x20>
 800de06:	89ab      	ldrh	r3, [r5, #12]
 800de08:	0598      	lsls	r0, r3, #22
 800de0a:	d4ed      	bmi.n	800dde8 <_vfiprintf_r+0x4c>
 800de0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de0e:	f000 fba2 	bl	800e556 <__retarget_lock_release_recursive>
 800de12:	e7e9      	b.n	800dde8 <_vfiprintf_r+0x4c>
 800de14:	2300      	movs	r3, #0
 800de16:	9309      	str	r3, [sp, #36]	; 0x24
 800de18:	2320      	movs	r3, #32
 800de1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800de22:	2330      	movs	r3, #48	; 0x30
 800de24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dfe8 <_vfiprintf_r+0x24c>
 800de28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de2c:	f04f 0901 	mov.w	r9, #1
 800de30:	4623      	mov	r3, r4
 800de32:	469a      	mov	sl, r3
 800de34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de38:	b10a      	cbz	r2, 800de3e <_vfiprintf_r+0xa2>
 800de3a:	2a25      	cmp	r2, #37	; 0x25
 800de3c:	d1f9      	bne.n	800de32 <_vfiprintf_r+0x96>
 800de3e:	ebba 0b04 	subs.w	fp, sl, r4
 800de42:	d00b      	beq.n	800de5c <_vfiprintf_r+0xc0>
 800de44:	465b      	mov	r3, fp
 800de46:	4622      	mov	r2, r4
 800de48:	4629      	mov	r1, r5
 800de4a:	4630      	mov	r0, r6
 800de4c:	f7ff ff93 	bl	800dd76 <__sfputs_r>
 800de50:	3001      	adds	r0, #1
 800de52:	f000 80aa 	beq.w	800dfaa <_vfiprintf_r+0x20e>
 800de56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de58:	445a      	add	r2, fp
 800de5a:	9209      	str	r2, [sp, #36]	; 0x24
 800de5c:	f89a 3000 	ldrb.w	r3, [sl]
 800de60:	2b00      	cmp	r3, #0
 800de62:	f000 80a2 	beq.w	800dfaa <_vfiprintf_r+0x20e>
 800de66:	2300      	movs	r3, #0
 800de68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de70:	f10a 0a01 	add.w	sl, sl, #1
 800de74:	9304      	str	r3, [sp, #16]
 800de76:	9307      	str	r3, [sp, #28]
 800de78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de7c:	931a      	str	r3, [sp, #104]	; 0x68
 800de7e:	4654      	mov	r4, sl
 800de80:	2205      	movs	r2, #5
 800de82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de86:	4858      	ldr	r0, [pc, #352]	; (800dfe8 <_vfiprintf_r+0x24c>)
 800de88:	f7f2 f9ba 	bl	8000200 <memchr>
 800de8c:	9a04      	ldr	r2, [sp, #16]
 800de8e:	b9d8      	cbnz	r0, 800dec8 <_vfiprintf_r+0x12c>
 800de90:	06d1      	lsls	r1, r2, #27
 800de92:	bf44      	itt	mi
 800de94:	2320      	movmi	r3, #32
 800de96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de9a:	0713      	lsls	r3, r2, #28
 800de9c:	bf44      	itt	mi
 800de9e:	232b      	movmi	r3, #43	; 0x2b
 800dea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dea4:	f89a 3000 	ldrb.w	r3, [sl]
 800dea8:	2b2a      	cmp	r3, #42	; 0x2a
 800deaa:	d015      	beq.n	800ded8 <_vfiprintf_r+0x13c>
 800deac:	9a07      	ldr	r2, [sp, #28]
 800deae:	4654      	mov	r4, sl
 800deb0:	2000      	movs	r0, #0
 800deb2:	f04f 0c0a 	mov.w	ip, #10
 800deb6:	4621      	mov	r1, r4
 800deb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800debc:	3b30      	subs	r3, #48	; 0x30
 800debe:	2b09      	cmp	r3, #9
 800dec0:	d94e      	bls.n	800df60 <_vfiprintf_r+0x1c4>
 800dec2:	b1b0      	cbz	r0, 800def2 <_vfiprintf_r+0x156>
 800dec4:	9207      	str	r2, [sp, #28]
 800dec6:	e014      	b.n	800def2 <_vfiprintf_r+0x156>
 800dec8:	eba0 0308 	sub.w	r3, r0, r8
 800decc:	fa09 f303 	lsl.w	r3, r9, r3
 800ded0:	4313      	orrs	r3, r2
 800ded2:	9304      	str	r3, [sp, #16]
 800ded4:	46a2      	mov	sl, r4
 800ded6:	e7d2      	b.n	800de7e <_vfiprintf_r+0xe2>
 800ded8:	9b03      	ldr	r3, [sp, #12]
 800deda:	1d19      	adds	r1, r3, #4
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	9103      	str	r1, [sp, #12]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	bfbb      	ittet	lt
 800dee4:	425b      	neglt	r3, r3
 800dee6:	f042 0202 	orrlt.w	r2, r2, #2
 800deea:	9307      	strge	r3, [sp, #28]
 800deec:	9307      	strlt	r3, [sp, #28]
 800deee:	bfb8      	it	lt
 800def0:	9204      	strlt	r2, [sp, #16]
 800def2:	7823      	ldrb	r3, [r4, #0]
 800def4:	2b2e      	cmp	r3, #46	; 0x2e
 800def6:	d10c      	bne.n	800df12 <_vfiprintf_r+0x176>
 800def8:	7863      	ldrb	r3, [r4, #1]
 800defa:	2b2a      	cmp	r3, #42	; 0x2a
 800defc:	d135      	bne.n	800df6a <_vfiprintf_r+0x1ce>
 800defe:	9b03      	ldr	r3, [sp, #12]
 800df00:	1d1a      	adds	r2, r3, #4
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	9203      	str	r2, [sp, #12]
 800df06:	2b00      	cmp	r3, #0
 800df08:	bfb8      	it	lt
 800df0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800df0e:	3402      	adds	r4, #2
 800df10:	9305      	str	r3, [sp, #20]
 800df12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dff8 <_vfiprintf_r+0x25c>
 800df16:	7821      	ldrb	r1, [r4, #0]
 800df18:	2203      	movs	r2, #3
 800df1a:	4650      	mov	r0, sl
 800df1c:	f7f2 f970 	bl	8000200 <memchr>
 800df20:	b140      	cbz	r0, 800df34 <_vfiprintf_r+0x198>
 800df22:	2340      	movs	r3, #64	; 0x40
 800df24:	eba0 000a 	sub.w	r0, r0, sl
 800df28:	fa03 f000 	lsl.w	r0, r3, r0
 800df2c:	9b04      	ldr	r3, [sp, #16]
 800df2e:	4303      	orrs	r3, r0
 800df30:	3401      	adds	r4, #1
 800df32:	9304      	str	r3, [sp, #16]
 800df34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df38:	482c      	ldr	r0, [pc, #176]	; (800dfec <_vfiprintf_r+0x250>)
 800df3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df3e:	2206      	movs	r2, #6
 800df40:	f7f2 f95e 	bl	8000200 <memchr>
 800df44:	2800      	cmp	r0, #0
 800df46:	d03f      	beq.n	800dfc8 <_vfiprintf_r+0x22c>
 800df48:	4b29      	ldr	r3, [pc, #164]	; (800dff0 <_vfiprintf_r+0x254>)
 800df4a:	bb1b      	cbnz	r3, 800df94 <_vfiprintf_r+0x1f8>
 800df4c:	9b03      	ldr	r3, [sp, #12]
 800df4e:	3307      	adds	r3, #7
 800df50:	f023 0307 	bic.w	r3, r3, #7
 800df54:	3308      	adds	r3, #8
 800df56:	9303      	str	r3, [sp, #12]
 800df58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df5a:	443b      	add	r3, r7
 800df5c:	9309      	str	r3, [sp, #36]	; 0x24
 800df5e:	e767      	b.n	800de30 <_vfiprintf_r+0x94>
 800df60:	fb0c 3202 	mla	r2, ip, r2, r3
 800df64:	460c      	mov	r4, r1
 800df66:	2001      	movs	r0, #1
 800df68:	e7a5      	b.n	800deb6 <_vfiprintf_r+0x11a>
 800df6a:	2300      	movs	r3, #0
 800df6c:	3401      	adds	r4, #1
 800df6e:	9305      	str	r3, [sp, #20]
 800df70:	4619      	mov	r1, r3
 800df72:	f04f 0c0a 	mov.w	ip, #10
 800df76:	4620      	mov	r0, r4
 800df78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df7c:	3a30      	subs	r2, #48	; 0x30
 800df7e:	2a09      	cmp	r2, #9
 800df80:	d903      	bls.n	800df8a <_vfiprintf_r+0x1ee>
 800df82:	2b00      	cmp	r3, #0
 800df84:	d0c5      	beq.n	800df12 <_vfiprintf_r+0x176>
 800df86:	9105      	str	r1, [sp, #20]
 800df88:	e7c3      	b.n	800df12 <_vfiprintf_r+0x176>
 800df8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800df8e:	4604      	mov	r4, r0
 800df90:	2301      	movs	r3, #1
 800df92:	e7f0      	b.n	800df76 <_vfiprintf_r+0x1da>
 800df94:	ab03      	add	r3, sp, #12
 800df96:	9300      	str	r3, [sp, #0]
 800df98:	462a      	mov	r2, r5
 800df9a:	4b16      	ldr	r3, [pc, #88]	; (800dff4 <_vfiprintf_r+0x258>)
 800df9c:	a904      	add	r1, sp, #16
 800df9e:	4630      	mov	r0, r6
 800dfa0:	f7fc f908 	bl	800a1b4 <_printf_float>
 800dfa4:	4607      	mov	r7, r0
 800dfa6:	1c78      	adds	r0, r7, #1
 800dfa8:	d1d6      	bne.n	800df58 <_vfiprintf_r+0x1bc>
 800dfaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfac:	07d9      	lsls	r1, r3, #31
 800dfae:	d405      	bmi.n	800dfbc <_vfiprintf_r+0x220>
 800dfb0:	89ab      	ldrh	r3, [r5, #12]
 800dfb2:	059a      	lsls	r2, r3, #22
 800dfb4:	d402      	bmi.n	800dfbc <_vfiprintf_r+0x220>
 800dfb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfb8:	f000 facd 	bl	800e556 <__retarget_lock_release_recursive>
 800dfbc:	89ab      	ldrh	r3, [r5, #12]
 800dfbe:	065b      	lsls	r3, r3, #25
 800dfc0:	f53f af12 	bmi.w	800dde8 <_vfiprintf_r+0x4c>
 800dfc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfc6:	e711      	b.n	800ddec <_vfiprintf_r+0x50>
 800dfc8:	ab03      	add	r3, sp, #12
 800dfca:	9300      	str	r3, [sp, #0]
 800dfcc:	462a      	mov	r2, r5
 800dfce:	4b09      	ldr	r3, [pc, #36]	; (800dff4 <_vfiprintf_r+0x258>)
 800dfd0:	a904      	add	r1, sp, #16
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	f7fc fb92 	bl	800a6fc <_printf_i>
 800dfd8:	e7e4      	b.n	800dfa4 <_vfiprintf_r+0x208>
 800dfda:	bf00      	nop
 800dfdc:	0800ef70 	.word	0x0800ef70
 800dfe0:	0800ef90 	.word	0x0800ef90
 800dfe4:	0800ef50 	.word	0x0800ef50
 800dfe8:	0800ef3c 	.word	0x0800ef3c
 800dfec:	0800ef46 	.word	0x0800ef46
 800dff0:	0800a1b5 	.word	0x0800a1b5
 800dff4:	0800dd77 	.word	0x0800dd77
 800dff8:	0800ef42 	.word	0x0800ef42
 800dffc:	00000000 	.word	0x00000000

0800e000 <nan>:
 800e000:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e008 <nan+0x8>
 800e004:	4770      	bx	lr
 800e006:	bf00      	nop
 800e008:	00000000 	.word	0x00000000
 800e00c:	7ff80000 	.word	0x7ff80000

0800e010 <strncmp>:
 800e010:	b510      	push	{r4, lr}
 800e012:	b17a      	cbz	r2, 800e034 <strncmp+0x24>
 800e014:	4603      	mov	r3, r0
 800e016:	3901      	subs	r1, #1
 800e018:	1884      	adds	r4, r0, r2
 800e01a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e01e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e022:	4290      	cmp	r0, r2
 800e024:	d101      	bne.n	800e02a <strncmp+0x1a>
 800e026:	42a3      	cmp	r3, r4
 800e028:	d101      	bne.n	800e02e <strncmp+0x1e>
 800e02a:	1a80      	subs	r0, r0, r2
 800e02c:	bd10      	pop	{r4, pc}
 800e02e:	2800      	cmp	r0, #0
 800e030:	d1f3      	bne.n	800e01a <strncmp+0xa>
 800e032:	e7fa      	b.n	800e02a <strncmp+0x1a>
 800e034:	4610      	mov	r0, r2
 800e036:	e7f9      	b.n	800e02c <strncmp+0x1c>

0800e038 <__swbuf_r>:
 800e038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e03a:	460e      	mov	r6, r1
 800e03c:	4614      	mov	r4, r2
 800e03e:	4605      	mov	r5, r0
 800e040:	b118      	cbz	r0, 800e04a <__swbuf_r+0x12>
 800e042:	6983      	ldr	r3, [r0, #24]
 800e044:	b90b      	cbnz	r3, 800e04a <__swbuf_r+0x12>
 800e046:	f000 f9e7 	bl	800e418 <__sinit>
 800e04a:	4b21      	ldr	r3, [pc, #132]	; (800e0d0 <__swbuf_r+0x98>)
 800e04c:	429c      	cmp	r4, r3
 800e04e:	d12b      	bne.n	800e0a8 <__swbuf_r+0x70>
 800e050:	686c      	ldr	r4, [r5, #4]
 800e052:	69a3      	ldr	r3, [r4, #24]
 800e054:	60a3      	str	r3, [r4, #8]
 800e056:	89a3      	ldrh	r3, [r4, #12]
 800e058:	071a      	lsls	r2, r3, #28
 800e05a:	d52f      	bpl.n	800e0bc <__swbuf_r+0x84>
 800e05c:	6923      	ldr	r3, [r4, #16]
 800e05e:	b36b      	cbz	r3, 800e0bc <__swbuf_r+0x84>
 800e060:	6923      	ldr	r3, [r4, #16]
 800e062:	6820      	ldr	r0, [r4, #0]
 800e064:	1ac0      	subs	r0, r0, r3
 800e066:	6963      	ldr	r3, [r4, #20]
 800e068:	b2f6      	uxtb	r6, r6
 800e06a:	4283      	cmp	r3, r0
 800e06c:	4637      	mov	r7, r6
 800e06e:	dc04      	bgt.n	800e07a <__swbuf_r+0x42>
 800e070:	4621      	mov	r1, r4
 800e072:	4628      	mov	r0, r5
 800e074:	f000 f93c 	bl	800e2f0 <_fflush_r>
 800e078:	bb30      	cbnz	r0, 800e0c8 <__swbuf_r+0x90>
 800e07a:	68a3      	ldr	r3, [r4, #8]
 800e07c:	3b01      	subs	r3, #1
 800e07e:	60a3      	str	r3, [r4, #8]
 800e080:	6823      	ldr	r3, [r4, #0]
 800e082:	1c5a      	adds	r2, r3, #1
 800e084:	6022      	str	r2, [r4, #0]
 800e086:	701e      	strb	r6, [r3, #0]
 800e088:	6963      	ldr	r3, [r4, #20]
 800e08a:	3001      	adds	r0, #1
 800e08c:	4283      	cmp	r3, r0
 800e08e:	d004      	beq.n	800e09a <__swbuf_r+0x62>
 800e090:	89a3      	ldrh	r3, [r4, #12]
 800e092:	07db      	lsls	r3, r3, #31
 800e094:	d506      	bpl.n	800e0a4 <__swbuf_r+0x6c>
 800e096:	2e0a      	cmp	r6, #10
 800e098:	d104      	bne.n	800e0a4 <__swbuf_r+0x6c>
 800e09a:	4621      	mov	r1, r4
 800e09c:	4628      	mov	r0, r5
 800e09e:	f000 f927 	bl	800e2f0 <_fflush_r>
 800e0a2:	b988      	cbnz	r0, 800e0c8 <__swbuf_r+0x90>
 800e0a4:	4638      	mov	r0, r7
 800e0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0a8:	4b0a      	ldr	r3, [pc, #40]	; (800e0d4 <__swbuf_r+0x9c>)
 800e0aa:	429c      	cmp	r4, r3
 800e0ac:	d101      	bne.n	800e0b2 <__swbuf_r+0x7a>
 800e0ae:	68ac      	ldr	r4, [r5, #8]
 800e0b0:	e7cf      	b.n	800e052 <__swbuf_r+0x1a>
 800e0b2:	4b09      	ldr	r3, [pc, #36]	; (800e0d8 <__swbuf_r+0xa0>)
 800e0b4:	429c      	cmp	r4, r3
 800e0b6:	bf08      	it	eq
 800e0b8:	68ec      	ldreq	r4, [r5, #12]
 800e0ba:	e7ca      	b.n	800e052 <__swbuf_r+0x1a>
 800e0bc:	4621      	mov	r1, r4
 800e0be:	4628      	mov	r0, r5
 800e0c0:	f000 f81a 	bl	800e0f8 <__swsetup_r>
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	d0cb      	beq.n	800e060 <__swbuf_r+0x28>
 800e0c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e0cc:	e7ea      	b.n	800e0a4 <__swbuf_r+0x6c>
 800e0ce:	bf00      	nop
 800e0d0:	0800ef70 	.word	0x0800ef70
 800e0d4:	0800ef90 	.word	0x0800ef90
 800e0d8:	0800ef50 	.word	0x0800ef50

0800e0dc <__ascii_wctomb>:
 800e0dc:	b149      	cbz	r1, 800e0f2 <__ascii_wctomb+0x16>
 800e0de:	2aff      	cmp	r2, #255	; 0xff
 800e0e0:	bf85      	ittet	hi
 800e0e2:	238a      	movhi	r3, #138	; 0x8a
 800e0e4:	6003      	strhi	r3, [r0, #0]
 800e0e6:	700a      	strbls	r2, [r1, #0]
 800e0e8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e0ec:	bf98      	it	ls
 800e0ee:	2001      	movls	r0, #1
 800e0f0:	4770      	bx	lr
 800e0f2:	4608      	mov	r0, r1
 800e0f4:	4770      	bx	lr
	...

0800e0f8 <__swsetup_r>:
 800e0f8:	4b32      	ldr	r3, [pc, #200]	; (800e1c4 <__swsetup_r+0xcc>)
 800e0fa:	b570      	push	{r4, r5, r6, lr}
 800e0fc:	681d      	ldr	r5, [r3, #0]
 800e0fe:	4606      	mov	r6, r0
 800e100:	460c      	mov	r4, r1
 800e102:	b125      	cbz	r5, 800e10e <__swsetup_r+0x16>
 800e104:	69ab      	ldr	r3, [r5, #24]
 800e106:	b913      	cbnz	r3, 800e10e <__swsetup_r+0x16>
 800e108:	4628      	mov	r0, r5
 800e10a:	f000 f985 	bl	800e418 <__sinit>
 800e10e:	4b2e      	ldr	r3, [pc, #184]	; (800e1c8 <__swsetup_r+0xd0>)
 800e110:	429c      	cmp	r4, r3
 800e112:	d10f      	bne.n	800e134 <__swsetup_r+0x3c>
 800e114:	686c      	ldr	r4, [r5, #4]
 800e116:	89a3      	ldrh	r3, [r4, #12]
 800e118:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e11c:	0719      	lsls	r1, r3, #28
 800e11e:	d42c      	bmi.n	800e17a <__swsetup_r+0x82>
 800e120:	06dd      	lsls	r5, r3, #27
 800e122:	d411      	bmi.n	800e148 <__swsetup_r+0x50>
 800e124:	2309      	movs	r3, #9
 800e126:	6033      	str	r3, [r6, #0]
 800e128:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e12c:	81a3      	strh	r3, [r4, #12]
 800e12e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e132:	e03e      	b.n	800e1b2 <__swsetup_r+0xba>
 800e134:	4b25      	ldr	r3, [pc, #148]	; (800e1cc <__swsetup_r+0xd4>)
 800e136:	429c      	cmp	r4, r3
 800e138:	d101      	bne.n	800e13e <__swsetup_r+0x46>
 800e13a:	68ac      	ldr	r4, [r5, #8]
 800e13c:	e7eb      	b.n	800e116 <__swsetup_r+0x1e>
 800e13e:	4b24      	ldr	r3, [pc, #144]	; (800e1d0 <__swsetup_r+0xd8>)
 800e140:	429c      	cmp	r4, r3
 800e142:	bf08      	it	eq
 800e144:	68ec      	ldreq	r4, [r5, #12]
 800e146:	e7e6      	b.n	800e116 <__swsetup_r+0x1e>
 800e148:	0758      	lsls	r0, r3, #29
 800e14a:	d512      	bpl.n	800e172 <__swsetup_r+0x7a>
 800e14c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e14e:	b141      	cbz	r1, 800e162 <__swsetup_r+0x6a>
 800e150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e154:	4299      	cmp	r1, r3
 800e156:	d002      	beq.n	800e15e <__swsetup_r+0x66>
 800e158:	4630      	mov	r0, r6
 800e15a:	f7fb feab 	bl	8009eb4 <_free_r>
 800e15e:	2300      	movs	r3, #0
 800e160:	6363      	str	r3, [r4, #52]	; 0x34
 800e162:	89a3      	ldrh	r3, [r4, #12]
 800e164:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e168:	81a3      	strh	r3, [r4, #12]
 800e16a:	2300      	movs	r3, #0
 800e16c:	6063      	str	r3, [r4, #4]
 800e16e:	6923      	ldr	r3, [r4, #16]
 800e170:	6023      	str	r3, [r4, #0]
 800e172:	89a3      	ldrh	r3, [r4, #12]
 800e174:	f043 0308 	orr.w	r3, r3, #8
 800e178:	81a3      	strh	r3, [r4, #12]
 800e17a:	6923      	ldr	r3, [r4, #16]
 800e17c:	b94b      	cbnz	r3, 800e192 <__swsetup_r+0x9a>
 800e17e:	89a3      	ldrh	r3, [r4, #12]
 800e180:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e188:	d003      	beq.n	800e192 <__swsetup_r+0x9a>
 800e18a:	4621      	mov	r1, r4
 800e18c:	4630      	mov	r0, r6
 800e18e:	f000 fa09 	bl	800e5a4 <__smakebuf_r>
 800e192:	89a0      	ldrh	r0, [r4, #12]
 800e194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e198:	f010 0301 	ands.w	r3, r0, #1
 800e19c:	d00a      	beq.n	800e1b4 <__swsetup_r+0xbc>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	60a3      	str	r3, [r4, #8]
 800e1a2:	6963      	ldr	r3, [r4, #20]
 800e1a4:	425b      	negs	r3, r3
 800e1a6:	61a3      	str	r3, [r4, #24]
 800e1a8:	6923      	ldr	r3, [r4, #16]
 800e1aa:	b943      	cbnz	r3, 800e1be <__swsetup_r+0xc6>
 800e1ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e1b0:	d1ba      	bne.n	800e128 <__swsetup_r+0x30>
 800e1b2:	bd70      	pop	{r4, r5, r6, pc}
 800e1b4:	0781      	lsls	r1, r0, #30
 800e1b6:	bf58      	it	pl
 800e1b8:	6963      	ldrpl	r3, [r4, #20]
 800e1ba:	60a3      	str	r3, [r4, #8]
 800e1bc:	e7f4      	b.n	800e1a8 <__swsetup_r+0xb0>
 800e1be:	2000      	movs	r0, #0
 800e1c0:	e7f7      	b.n	800e1b2 <__swsetup_r+0xba>
 800e1c2:	bf00      	nop
 800e1c4:	2000013c 	.word	0x2000013c
 800e1c8:	0800ef70 	.word	0x0800ef70
 800e1cc:	0800ef90 	.word	0x0800ef90
 800e1d0:	0800ef50 	.word	0x0800ef50

0800e1d4 <abort>:
 800e1d4:	b508      	push	{r3, lr}
 800e1d6:	2006      	movs	r0, #6
 800e1d8:	f000 fa96 	bl	800e708 <raise>
 800e1dc:	2001      	movs	r0, #1
 800e1de:	f7f4 f8ff 	bl	80023e0 <_exit>
	...

0800e1e4 <__sflush_r>:
 800e1e4:	898a      	ldrh	r2, [r1, #12]
 800e1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ea:	4605      	mov	r5, r0
 800e1ec:	0710      	lsls	r0, r2, #28
 800e1ee:	460c      	mov	r4, r1
 800e1f0:	d458      	bmi.n	800e2a4 <__sflush_r+0xc0>
 800e1f2:	684b      	ldr	r3, [r1, #4]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	dc05      	bgt.n	800e204 <__sflush_r+0x20>
 800e1f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	dc02      	bgt.n	800e204 <__sflush_r+0x20>
 800e1fe:	2000      	movs	r0, #0
 800e200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e206:	2e00      	cmp	r6, #0
 800e208:	d0f9      	beq.n	800e1fe <__sflush_r+0x1a>
 800e20a:	2300      	movs	r3, #0
 800e20c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e210:	682f      	ldr	r7, [r5, #0]
 800e212:	602b      	str	r3, [r5, #0]
 800e214:	d032      	beq.n	800e27c <__sflush_r+0x98>
 800e216:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e218:	89a3      	ldrh	r3, [r4, #12]
 800e21a:	075a      	lsls	r2, r3, #29
 800e21c:	d505      	bpl.n	800e22a <__sflush_r+0x46>
 800e21e:	6863      	ldr	r3, [r4, #4]
 800e220:	1ac0      	subs	r0, r0, r3
 800e222:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e224:	b10b      	cbz	r3, 800e22a <__sflush_r+0x46>
 800e226:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e228:	1ac0      	subs	r0, r0, r3
 800e22a:	2300      	movs	r3, #0
 800e22c:	4602      	mov	r2, r0
 800e22e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e230:	6a21      	ldr	r1, [r4, #32]
 800e232:	4628      	mov	r0, r5
 800e234:	47b0      	blx	r6
 800e236:	1c43      	adds	r3, r0, #1
 800e238:	89a3      	ldrh	r3, [r4, #12]
 800e23a:	d106      	bne.n	800e24a <__sflush_r+0x66>
 800e23c:	6829      	ldr	r1, [r5, #0]
 800e23e:	291d      	cmp	r1, #29
 800e240:	d82c      	bhi.n	800e29c <__sflush_r+0xb8>
 800e242:	4a2a      	ldr	r2, [pc, #168]	; (800e2ec <__sflush_r+0x108>)
 800e244:	40ca      	lsrs	r2, r1
 800e246:	07d6      	lsls	r6, r2, #31
 800e248:	d528      	bpl.n	800e29c <__sflush_r+0xb8>
 800e24a:	2200      	movs	r2, #0
 800e24c:	6062      	str	r2, [r4, #4]
 800e24e:	04d9      	lsls	r1, r3, #19
 800e250:	6922      	ldr	r2, [r4, #16]
 800e252:	6022      	str	r2, [r4, #0]
 800e254:	d504      	bpl.n	800e260 <__sflush_r+0x7c>
 800e256:	1c42      	adds	r2, r0, #1
 800e258:	d101      	bne.n	800e25e <__sflush_r+0x7a>
 800e25a:	682b      	ldr	r3, [r5, #0]
 800e25c:	b903      	cbnz	r3, 800e260 <__sflush_r+0x7c>
 800e25e:	6560      	str	r0, [r4, #84]	; 0x54
 800e260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e262:	602f      	str	r7, [r5, #0]
 800e264:	2900      	cmp	r1, #0
 800e266:	d0ca      	beq.n	800e1fe <__sflush_r+0x1a>
 800e268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e26c:	4299      	cmp	r1, r3
 800e26e:	d002      	beq.n	800e276 <__sflush_r+0x92>
 800e270:	4628      	mov	r0, r5
 800e272:	f7fb fe1f 	bl	8009eb4 <_free_r>
 800e276:	2000      	movs	r0, #0
 800e278:	6360      	str	r0, [r4, #52]	; 0x34
 800e27a:	e7c1      	b.n	800e200 <__sflush_r+0x1c>
 800e27c:	6a21      	ldr	r1, [r4, #32]
 800e27e:	2301      	movs	r3, #1
 800e280:	4628      	mov	r0, r5
 800e282:	47b0      	blx	r6
 800e284:	1c41      	adds	r1, r0, #1
 800e286:	d1c7      	bne.n	800e218 <__sflush_r+0x34>
 800e288:	682b      	ldr	r3, [r5, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d0c4      	beq.n	800e218 <__sflush_r+0x34>
 800e28e:	2b1d      	cmp	r3, #29
 800e290:	d001      	beq.n	800e296 <__sflush_r+0xb2>
 800e292:	2b16      	cmp	r3, #22
 800e294:	d101      	bne.n	800e29a <__sflush_r+0xb6>
 800e296:	602f      	str	r7, [r5, #0]
 800e298:	e7b1      	b.n	800e1fe <__sflush_r+0x1a>
 800e29a:	89a3      	ldrh	r3, [r4, #12]
 800e29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2a0:	81a3      	strh	r3, [r4, #12]
 800e2a2:	e7ad      	b.n	800e200 <__sflush_r+0x1c>
 800e2a4:	690f      	ldr	r7, [r1, #16]
 800e2a6:	2f00      	cmp	r7, #0
 800e2a8:	d0a9      	beq.n	800e1fe <__sflush_r+0x1a>
 800e2aa:	0793      	lsls	r3, r2, #30
 800e2ac:	680e      	ldr	r6, [r1, #0]
 800e2ae:	bf08      	it	eq
 800e2b0:	694b      	ldreq	r3, [r1, #20]
 800e2b2:	600f      	str	r7, [r1, #0]
 800e2b4:	bf18      	it	ne
 800e2b6:	2300      	movne	r3, #0
 800e2b8:	eba6 0807 	sub.w	r8, r6, r7
 800e2bc:	608b      	str	r3, [r1, #8]
 800e2be:	f1b8 0f00 	cmp.w	r8, #0
 800e2c2:	dd9c      	ble.n	800e1fe <__sflush_r+0x1a>
 800e2c4:	6a21      	ldr	r1, [r4, #32]
 800e2c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e2c8:	4643      	mov	r3, r8
 800e2ca:	463a      	mov	r2, r7
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	47b0      	blx	r6
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	dc06      	bgt.n	800e2e2 <__sflush_r+0xfe>
 800e2d4:	89a3      	ldrh	r3, [r4, #12]
 800e2d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2da:	81a3      	strh	r3, [r4, #12]
 800e2dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2e0:	e78e      	b.n	800e200 <__sflush_r+0x1c>
 800e2e2:	4407      	add	r7, r0
 800e2e4:	eba8 0800 	sub.w	r8, r8, r0
 800e2e8:	e7e9      	b.n	800e2be <__sflush_r+0xda>
 800e2ea:	bf00      	nop
 800e2ec:	20400001 	.word	0x20400001

0800e2f0 <_fflush_r>:
 800e2f0:	b538      	push	{r3, r4, r5, lr}
 800e2f2:	690b      	ldr	r3, [r1, #16]
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	b913      	cbnz	r3, 800e300 <_fflush_r+0x10>
 800e2fa:	2500      	movs	r5, #0
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	bd38      	pop	{r3, r4, r5, pc}
 800e300:	b118      	cbz	r0, 800e30a <_fflush_r+0x1a>
 800e302:	6983      	ldr	r3, [r0, #24]
 800e304:	b90b      	cbnz	r3, 800e30a <_fflush_r+0x1a>
 800e306:	f000 f887 	bl	800e418 <__sinit>
 800e30a:	4b14      	ldr	r3, [pc, #80]	; (800e35c <_fflush_r+0x6c>)
 800e30c:	429c      	cmp	r4, r3
 800e30e:	d11b      	bne.n	800e348 <_fflush_r+0x58>
 800e310:	686c      	ldr	r4, [r5, #4]
 800e312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d0ef      	beq.n	800e2fa <_fflush_r+0xa>
 800e31a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e31c:	07d0      	lsls	r0, r2, #31
 800e31e:	d404      	bmi.n	800e32a <_fflush_r+0x3a>
 800e320:	0599      	lsls	r1, r3, #22
 800e322:	d402      	bmi.n	800e32a <_fflush_r+0x3a>
 800e324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e326:	f000 f915 	bl	800e554 <__retarget_lock_acquire_recursive>
 800e32a:	4628      	mov	r0, r5
 800e32c:	4621      	mov	r1, r4
 800e32e:	f7ff ff59 	bl	800e1e4 <__sflush_r>
 800e332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e334:	07da      	lsls	r2, r3, #31
 800e336:	4605      	mov	r5, r0
 800e338:	d4e0      	bmi.n	800e2fc <_fflush_r+0xc>
 800e33a:	89a3      	ldrh	r3, [r4, #12]
 800e33c:	059b      	lsls	r3, r3, #22
 800e33e:	d4dd      	bmi.n	800e2fc <_fflush_r+0xc>
 800e340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e342:	f000 f908 	bl	800e556 <__retarget_lock_release_recursive>
 800e346:	e7d9      	b.n	800e2fc <_fflush_r+0xc>
 800e348:	4b05      	ldr	r3, [pc, #20]	; (800e360 <_fflush_r+0x70>)
 800e34a:	429c      	cmp	r4, r3
 800e34c:	d101      	bne.n	800e352 <_fflush_r+0x62>
 800e34e:	68ac      	ldr	r4, [r5, #8]
 800e350:	e7df      	b.n	800e312 <_fflush_r+0x22>
 800e352:	4b04      	ldr	r3, [pc, #16]	; (800e364 <_fflush_r+0x74>)
 800e354:	429c      	cmp	r4, r3
 800e356:	bf08      	it	eq
 800e358:	68ec      	ldreq	r4, [r5, #12]
 800e35a:	e7da      	b.n	800e312 <_fflush_r+0x22>
 800e35c:	0800ef70 	.word	0x0800ef70
 800e360:	0800ef90 	.word	0x0800ef90
 800e364:	0800ef50 	.word	0x0800ef50

0800e368 <std>:
 800e368:	2300      	movs	r3, #0
 800e36a:	b510      	push	{r4, lr}
 800e36c:	4604      	mov	r4, r0
 800e36e:	e9c0 3300 	strd	r3, r3, [r0]
 800e372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e376:	6083      	str	r3, [r0, #8]
 800e378:	8181      	strh	r1, [r0, #12]
 800e37a:	6643      	str	r3, [r0, #100]	; 0x64
 800e37c:	81c2      	strh	r2, [r0, #14]
 800e37e:	6183      	str	r3, [r0, #24]
 800e380:	4619      	mov	r1, r3
 800e382:	2208      	movs	r2, #8
 800e384:	305c      	adds	r0, #92	; 0x5c
 800e386:	f7fb fd77 	bl	8009e78 <memset>
 800e38a:	4b05      	ldr	r3, [pc, #20]	; (800e3a0 <std+0x38>)
 800e38c:	6263      	str	r3, [r4, #36]	; 0x24
 800e38e:	4b05      	ldr	r3, [pc, #20]	; (800e3a4 <std+0x3c>)
 800e390:	62a3      	str	r3, [r4, #40]	; 0x28
 800e392:	4b05      	ldr	r3, [pc, #20]	; (800e3a8 <std+0x40>)
 800e394:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e396:	4b05      	ldr	r3, [pc, #20]	; (800e3ac <std+0x44>)
 800e398:	6224      	str	r4, [r4, #32]
 800e39a:	6323      	str	r3, [r4, #48]	; 0x30
 800e39c:	bd10      	pop	{r4, pc}
 800e39e:	bf00      	nop
 800e3a0:	0800e741 	.word	0x0800e741
 800e3a4:	0800e763 	.word	0x0800e763
 800e3a8:	0800e79b 	.word	0x0800e79b
 800e3ac:	0800e7bf 	.word	0x0800e7bf

0800e3b0 <_cleanup_r>:
 800e3b0:	4901      	ldr	r1, [pc, #4]	; (800e3b8 <_cleanup_r+0x8>)
 800e3b2:	f000 b8af 	b.w	800e514 <_fwalk_reent>
 800e3b6:	bf00      	nop
 800e3b8:	0800e2f1 	.word	0x0800e2f1

0800e3bc <__sfmoreglue>:
 800e3bc:	b570      	push	{r4, r5, r6, lr}
 800e3be:	2268      	movs	r2, #104	; 0x68
 800e3c0:	1e4d      	subs	r5, r1, #1
 800e3c2:	4355      	muls	r5, r2
 800e3c4:	460e      	mov	r6, r1
 800e3c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e3ca:	f7fb fddf 	bl	8009f8c <_malloc_r>
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	b140      	cbz	r0, 800e3e4 <__sfmoreglue+0x28>
 800e3d2:	2100      	movs	r1, #0
 800e3d4:	e9c0 1600 	strd	r1, r6, [r0]
 800e3d8:	300c      	adds	r0, #12
 800e3da:	60a0      	str	r0, [r4, #8]
 800e3dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e3e0:	f7fb fd4a 	bl	8009e78 <memset>
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	bd70      	pop	{r4, r5, r6, pc}

0800e3e8 <__sfp_lock_acquire>:
 800e3e8:	4801      	ldr	r0, [pc, #4]	; (800e3f0 <__sfp_lock_acquire+0x8>)
 800e3ea:	f000 b8b3 	b.w	800e554 <__retarget_lock_acquire_recursive>
 800e3ee:	bf00      	nop
 800e3f0:	20002081 	.word	0x20002081

0800e3f4 <__sfp_lock_release>:
 800e3f4:	4801      	ldr	r0, [pc, #4]	; (800e3fc <__sfp_lock_release+0x8>)
 800e3f6:	f000 b8ae 	b.w	800e556 <__retarget_lock_release_recursive>
 800e3fa:	bf00      	nop
 800e3fc:	20002081 	.word	0x20002081

0800e400 <__sinit_lock_acquire>:
 800e400:	4801      	ldr	r0, [pc, #4]	; (800e408 <__sinit_lock_acquire+0x8>)
 800e402:	f000 b8a7 	b.w	800e554 <__retarget_lock_acquire_recursive>
 800e406:	bf00      	nop
 800e408:	20002082 	.word	0x20002082

0800e40c <__sinit_lock_release>:
 800e40c:	4801      	ldr	r0, [pc, #4]	; (800e414 <__sinit_lock_release+0x8>)
 800e40e:	f000 b8a2 	b.w	800e556 <__retarget_lock_release_recursive>
 800e412:	bf00      	nop
 800e414:	20002082 	.word	0x20002082

0800e418 <__sinit>:
 800e418:	b510      	push	{r4, lr}
 800e41a:	4604      	mov	r4, r0
 800e41c:	f7ff fff0 	bl	800e400 <__sinit_lock_acquire>
 800e420:	69a3      	ldr	r3, [r4, #24]
 800e422:	b11b      	cbz	r3, 800e42c <__sinit+0x14>
 800e424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e428:	f7ff bff0 	b.w	800e40c <__sinit_lock_release>
 800e42c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e430:	6523      	str	r3, [r4, #80]	; 0x50
 800e432:	4b13      	ldr	r3, [pc, #76]	; (800e480 <__sinit+0x68>)
 800e434:	4a13      	ldr	r2, [pc, #76]	; (800e484 <__sinit+0x6c>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	62a2      	str	r2, [r4, #40]	; 0x28
 800e43a:	42a3      	cmp	r3, r4
 800e43c:	bf04      	itt	eq
 800e43e:	2301      	moveq	r3, #1
 800e440:	61a3      	streq	r3, [r4, #24]
 800e442:	4620      	mov	r0, r4
 800e444:	f000 f820 	bl	800e488 <__sfp>
 800e448:	6060      	str	r0, [r4, #4]
 800e44a:	4620      	mov	r0, r4
 800e44c:	f000 f81c 	bl	800e488 <__sfp>
 800e450:	60a0      	str	r0, [r4, #8]
 800e452:	4620      	mov	r0, r4
 800e454:	f000 f818 	bl	800e488 <__sfp>
 800e458:	2200      	movs	r2, #0
 800e45a:	60e0      	str	r0, [r4, #12]
 800e45c:	2104      	movs	r1, #4
 800e45e:	6860      	ldr	r0, [r4, #4]
 800e460:	f7ff ff82 	bl	800e368 <std>
 800e464:	68a0      	ldr	r0, [r4, #8]
 800e466:	2201      	movs	r2, #1
 800e468:	2109      	movs	r1, #9
 800e46a:	f7ff ff7d 	bl	800e368 <std>
 800e46e:	68e0      	ldr	r0, [r4, #12]
 800e470:	2202      	movs	r2, #2
 800e472:	2112      	movs	r1, #18
 800e474:	f7ff ff78 	bl	800e368 <std>
 800e478:	2301      	movs	r3, #1
 800e47a:	61a3      	str	r3, [r4, #24]
 800e47c:	e7d2      	b.n	800e424 <__sinit+0xc>
 800e47e:	bf00      	nop
 800e480:	0800eab0 	.word	0x0800eab0
 800e484:	0800e3b1 	.word	0x0800e3b1

0800e488 <__sfp>:
 800e488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e48a:	4607      	mov	r7, r0
 800e48c:	f7ff ffac 	bl	800e3e8 <__sfp_lock_acquire>
 800e490:	4b1e      	ldr	r3, [pc, #120]	; (800e50c <__sfp+0x84>)
 800e492:	681e      	ldr	r6, [r3, #0]
 800e494:	69b3      	ldr	r3, [r6, #24]
 800e496:	b913      	cbnz	r3, 800e49e <__sfp+0x16>
 800e498:	4630      	mov	r0, r6
 800e49a:	f7ff ffbd 	bl	800e418 <__sinit>
 800e49e:	3648      	adds	r6, #72	; 0x48
 800e4a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e4a4:	3b01      	subs	r3, #1
 800e4a6:	d503      	bpl.n	800e4b0 <__sfp+0x28>
 800e4a8:	6833      	ldr	r3, [r6, #0]
 800e4aa:	b30b      	cbz	r3, 800e4f0 <__sfp+0x68>
 800e4ac:	6836      	ldr	r6, [r6, #0]
 800e4ae:	e7f7      	b.n	800e4a0 <__sfp+0x18>
 800e4b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e4b4:	b9d5      	cbnz	r5, 800e4ec <__sfp+0x64>
 800e4b6:	4b16      	ldr	r3, [pc, #88]	; (800e510 <__sfp+0x88>)
 800e4b8:	60e3      	str	r3, [r4, #12]
 800e4ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e4be:	6665      	str	r5, [r4, #100]	; 0x64
 800e4c0:	f000 f847 	bl	800e552 <__retarget_lock_init_recursive>
 800e4c4:	f7ff ff96 	bl	800e3f4 <__sfp_lock_release>
 800e4c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e4cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e4d0:	6025      	str	r5, [r4, #0]
 800e4d2:	61a5      	str	r5, [r4, #24]
 800e4d4:	2208      	movs	r2, #8
 800e4d6:	4629      	mov	r1, r5
 800e4d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e4dc:	f7fb fccc 	bl	8009e78 <memset>
 800e4e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e4e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4ec:	3468      	adds	r4, #104	; 0x68
 800e4ee:	e7d9      	b.n	800e4a4 <__sfp+0x1c>
 800e4f0:	2104      	movs	r1, #4
 800e4f2:	4638      	mov	r0, r7
 800e4f4:	f7ff ff62 	bl	800e3bc <__sfmoreglue>
 800e4f8:	4604      	mov	r4, r0
 800e4fa:	6030      	str	r0, [r6, #0]
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	d1d5      	bne.n	800e4ac <__sfp+0x24>
 800e500:	f7ff ff78 	bl	800e3f4 <__sfp_lock_release>
 800e504:	230c      	movs	r3, #12
 800e506:	603b      	str	r3, [r7, #0]
 800e508:	e7ee      	b.n	800e4e8 <__sfp+0x60>
 800e50a:	bf00      	nop
 800e50c:	0800eab0 	.word	0x0800eab0
 800e510:	ffff0001 	.word	0xffff0001

0800e514 <_fwalk_reent>:
 800e514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e518:	4606      	mov	r6, r0
 800e51a:	4688      	mov	r8, r1
 800e51c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e520:	2700      	movs	r7, #0
 800e522:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e526:	f1b9 0901 	subs.w	r9, r9, #1
 800e52a:	d505      	bpl.n	800e538 <_fwalk_reent+0x24>
 800e52c:	6824      	ldr	r4, [r4, #0]
 800e52e:	2c00      	cmp	r4, #0
 800e530:	d1f7      	bne.n	800e522 <_fwalk_reent+0xe>
 800e532:	4638      	mov	r0, r7
 800e534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e538:	89ab      	ldrh	r3, [r5, #12]
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d907      	bls.n	800e54e <_fwalk_reent+0x3a>
 800e53e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e542:	3301      	adds	r3, #1
 800e544:	d003      	beq.n	800e54e <_fwalk_reent+0x3a>
 800e546:	4629      	mov	r1, r5
 800e548:	4630      	mov	r0, r6
 800e54a:	47c0      	blx	r8
 800e54c:	4307      	orrs	r7, r0
 800e54e:	3568      	adds	r5, #104	; 0x68
 800e550:	e7e9      	b.n	800e526 <_fwalk_reent+0x12>

0800e552 <__retarget_lock_init_recursive>:
 800e552:	4770      	bx	lr

0800e554 <__retarget_lock_acquire_recursive>:
 800e554:	4770      	bx	lr

0800e556 <__retarget_lock_release_recursive>:
 800e556:	4770      	bx	lr

0800e558 <__swhatbuf_r>:
 800e558:	b570      	push	{r4, r5, r6, lr}
 800e55a:	460e      	mov	r6, r1
 800e55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e560:	2900      	cmp	r1, #0
 800e562:	b096      	sub	sp, #88	; 0x58
 800e564:	4614      	mov	r4, r2
 800e566:	461d      	mov	r5, r3
 800e568:	da08      	bge.n	800e57c <__swhatbuf_r+0x24>
 800e56a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e56e:	2200      	movs	r2, #0
 800e570:	602a      	str	r2, [r5, #0]
 800e572:	061a      	lsls	r2, r3, #24
 800e574:	d410      	bmi.n	800e598 <__swhatbuf_r+0x40>
 800e576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e57a:	e00e      	b.n	800e59a <__swhatbuf_r+0x42>
 800e57c:	466a      	mov	r2, sp
 800e57e:	f000 f945 	bl	800e80c <_fstat_r>
 800e582:	2800      	cmp	r0, #0
 800e584:	dbf1      	blt.n	800e56a <__swhatbuf_r+0x12>
 800e586:	9a01      	ldr	r2, [sp, #4]
 800e588:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e58c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e590:	425a      	negs	r2, r3
 800e592:	415a      	adcs	r2, r3
 800e594:	602a      	str	r2, [r5, #0]
 800e596:	e7ee      	b.n	800e576 <__swhatbuf_r+0x1e>
 800e598:	2340      	movs	r3, #64	; 0x40
 800e59a:	2000      	movs	r0, #0
 800e59c:	6023      	str	r3, [r4, #0]
 800e59e:	b016      	add	sp, #88	; 0x58
 800e5a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e5a4 <__smakebuf_r>:
 800e5a4:	898b      	ldrh	r3, [r1, #12]
 800e5a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e5a8:	079d      	lsls	r5, r3, #30
 800e5aa:	4606      	mov	r6, r0
 800e5ac:	460c      	mov	r4, r1
 800e5ae:	d507      	bpl.n	800e5c0 <__smakebuf_r+0x1c>
 800e5b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e5b4:	6023      	str	r3, [r4, #0]
 800e5b6:	6123      	str	r3, [r4, #16]
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	6163      	str	r3, [r4, #20]
 800e5bc:	b002      	add	sp, #8
 800e5be:	bd70      	pop	{r4, r5, r6, pc}
 800e5c0:	ab01      	add	r3, sp, #4
 800e5c2:	466a      	mov	r2, sp
 800e5c4:	f7ff ffc8 	bl	800e558 <__swhatbuf_r>
 800e5c8:	9900      	ldr	r1, [sp, #0]
 800e5ca:	4605      	mov	r5, r0
 800e5cc:	4630      	mov	r0, r6
 800e5ce:	f7fb fcdd 	bl	8009f8c <_malloc_r>
 800e5d2:	b948      	cbnz	r0, 800e5e8 <__smakebuf_r+0x44>
 800e5d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5d8:	059a      	lsls	r2, r3, #22
 800e5da:	d4ef      	bmi.n	800e5bc <__smakebuf_r+0x18>
 800e5dc:	f023 0303 	bic.w	r3, r3, #3
 800e5e0:	f043 0302 	orr.w	r3, r3, #2
 800e5e4:	81a3      	strh	r3, [r4, #12]
 800e5e6:	e7e3      	b.n	800e5b0 <__smakebuf_r+0xc>
 800e5e8:	4b0d      	ldr	r3, [pc, #52]	; (800e620 <__smakebuf_r+0x7c>)
 800e5ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800e5ec:	89a3      	ldrh	r3, [r4, #12]
 800e5ee:	6020      	str	r0, [r4, #0]
 800e5f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5f4:	81a3      	strh	r3, [r4, #12]
 800e5f6:	9b00      	ldr	r3, [sp, #0]
 800e5f8:	6163      	str	r3, [r4, #20]
 800e5fa:	9b01      	ldr	r3, [sp, #4]
 800e5fc:	6120      	str	r0, [r4, #16]
 800e5fe:	b15b      	cbz	r3, 800e618 <__smakebuf_r+0x74>
 800e600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e604:	4630      	mov	r0, r6
 800e606:	f000 f913 	bl	800e830 <_isatty_r>
 800e60a:	b128      	cbz	r0, 800e618 <__smakebuf_r+0x74>
 800e60c:	89a3      	ldrh	r3, [r4, #12]
 800e60e:	f023 0303 	bic.w	r3, r3, #3
 800e612:	f043 0301 	orr.w	r3, r3, #1
 800e616:	81a3      	strh	r3, [r4, #12]
 800e618:	89a0      	ldrh	r0, [r4, #12]
 800e61a:	4305      	orrs	r5, r0
 800e61c:	81a5      	strh	r5, [r4, #12]
 800e61e:	e7cd      	b.n	800e5bc <__smakebuf_r+0x18>
 800e620:	0800e3b1 	.word	0x0800e3b1

0800e624 <memmove>:
 800e624:	4288      	cmp	r0, r1
 800e626:	b510      	push	{r4, lr}
 800e628:	eb01 0402 	add.w	r4, r1, r2
 800e62c:	d902      	bls.n	800e634 <memmove+0x10>
 800e62e:	4284      	cmp	r4, r0
 800e630:	4623      	mov	r3, r4
 800e632:	d807      	bhi.n	800e644 <memmove+0x20>
 800e634:	1e43      	subs	r3, r0, #1
 800e636:	42a1      	cmp	r1, r4
 800e638:	d008      	beq.n	800e64c <memmove+0x28>
 800e63a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e63e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e642:	e7f8      	b.n	800e636 <memmove+0x12>
 800e644:	4402      	add	r2, r0
 800e646:	4601      	mov	r1, r0
 800e648:	428a      	cmp	r2, r1
 800e64a:	d100      	bne.n	800e64e <memmove+0x2a>
 800e64c:	bd10      	pop	{r4, pc}
 800e64e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e656:	e7f7      	b.n	800e648 <memmove+0x24>

0800e658 <_realloc_r>:
 800e658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e65c:	4680      	mov	r8, r0
 800e65e:	4614      	mov	r4, r2
 800e660:	460e      	mov	r6, r1
 800e662:	b921      	cbnz	r1, 800e66e <_realloc_r+0x16>
 800e664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e668:	4611      	mov	r1, r2
 800e66a:	f7fb bc8f 	b.w	8009f8c <_malloc_r>
 800e66e:	b92a      	cbnz	r2, 800e67c <_realloc_r+0x24>
 800e670:	f7fb fc20 	bl	8009eb4 <_free_r>
 800e674:	4625      	mov	r5, r4
 800e676:	4628      	mov	r0, r5
 800e678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e67c:	f000 f8fa 	bl	800e874 <_malloc_usable_size_r>
 800e680:	4284      	cmp	r4, r0
 800e682:	4607      	mov	r7, r0
 800e684:	d802      	bhi.n	800e68c <_realloc_r+0x34>
 800e686:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e68a:	d812      	bhi.n	800e6b2 <_realloc_r+0x5a>
 800e68c:	4621      	mov	r1, r4
 800e68e:	4640      	mov	r0, r8
 800e690:	f7fb fc7c 	bl	8009f8c <_malloc_r>
 800e694:	4605      	mov	r5, r0
 800e696:	2800      	cmp	r0, #0
 800e698:	d0ed      	beq.n	800e676 <_realloc_r+0x1e>
 800e69a:	42bc      	cmp	r4, r7
 800e69c:	4622      	mov	r2, r4
 800e69e:	4631      	mov	r1, r6
 800e6a0:	bf28      	it	cs
 800e6a2:	463a      	movcs	r2, r7
 800e6a4:	f7fe fd1a 	bl	800d0dc <memcpy>
 800e6a8:	4631      	mov	r1, r6
 800e6aa:	4640      	mov	r0, r8
 800e6ac:	f7fb fc02 	bl	8009eb4 <_free_r>
 800e6b0:	e7e1      	b.n	800e676 <_realloc_r+0x1e>
 800e6b2:	4635      	mov	r5, r6
 800e6b4:	e7df      	b.n	800e676 <_realloc_r+0x1e>

0800e6b6 <_raise_r>:
 800e6b6:	291f      	cmp	r1, #31
 800e6b8:	b538      	push	{r3, r4, r5, lr}
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	460d      	mov	r5, r1
 800e6be:	d904      	bls.n	800e6ca <_raise_r+0x14>
 800e6c0:	2316      	movs	r3, #22
 800e6c2:	6003      	str	r3, [r0, #0]
 800e6c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6c8:	bd38      	pop	{r3, r4, r5, pc}
 800e6ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e6cc:	b112      	cbz	r2, 800e6d4 <_raise_r+0x1e>
 800e6ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6d2:	b94b      	cbnz	r3, 800e6e8 <_raise_r+0x32>
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f000 f831 	bl	800e73c <_getpid_r>
 800e6da:	462a      	mov	r2, r5
 800e6dc:	4601      	mov	r1, r0
 800e6de:	4620      	mov	r0, r4
 800e6e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6e4:	f000 b818 	b.w	800e718 <_kill_r>
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d00a      	beq.n	800e702 <_raise_r+0x4c>
 800e6ec:	1c59      	adds	r1, r3, #1
 800e6ee:	d103      	bne.n	800e6f8 <_raise_r+0x42>
 800e6f0:	2316      	movs	r3, #22
 800e6f2:	6003      	str	r3, [r0, #0]
 800e6f4:	2001      	movs	r0, #1
 800e6f6:	e7e7      	b.n	800e6c8 <_raise_r+0x12>
 800e6f8:	2400      	movs	r4, #0
 800e6fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e6fe:	4628      	mov	r0, r5
 800e700:	4798      	blx	r3
 800e702:	2000      	movs	r0, #0
 800e704:	e7e0      	b.n	800e6c8 <_raise_r+0x12>
	...

0800e708 <raise>:
 800e708:	4b02      	ldr	r3, [pc, #8]	; (800e714 <raise+0xc>)
 800e70a:	4601      	mov	r1, r0
 800e70c:	6818      	ldr	r0, [r3, #0]
 800e70e:	f7ff bfd2 	b.w	800e6b6 <_raise_r>
 800e712:	bf00      	nop
 800e714:	2000013c 	.word	0x2000013c

0800e718 <_kill_r>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	4d07      	ldr	r5, [pc, #28]	; (800e738 <_kill_r+0x20>)
 800e71c:	2300      	movs	r3, #0
 800e71e:	4604      	mov	r4, r0
 800e720:	4608      	mov	r0, r1
 800e722:	4611      	mov	r1, r2
 800e724:	602b      	str	r3, [r5, #0]
 800e726:	f7f3 fe4b 	bl	80023c0 <_kill>
 800e72a:	1c43      	adds	r3, r0, #1
 800e72c:	d102      	bne.n	800e734 <_kill_r+0x1c>
 800e72e:	682b      	ldr	r3, [r5, #0]
 800e730:	b103      	cbz	r3, 800e734 <_kill_r+0x1c>
 800e732:	6023      	str	r3, [r4, #0]
 800e734:	bd38      	pop	{r3, r4, r5, pc}
 800e736:	bf00      	nop
 800e738:	2000207c 	.word	0x2000207c

0800e73c <_getpid_r>:
 800e73c:	f7f3 be38 	b.w	80023b0 <_getpid>

0800e740 <__sread>:
 800e740:	b510      	push	{r4, lr}
 800e742:	460c      	mov	r4, r1
 800e744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e748:	f000 f89c 	bl	800e884 <_read_r>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	bfab      	itete	ge
 800e750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e752:	89a3      	ldrhlt	r3, [r4, #12]
 800e754:	181b      	addge	r3, r3, r0
 800e756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e75a:	bfac      	ite	ge
 800e75c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e75e:	81a3      	strhlt	r3, [r4, #12]
 800e760:	bd10      	pop	{r4, pc}

0800e762 <__swrite>:
 800e762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e766:	461f      	mov	r7, r3
 800e768:	898b      	ldrh	r3, [r1, #12]
 800e76a:	05db      	lsls	r3, r3, #23
 800e76c:	4605      	mov	r5, r0
 800e76e:	460c      	mov	r4, r1
 800e770:	4616      	mov	r6, r2
 800e772:	d505      	bpl.n	800e780 <__swrite+0x1e>
 800e774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e778:	2302      	movs	r3, #2
 800e77a:	2200      	movs	r2, #0
 800e77c:	f000 f868 	bl	800e850 <_lseek_r>
 800e780:	89a3      	ldrh	r3, [r4, #12]
 800e782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e78a:	81a3      	strh	r3, [r4, #12]
 800e78c:	4632      	mov	r2, r6
 800e78e:	463b      	mov	r3, r7
 800e790:	4628      	mov	r0, r5
 800e792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e796:	f000 b817 	b.w	800e7c8 <_write_r>

0800e79a <__sseek>:
 800e79a:	b510      	push	{r4, lr}
 800e79c:	460c      	mov	r4, r1
 800e79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a2:	f000 f855 	bl	800e850 <_lseek_r>
 800e7a6:	1c43      	adds	r3, r0, #1
 800e7a8:	89a3      	ldrh	r3, [r4, #12]
 800e7aa:	bf15      	itete	ne
 800e7ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800e7ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e7b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e7b6:	81a3      	strheq	r3, [r4, #12]
 800e7b8:	bf18      	it	ne
 800e7ba:	81a3      	strhne	r3, [r4, #12]
 800e7bc:	bd10      	pop	{r4, pc}

0800e7be <__sclose>:
 800e7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7c2:	f000 b813 	b.w	800e7ec <_close_r>
	...

0800e7c8 <_write_r>:
 800e7c8:	b538      	push	{r3, r4, r5, lr}
 800e7ca:	4d07      	ldr	r5, [pc, #28]	; (800e7e8 <_write_r+0x20>)
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	4608      	mov	r0, r1
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	602a      	str	r2, [r5, #0]
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	f7f3 fe29 	bl	800242e <_write>
 800e7dc:	1c43      	adds	r3, r0, #1
 800e7de:	d102      	bne.n	800e7e6 <_write_r+0x1e>
 800e7e0:	682b      	ldr	r3, [r5, #0]
 800e7e2:	b103      	cbz	r3, 800e7e6 <_write_r+0x1e>
 800e7e4:	6023      	str	r3, [r4, #0]
 800e7e6:	bd38      	pop	{r3, r4, r5, pc}
 800e7e8:	2000207c 	.word	0x2000207c

0800e7ec <_close_r>:
 800e7ec:	b538      	push	{r3, r4, r5, lr}
 800e7ee:	4d06      	ldr	r5, [pc, #24]	; (800e808 <_close_r+0x1c>)
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	4608      	mov	r0, r1
 800e7f6:	602b      	str	r3, [r5, #0]
 800e7f8:	f7f3 fe35 	bl	8002466 <_close>
 800e7fc:	1c43      	adds	r3, r0, #1
 800e7fe:	d102      	bne.n	800e806 <_close_r+0x1a>
 800e800:	682b      	ldr	r3, [r5, #0]
 800e802:	b103      	cbz	r3, 800e806 <_close_r+0x1a>
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	bd38      	pop	{r3, r4, r5, pc}
 800e808:	2000207c 	.word	0x2000207c

0800e80c <_fstat_r>:
 800e80c:	b538      	push	{r3, r4, r5, lr}
 800e80e:	4d07      	ldr	r5, [pc, #28]	; (800e82c <_fstat_r+0x20>)
 800e810:	2300      	movs	r3, #0
 800e812:	4604      	mov	r4, r0
 800e814:	4608      	mov	r0, r1
 800e816:	4611      	mov	r1, r2
 800e818:	602b      	str	r3, [r5, #0]
 800e81a:	f7f3 fe30 	bl	800247e <_fstat>
 800e81e:	1c43      	adds	r3, r0, #1
 800e820:	d102      	bne.n	800e828 <_fstat_r+0x1c>
 800e822:	682b      	ldr	r3, [r5, #0]
 800e824:	b103      	cbz	r3, 800e828 <_fstat_r+0x1c>
 800e826:	6023      	str	r3, [r4, #0]
 800e828:	bd38      	pop	{r3, r4, r5, pc}
 800e82a:	bf00      	nop
 800e82c:	2000207c 	.word	0x2000207c

0800e830 <_isatty_r>:
 800e830:	b538      	push	{r3, r4, r5, lr}
 800e832:	4d06      	ldr	r5, [pc, #24]	; (800e84c <_isatty_r+0x1c>)
 800e834:	2300      	movs	r3, #0
 800e836:	4604      	mov	r4, r0
 800e838:	4608      	mov	r0, r1
 800e83a:	602b      	str	r3, [r5, #0]
 800e83c:	f7f3 fe2f 	bl	800249e <_isatty>
 800e840:	1c43      	adds	r3, r0, #1
 800e842:	d102      	bne.n	800e84a <_isatty_r+0x1a>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	b103      	cbz	r3, 800e84a <_isatty_r+0x1a>
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	bd38      	pop	{r3, r4, r5, pc}
 800e84c:	2000207c 	.word	0x2000207c

0800e850 <_lseek_r>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	4d07      	ldr	r5, [pc, #28]	; (800e870 <_lseek_r+0x20>)
 800e854:	4604      	mov	r4, r0
 800e856:	4608      	mov	r0, r1
 800e858:	4611      	mov	r1, r2
 800e85a:	2200      	movs	r2, #0
 800e85c:	602a      	str	r2, [r5, #0]
 800e85e:	461a      	mov	r2, r3
 800e860:	f7f3 fe28 	bl	80024b4 <_lseek>
 800e864:	1c43      	adds	r3, r0, #1
 800e866:	d102      	bne.n	800e86e <_lseek_r+0x1e>
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	b103      	cbz	r3, 800e86e <_lseek_r+0x1e>
 800e86c:	6023      	str	r3, [r4, #0]
 800e86e:	bd38      	pop	{r3, r4, r5, pc}
 800e870:	2000207c 	.word	0x2000207c

0800e874 <_malloc_usable_size_r>:
 800e874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e878:	1f18      	subs	r0, r3, #4
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	bfbc      	itt	lt
 800e87e:	580b      	ldrlt	r3, [r1, r0]
 800e880:	18c0      	addlt	r0, r0, r3
 800e882:	4770      	bx	lr

0800e884 <_read_r>:
 800e884:	b538      	push	{r3, r4, r5, lr}
 800e886:	4d07      	ldr	r5, [pc, #28]	; (800e8a4 <_read_r+0x20>)
 800e888:	4604      	mov	r4, r0
 800e88a:	4608      	mov	r0, r1
 800e88c:	4611      	mov	r1, r2
 800e88e:	2200      	movs	r2, #0
 800e890:	602a      	str	r2, [r5, #0]
 800e892:	461a      	mov	r2, r3
 800e894:	f7f3 fdae 	bl	80023f4 <_read>
 800e898:	1c43      	adds	r3, r0, #1
 800e89a:	d102      	bne.n	800e8a2 <_read_r+0x1e>
 800e89c:	682b      	ldr	r3, [r5, #0]
 800e89e:	b103      	cbz	r3, 800e8a2 <_read_r+0x1e>
 800e8a0:	6023      	str	r3, [r4, #0]
 800e8a2:	bd38      	pop	{r3, r4, r5, pc}
 800e8a4:	2000207c 	.word	0x2000207c

0800e8a8 <_init>:
 800e8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8aa:	bf00      	nop
 800e8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ae:	bc08      	pop	{r3}
 800e8b0:	469e      	mov	lr, r3
 800e8b2:	4770      	bx	lr

0800e8b4 <_fini>:
 800e8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b6:	bf00      	nop
 800e8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ba:	bc08      	pop	{r3}
 800e8bc:	469e      	mov	lr, r3
 800e8be:	4770      	bx	lr
